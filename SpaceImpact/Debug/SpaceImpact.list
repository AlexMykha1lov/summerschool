
SpaceImpact.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  0800847c  0800847c  0001847c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086d0  080086d0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080086d0  080086d0  000186d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086d8  080086d8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086d8  080086d8  000186d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086dc  080086dc  000186dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080086e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b64  20000074  08008754  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004bd8  08008754  00024bd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000197a2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000356e  00000000  00000000  00039846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  0003cdb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b0  00000000  00000000  0003e3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004cfa  00000000  00000000  0003f880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ddc  00000000  00000000  0004457a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4e8a  00000000  00000000  0005b356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001001e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000677c  00000000  00000000  00100230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  001069ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  001069d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008464 	.word	0x08008464

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08008464 	.word	0x08008464

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <lcd_start_write>:
static uint16_t textsize_x = 1, textsize_y = 1;
static uint16_t textcolor = ST77XX_WHITE;
static uint16_t textbgcolor = ST77XX_BLACK;
static uint8_t wrap = 1;

static void lcd_start_write(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2110      	movs	r1, #16
 800058c:	4802      	ldr	r0, [pc, #8]	; (8000598 <lcd_start_write+0x14>)
 800058e:	f002 f981 	bl	8002894 <HAL_GPIO_WritePin>
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40020000 	.word	0x40020000

0800059c <lcd_end_write>:

static void lcd_end_write(void) {
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2110      	movs	r1, #16
 80005a4:	4802      	ldr	r0, [pc, #8]	; (80005b0 <lcd_end_write+0x14>)
 80005a6:	f002 f975 	bl	8002894 <HAL_GPIO_WritePin>
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020000 	.word	0x40020000

080005b4 <lcd_start_command>:

static void lcd_start_command(void) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2140      	movs	r1, #64	; 0x40
 80005bc:	4802      	ldr	r0, [pc, #8]	; (80005c8 <lcd_start_command+0x14>)
 80005be:	f002 f969 	bl	8002894 <HAL_GPIO_WritePin>
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40020000 	.word	0x40020000

080005cc <lcd_start_data>:

static void lcd_start_data(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2140      	movs	r1, #64	; 0x40
 80005d4:	4802      	ldr	r0, [pc, #8]	; (80005e0 <lcd_start_data+0x14>)
 80005d6:	f002 f95d 	bl	8002894 <HAL_GPIO_WritePin>
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40020000 	.word	0x40020000

080005e4 <lcd_spi_send_com>:

static void lcd_spi_send_com(uint8_t com) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef stat;
	lcd_start_command();
 80005ee:	f7ff ffe1 	bl	80005b4 <lcd_start_command>
	stat = HAL_SPI_Transmit(&hspi1, &com, 1, 1000);
 80005f2:	1df9      	adds	r1, r7, #7
 80005f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f8:	2201      	movs	r2, #1
 80005fa:	4806      	ldr	r0, [pc, #24]	; (8000614 <lcd_spi_send_com+0x30>)
 80005fc:	f002 fe29 	bl	8003252 <HAL_SPI_Transmit>
 8000600:	4603      	mov	r3, r0
 8000602:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d000      	beq.n	800060c <lcd_spi_send_com+0x28>
		while (1) {}
 800060a:	e7fe      	b.n	800060a <lcd_spi_send_com+0x26>
	}
}
 800060c:	bf00      	nop
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	200000e4 	.word	0x200000e4

08000618 <lcd_spi_send_data>:

static void lcd_spi_send_data(uint8_t *data, size_t size) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef stat;
	if (size) {
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d00f      	beq.n	8000648 <lcd_spi_send_data+0x30>
		lcd_start_data();
 8000628:	f7ff ffd0 	bl	80005cc <lcd_start_data>
		stat = HAL_SPI_Transmit(&hspi1, data, size, 1000);
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	b29a      	uxth	r2, r3
 8000630:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000634:	6879      	ldr	r1, [r7, #4]
 8000636:	4806      	ldr	r0, [pc, #24]	; (8000650 <lcd_spi_send_data+0x38>)
 8000638:	f002 fe0b 	bl	8003252 <HAL_SPI_Transmit>
 800063c:	4603      	mov	r3, r0
 800063e:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d000      	beq.n	8000648 <lcd_spi_send_data+0x30>
			while (1) {}
 8000646:	e7fe      	b.n	8000646 <lcd_spi_send_data+0x2e>
		}
	}
}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200000e4 	.word	0x200000e4

08000654 <lcd_set_window>:

static void lcd_set_window(uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	4604      	mov	r4, r0
 800065c:	4608      	mov	r0, r1
 800065e:	4611      	mov	r1, r2
 8000660:	461a      	mov	r2, r3
 8000662:	4623      	mov	r3, r4
 8000664:	80fb      	strh	r3, [r7, #6]
 8000666:	4603      	mov	r3, r0
 8000668:	80bb      	strh	r3, [r7, #4]
 800066a:	460b      	mov	r3, r1
 800066c:	807b      	strh	r3, [r7, #2]
 800066e:	4613      	mov	r3, r2
 8000670:	803b      	strh	r3, [r7, #0]
	x += _xstart;
 8000672:	4b29      	ldr	r3, [pc, #164]	; (8000718 <lcd_set_window+0xc4>)
 8000674:	881a      	ldrh	r2, [r3, #0]
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	4413      	add	r3, r2
 800067a:	80fb      	strh	r3, [r7, #6]
	y += _ystart;
 800067c:	4b27      	ldr	r3, [pc, #156]	; (800071c <lcd_set_window+0xc8>)
 800067e:	881a      	ldrh	r2, [r3, #0]
 8000680:	88bb      	ldrh	r3, [r7, #4]
 8000682:	4413      	add	r3, r2
 8000684:	80bb      	strh	r3, [r7, #4]

	uint8_t xa[4] = {x >> 8, x, (x+w-1)>>8, (x+w-1) };
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	0a1b      	lsrs	r3, r3, #8
 800068a:	b29b      	uxth	r3, r3
 800068c:	b2db      	uxtb	r3, r3
 800068e:	733b      	strb	r3, [r7, #12]
 8000690:	88fb      	ldrh	r3, [r7, #6]
 8000692:	b2db      	uxtb	r3, r3
 8000694:	737b      	strb	r3, [r7, #13]
 8000696:	88fa      	ldrh	r2, [r7, #6]
 8000698:	887b      	ldrh	r3, [r7, #2]
 800069a:	4413      	add	r3, r2
 800069c:	3b01      	subs	r3, #1
 800069e:	121b      	asrs	r3, r3, #8
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	73bb      	strb	r3, [r7, #14]
 80006a4:	88fb      	ldrh	r3, [r7, #6]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	887b      	ldrh	r3, [r7, #2]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	4413      	add	r3, r2
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	3b01      	subs	r3, #1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	73fb      	strb	r3, [r7, #15]
	uint8_t ya[4] = {y >> 8, y, (y+h-1)>>8, (y+h-1) };
 80006b6:	88bb      	ldrh	r3, [r7, #4]
 80006b8:	0a1b      	lsrs	r3, r3, #8
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	723b      	strb	r3, [r7, #8]
 80006c0:	88bb      	ldrh	r3, [r7, #4]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	727b      	strb	r3, [r7, #9]
 80006c6:	88ba      	ldrh	r2, [r7, #4]
 80006c8:	883b      	ldrh	r3, [r7, #0]
 80006ca:	4413      	add	r3, r2
 80006cc:	3b01      	subs	r3, #1
 80006ce:	121b      	asrs	r3, r3, #8
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	72bb      	strb	r3, [r7, #10]
 80006d4:	88bb      	ldrh	r3, [r7, #4]
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	883b      	ldrh	r3, [r7, #0]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	4413      	add	r3, r2
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	3b01      	subs	r3, #1
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	72fb      	strb	r3, [r7, #11]

	lcd_spi_send_com(ST77XX_CASET);
 80006e6:	202a      	movs	r0, #42	; 0x2a
 80006e8:	f7ff ff7c 	bl	80005e4 <lcd_spi_send_com>
	lcd_spi_send_data(xa, 4);
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2104      	movs	r1, #4
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ff90 	bl	8000618 <lcd_spi_send_data>
	lcd_spi_send_com(ST77XX_RASET);
 80006f8:	202b      	movs	r0, #43	; 0x2b
 80006fa:	f7ff ff73 	bl	80005e4 <lcd_spi_send_com>
	lcd_spi_send_data(ya, 4);
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	2104      	movs	r1, #4
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff87 	bl	8000618 <lcd_spi_send_data>
	lcd_spi_send_com(ST77XX_RAMWR);
 800070a:	202c      	movs	r0, #44	; 0x2c
 800070c:	f7ff ff6a 	bl	80005e4 <lcd_spi_send_com>
}
 8000710:	bf00      	nop
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	bd90      	pop	{r4, r7, pc}
 8000718:	20000092 	.word	0x20000092
 800071c:	20000094 	.word	0x20000094

08000720 <lcd_init>:

/**
 * -------------------------------------------------------------------
 */
int lcd_init(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
	uint8_t numCommands, cmd, numArgs;
	uint16_t ms;

	const uint8_t *ptr = Rcmd;
 8000726:	4b33      	ldr	r3, [pc, #204]	; (80007f4 <lcd_init+0xd4>)
 8000728:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 800072a:	2201      	movs	r2, #1
 800072c:	2102      	movs	r1, #2
 800072e:	4832      	ldr	r0, [pc, #200]	; (80007f8 <lcd_init+0xd8>)
 8000730:	f002 f8b0 	bl	8002894 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000734:	2064      	movs	r0, #100	; 0x64
 8000736:	f001 fa3b 	bl	8001bb0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2102      	movs	r1, #2
 800073e:	482e      	ldr	r0, [pc, #184]	; (80007f8 <lcd_init+0xd8>)
 8000740:	f002 f8a8 	bl	8002894 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000744:	2064      	movs	r0, #100	; 0x64
 8000746:	f001 fa33 	bl	8001bb0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 800074a:	2201      	movs	r2, #1
 800074c:	2102      	movs	r1, #2
 800074e:	482a      	ldr	r0, [pc, #168]	; (80007f8 <lcd_init+0xd8>)
 8000750:	f002 f8a0 	bl	8002894 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000754:	2064      	movs	r0, #100	; 0x64
 8000756:	f001 fa2b 	bl	8001bb0 <HAL_Delay>

	numCommands = *ptr++;
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	1c5a      	adds	r2, r3, #1
 800075e:	60ba      	str	r2, [r7, #8]
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	73fb      	strb	r3, [r7, #15]
	while (numCommands--) {
 8000764:	e035      	b.n	80007d2 <lcd_init+0xb2>
		cmd = *ptr++;
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	1c5a      	adds	r2, r3, #1
 800076a:	60ba      	str	r2, [r7, #8]
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	71fb      	strb	r3, [r7, #7]
		numArgs = *ptr++;
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	1c5a      	adds	r2, r3, #1
 8000774:	60ba      	str	r2, [r7, #8]
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	71bb      	strb	r3, [r7, #6]
		ms = numArgs & ST_CMD_DELAY;
 800077a:	79bb      	ldrb	r3, [r7, #6]
 800077c:	b29b      	uxth	r3, r3
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~ST_CMD_DELAY;
 8000784:	79bb      	ldrb	r3, [r7, #6]
 8000786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800078a:	71bb      	strb	r3, [r7, #6]
		lcd_start_write();
 800078c:	f7ff fefa 	bl	8000584 <lcd_start_write>
		lcd_spi_send_com(cmd);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ff26 	bl	80005e4 <lcd_spi_send_com>
		lcd_spi_send_data((uint8_t*)ptr, numArgs);
 8000798:	79bb      	ldrb	r3, [r7, #6]
 800079a:	4619      	mov	r1, r3
 800079c:	68b8      	ldr	r0, [r7, #8]
 800079e:	f7ff ff3b 	bl	8000618 <lcd_spi_send_data>
		lcd_end_write();
 80007a2:	f7ff fefb 	bl	800059c <lcd_end_write>
		ptr += numArgs;
 80007a6:	79bb      	ldrb	r3, [r7, #6]
 80007a8:	68ba      	ldr	r2, [r7, #8]
 80007aa:	4413      	add	r3, r2
 80007ac:	60bb      	str	r3, [r7, #8]

		if (ms) {
 80007ae:	89bb      	ldrh	r3, [r7, #12]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d00e      	beq.n	80007d2 <lcd_init+0xb2>
			ms = *ptr++;
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	60ba      	str	r2, [r7, #8]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	81bb      	strh	r3, [r7, #12]
			if (ms == 255)
 80007be:	89bb      	ldrh	r3, [r7, #12]
 80007c0:	2bff      	cmp	r3, #255	; 0xff
 80007c2:	d102      	bne.n	80007ca <lcd_init+0xaa>
				ms = 500;
 80007c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007c8:	81bb      	strh	r3, [r7, #12]
			HAL_Delay(ms);
 80007ca:	89bb      	ldrh	r3, [r7, #12]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f001 f9ef 	bl	8001bb0 <HAL_Delay>
	while (numCommands--) {
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
 80007d4:	1e5a      	subs	r2, r3, #1
 80007d6:	73fa      	strb	r2, [r7, #15]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d1c4      	bne.n	8000766 <lcd_init+0x46>
		}
	}

	lcd_start_write();
 80007dc:	f7ff fed2 	bl	8000584 <lcd_start_write>
	lcd_set_rotation(2);
 80007e0:	2002      	movs	r0, #2
 80007e2:	f000 f80b 	bl	80007fc <lcd_set_rotation>
	lcd_end_write();
 80007e6:	f7ff fed9 	bl	800059c <lcd_end_write>

	return 0;
 80007ea:	2300      	movs	r3, #0
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	080084ac 	.word	0x080084ac
 80007f8:	40020000 	.word	0x40020000

080007fc <lcd_set_rotation>:

int lcd_set_rotation(int m) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	uint8_t madctl = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	73fb      	strb	r3, [r7, #15]

	rotation = m & 3; // can't be higher than 3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	b2db      	uxtb	r3, r3
 800080c:	f003 0303 	and.w	r3, r3, #3
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4b35      	ldr	r3, [pc, #212]	; (80008e8 <lcd_set_rotation+0xec>)
 8000814:	701a      	strb	r2, [r3, #0]

	switch (rotation) {
 8000816:	4b34      	ldr	r3, [pc, #208]	; (80008e8 <lcd_set_rotation+0xec>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b03      	cmp	r3, #3
 800081c:	d856      	bhi.n	80008cc <lcd_set_rotation+0xd0>
 800081e:	a201      	add	r2, pc, #4	; (adr r2, 8000824 <lcd_set_rotation+0x28>)
 8000820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000824:	08000835 	.word	0x08000835
 8000828:	0800085b 	.word	0x0800085b
 800082c:	08000881 	.word	0x08000881
 8000830:	080008a7 	.word	0x080008a7
	case 0:
		madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 8000834:	23c0      	movs	r3, #192	; 0xc0
 8000836:	73fb      	strb	r3, [r7, #15]
		_height = ST7735_TFTHEIGHT_160;
 8000838:	4b2c      	ldr	r3, [pc, #176]	; (80008ec <lcd_set_rotation+0xf0>)
 800083a:	22a0      	movs	r2, #160	; 0xa0
 800083c:	801a      	strh	r2, [r3, #0]
		_width = ST7735_TFTWIDTH_128;
 800083e:	4b2c      	ldr	r3, [pc, #176]	; (80008f0 <lcd_set_rotation+0xf4>)
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	801a      	strh	r2, [r3, #0]
		_xstart = _colstart;
 8000844:	4b2b      	ldr	r3, [pc, #172]	; (80008f4 <lcd_set_rotation+0xf8>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	b29a      	uxth	r2, r3
 800084a:	4b2b      	ldr	r3, [pc, #172]	; (80008f8 <lcd_set_rotation+0xfc>)
 800084c:	801a      	strh	r2, [r3, #0]
		_ystart = _rowstart;
 800084e:	4b2b      	ldr	r3, [pc, #172]	; (80008fc <lcd_set_rotation+0x100>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	b29a      	uxth	r2, r3
 8000854:	4b2a      	ldr	r3, [pc, #168]	; (8000900 <lcd_set_rotation+0x104>)
 8000856:	801a      	strh	r2, [r3, #0]
		break;
 8000858:	e038      	b.n	80008cc <lcd_set_rotation+0xd0>
	case 1:
		madctl = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 800085a:	23a0      	movs	r3, #160	; 0xa0
 800085c:	73fb      	strb	r3, [r7, #15]
		_width = ST7735_TFTHEIGHT_160;
 800085e:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <lcd_set_rotation+0xf4>)
 8000860:	22a0      	movs	r2, #160	; 0xa0
 8000862:	801a      	strh	r2, [r3, #0]
		_height = ST7735_TFTWIDTH_128;
 8000864:	4b21      	ldr	r3, [pc, #132]	; (80008ec <lcd_set_rotation+0xf0>)
 8000866:	2280      	movs	r2, #128	; 0x80
 8000868:	801a      	strh	r2, [r3, #0]
		_ystart = _colstart;
 800086a:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <lcd_set_rotation+0xf8>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	b29a      	uxth	r2, r3
 8000870:	4b23      	ldr	r3, [pc, #140]	; (8000900 <lcd_set_rotation+0x104>)
 8000872:	801a      	strh	r2, [r3, #0]
		_xstart = _rowstart;
 8000874:	4b21      	ldr	r3, [pc, #132]	; (80008fc <lcd_set_rotation+0x100>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	b29a      	uxth	r2, r3
 800087a:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <lcd_set_rotation+0xfc>)
 800087c:	801a      	strh	r2, [r3, #0]
		break;
 800087e:	e025      	b.n	80008cc <lcd_set_rotation+0xd0>
	case 2:
		madctl = ST77XX_MADCTL_RGB;
 8000880:	2300      	movs	r3, #0
 8000882:	73fb      	strb	r3, [r7, #15]
		_height = ST7735_TFTHEIGHT_160;
 8000884:	4b19      	ldr	r3, [pc, #100]	; (80008ec <lcd_set_rotation+0xf0>)
 8000886:	22a0      	movs	r2, #160	; 0xa0
 8000888:	801a      	strh	r2, [r3, #0]
		_width = ST7735_TFTWIDTH_128;
 800088a:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <lcd_set_rotation+0xf4>)
 800088c:	2280      	movs	r2, #128	; 0x80
 800088e:	801a      	strh	r2, [r3, #0]
		_xstart = _colstart;
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <lcd_set_rotation+0xf8>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	b29a      	uxth	r2, r3
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <lcd_set_rotation+0xfc>)
 8000898:	801a      	strh	r2, [r3, #0]
		_ystart = _rowstart;
 800089a:	4b18      	ldr	r3, [pc, #96]	; (80008fc <lcd_set_rotation+0x100>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	b29a      	uxth	r2, r3
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <lcd_set_rotation+0x104>)
 80008a2:	801a      	strh	r2, [r3, #0]
		break;
 80008a4:	e012      	b.n	80008cc <lcd_set_rotation+0xd0>
	case 3:
		madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST7735_MADCTL_BGR;
 80008a6:	2368      	movs	r3, #104	; 0x68
 80008a8:	73fb      	strb	r3, [r7, #15]
		_width = ST7735_TFTHEIGHT_160;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <lcd_set_rotation+0xf4>)
 80008ac:	22a0      	movs	r2, #160	; 0xa0
 80008ae:	801a      	strh	r2, [r3, #0]
		_height = ST7735_TFTWIDTH_128;
 80008b0:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <lcd_set_rotation+0xf0>)
 80008b2:	2280      	movs	r2, #128	; 0x80
 80008b4:	801a      	strh	r2, [r3, #0]
		_ystart = _colstart;
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <lcd_set_rotation+0xf8>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	4b10      	ldr	r3, [pc, #64]	; (8000900 <lcd_set_rotation+0x104>)
 80008be:	801a      	strh	r2, [r3, #0]
		_xstart = _rowstart;
 80008c0:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <lcd_set_rotation+0x100>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <lcd_set_rotation+0xfc>)
 80008c8:	801a      	strh	r2, [r3, #0]
		break;
 80008ca:	bf00      	nop
	}

	lcd_spi_send_com(ST77XX_MADCTL);
 80008cc:	2036      	movs	r0, #54	; 0x36
 80008ce:	f7ff fe89 	bl	80005e4 <lcd_spi_send_com>
	lcd_spi_send_data(&madctl, 1);
 80008d2:	f107 030f 	add.w	r3, r7, #15
 80008d6:	2101      	movs	r1, #1
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fe9d 	bl	8000618 <lcd_spi_send_data>
	return 0;
 80008de:	2300      	movs	r3, #0
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000090 	.word	0x20000090
 80008ec:	20000098 	.word	0x20000098
 80008f0:	20000096 	.word	0x20000096
 80008f4:	2000009a 	.word	0x2000009a
 80008f8:	20000092 	.word	0x20000092
 80008fc:	2000009b 	.word	0x2000009b
 8000900:	20000094 	.word	0x20000094

08000904 <lcd_pixel>:

void lcd_pixel(int16_t x, int16_t y, uint16_t color) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	80fb      	strh	r3, [r7, #6]
 800090e:	460b      	mov	r3, r1
 8000910:	80bb      	strh	r3, [r7, #4]
 8000912:	4613      	mov	r3, r2
 8000914:	807b      	strh	r3, [r7, #2]
	if ((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 8000916:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800091a:	2b00      	cmp	r3, #0
 800091c:	db29      	blt.n	8000972 <lcd_pixel+0x6e>
 800091e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000922:	4a16      	ldr	r2, [pc, #88]	; (800097c <lcd_pixel+0x78>)
 8000924:	8812      	ldrh	r2, [r2, #0]
 8000926:	4293      	cmp	r3, r2
 8000928:	da23      	bge.n	8000972 <lcd_pixel+0x6e>
 800092a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800092e:	2b00      	cmp	r3, #0
 8000930:	db1f      	blt.n	8000972 <lcd_pixel+0x6e>
 8000932:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <lcd_pixel+0x7c>)
 8000938:	8812      	ldrh	r2, [r2, #0]
 800093a:	4293      	cmp	r3, r2
 800093c:	da19      	bge.n	8000972 <lcd_pixel+0x6e>
		lcd_start_write();
 800093e:	f7ff fe21 	bl	8000584 <lcd_start_write>
		lcd_set_window(x, y, 1, 1);
 8000942:	88f8      	ldrh	r0, [r7, #6]
 8000944:	88b9      	ldrh	r1, [r7, #4]
 8000946:	2301      	movs	r3, #1
 8000948:	2201      	movs	r2, #1
 800094a:	f7ff fe83 	bl	8000654 <lcd_set_window>
		lcd_start_data();
 800094e:	f7ff fe3d 	bl	80005cc <lcd_start_data>
		uint8_t c[2] = { color >> 8, color};
 8000952:	887b      	ldrh	r3, [r7, #2]
 8000954:	0a1b      	lsrs	r3, r3, #8
 8000956:	b29b      	uxth	r3, r3
 8000958:	b2db      	uxtb	r3, r3
 800095a:	733b      	strb	r3, [r7, #12]
 800095c:	887b      	ldrh	r3, [r7, #2]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	737b      	strb	r3, [r7, #13]
		lcd_spi_send_data(c, 2);
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	2102      	movs	r1, #2
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fe55 	bl	8000618 <lcd_spi_send_data>
		lcd_end_write();
 800096e:	f7ff fe15 	bl	800059c <lcd_end_write>
	}
}
 8000972:	bf00      	nop
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000096 	.word	0x20000096
 8000980:	20000098 	.word	0x20000098

08000984 <lcd_vline>:

void lcd_vline(uint16_t x, uint16_t y, uint16_t h, uint16_t color) {
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	4604      	mov	r4, r0
 800098c:	4608      	mov	r0, r1
 800098e:	4611      	mov	r1, r2
 8000990:	461a      	mov	r2, r3
 8000992:	4623      	mov	r3, r4
 8000994:	80fb      	strh	r3, [r7, #6]
 8000996:	4603      	mov	r3, r0
 8000998:	80bb      	strh	r3, [r7, #4]
 800099a:	460b      	mov	r3, r1
 800099c:	807b      	strh	r3, [r7, #2]
 800099e:	4613      	mov	r3, r2
 80009a0:	803b      	strh	r3, [r7, #0]
	lcd_start_write();
 80009a2:	f7ff fdef 	bl	8000584 <lcd_start_write>
	lcd_set_window(x, y, 1, h);
 80009a6:	887b      	ldrh	r3, [r7, #2]
 80009a8:	88b9      	ldrh	r1, [r7, #4]
 80009aa:	88f8      	ldrh	r0, [r7, #6]
 80009ac:	2201      	movs	r2, #1
 80009ae:	f7ff fe51 	bl	8000654 <lcd_set_window>
	lcd_start_data();
 80009b2:	f7ff fe0b 	bl	80005cc <lcd_start_data>
	uint8_t c[2] = { color >> 8, color};
 80009b6:	883b      	ldrh	r3, [r7, #0]
 80009b8:	0a1b      	lsrs	r3, r3, #8
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	733b      	strb	r3, [r7, #12]
 80009c0:	883b      	ldrh	r3, [r7, #0]
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	737b      	strb	r3, [r7, #13]
	do
		lcd_spi_send_data(c, 2);
 80009c6:	f107 030c 	add.w	r3, r7, #12
 80009ca:	2102      	movs	r1, #2
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fe23 	bl	8000618 <lcd_spi_send_data>
	while (h--);
 80009d2:	887b      	ldrh	r3, [r7, #2]
 80009d4:	1e5a      	subs	r2, r3, #1
 80009d6:	807a      	strh	r2, [r7, #2]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d1f4      	bne.n	80009c6 <lcd_vline+0x42>
	lcd_end_write();
 80009dc:	f7ff fdde 	bl	800059c <lcd_end_write>
}
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd90      	pop	{r4, r7, pc}

080009e8 <lcd_fill_rect>:
	lcd_vline(x+w, y, h, color);
	lcd_hline(x, y, w, color);
	lcd_hline(x, y+h, w, color);
}

void lcd_fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4604      	mov	r4, r0
 80009f0:	4608      	mov	r0, r1
 80009f2:	4611      	mov	r1, r2
 80009f4:	461a      	mov	r2, r3
 80009f6:	4623      	mov	r3, r4
 80009f8:	80fb      	strh	r3, [r7, #6]
 80009fa:	4603      	mov	r3, r0
 80009fc:	80bb      	strh	r3, [r7, #4]
 80009fe:	460b      	mov	r3, r1
 8000a00:	807b      	strh	r3, [r7, #2]
 8000a02:	4613      	mov	r3, r2
 8000a04:	803b      	strh	r3, [r7, #0]
	if (x < 0) x = 0;
 8000a06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	da01      	bge.n	8000a12 <lcd_fill_rect+0x2a>
 8000a0e:	2300      	movs	r3, #0
 8000a10:	80fb      	strh	r3, [r7, #6]
	if (y < 0) y = 0;
 8000a12:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	da01      	bge.n	8000a1e <lcd_fill_rect+0x36>
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	80bb      	strh	r3, [r7, #4]
	if (x + w > _width) w = _width - x;
 8000a1e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000a22:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a26:	4413      	add	r3, r2
 8000a28:	4a20      	ldr	r2, [pc, #128]	; (8000aac <lcd_fill_rect+0xc4>)
 8000a2a:	8812      	ldrh	r2, [r2, #0]
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	dd05      	ble.n	8000a3c <lcd_fill_rect+0x54>
 8000a30:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <lcd_fill_rect+0xc4>)
 8000a32:	881a      	ldrh	r2, [r3, #0]
 8000a34:	88fb      	ldrh	r3, [r7, #6]
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	807b      	strh	r3, [r7, #2]
	if (y + h > _height) h = _height - y;
 8000a3c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000a40:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000a44:	4413      	add	r3, r2
 8000a46:	4a1a      	ldr	r2, [pc, #104]	; (8000ab0 <lcd_fill_rect+0xc8>)
 8000a48:	8812      	ldrh	r2, [r2, #0]
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	dd05      	ble.n	8000a5a <lcd_fill_rect+0x72>
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <lcd_fill_rect+0xc8>)
 8000a50:	881a      	ldrh	r2, [r3, #0]
 8000a52:	88bb      	ldrh	r3, [r7, #4]
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	803b      	strh	r3, [r7, #0]
	lcd_start_write();
 8000a5a:	f7ff fd93 	bl	8000584 <lcd_start_write>
	lcd_set_window(x, y, w, h);
 8000a5e:	88f8      	ldrh	r0, [r7, #6]
 8000a60:	88b9      	ldrh	r1, [r7, #4]
 8000a62:	887a      	ldrh	r2, [r7, #2]
 8000a64:	883b      	ldrh	r3, [r7, #0]
 8000a66:	f7ff fdf5 	bl	8000654 <lcd_set_window>
	uint8_t c[2] = { color >> 8, color};
 8000a6a:	8c3b      	ldrh	r3, [r7, #32]
 8000a6c:	0a1b      	lsrs	r3, r3, #8
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	723b      	strb	r3, [r7, #8]
 8000a74:	8c3b      	ldrh	r3, [r7, #32]
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	727b      	strb	r3, [r7, #9]
	uint32_t cnt = w * h;
 8000a7a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a7e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000a82:	fb02 f303 	mul.w	r3, r2, r3
 8000a86:	60fb      	str	r3, [r7, #12]
	while (cnt--)
 8000a88:	e005      	b.n	8000a96 <lcd_fill_rect+0xae>
		lcd_spi_send_data(c, 2);
 8000a8a:	f107 0308 	add.w	r3, r7, #8
 8000a8e:	2102      	movs	r1, #2
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fdc1 	bl	8000618 <lcd_spi_send_data>
	while (cnt--)
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	1e5a      	subs	r2, r3, #1
 8000a9a:	60fa      	str	r2, [r7, #12]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d1f4      	bne.n	8000a8a <lcd_fill_rect+0xa2>
	lcd_end_write();
 8000aa0:	f7ff fd7c 	bl	800059c <lcd_end_write>
}
 8000aa4:	bf00      	nop
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd90      	pop	{r4, r7, pc}
 8000aac:	20000096 	.word	0x20000096
 8000ab0:	20000098 	.word	0x20000098

08000ab4 <lcd_fill>:

void lcd_fill(uint16_t color) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af02      	add	r7, sp, #8
 8000aba:	4603      	mov	r3, r0
 8000abc:	80fb      	strh	r3, [r7, #6]
	lcd_fill_rect(0, 0, _width, _height, color);
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <lcd_fill+0x2c>)
 8000ac0:	881b      	ldrh	r3, [r3, #0]
 8000ac2:	b21a      	sxth	r2, r3
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <lcd_fill+0x30>)
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	b219      	sxth	r1, r3
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	460b      	mov	r3, r1
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f7ff ff88 	bl	80009e8 <lcd_fill_rect>
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000096 	.word	0x20000096
 8000ae4:	20000098 	.word	0x20000098

08000ae8 <lcd_line>:

void lcd_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b089      	sub	sp, #36	; 0x24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4604      	mov	r4, r0
 8000af0:	4608      	mov	r0, r1
 8000af2:	4611      	mov	r1, r2
 8000af4:	461a      	mov	r2, r3
 8000af6:	4623      	mov	r3, r4
 8000af8:	80fb      	strh	r3, [r7, #6]
 8000afa:	4603      	mov	r3, r0
 8000afc:	80bb      	strh	r3, [r7, #4]
 8000afe:	460b      	mov	r3, r1
 8000b00:	807b      	strh	r3, [r7, #2]
 8000b02:	4613      	mov	r3, r2
 8000b04:	803b      	strh	r3, [r7, #0]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8000b06:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000b0a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b0e:	1ad3      	subs	r3, r2, r3
 8000b10:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000b14:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000b18:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000b1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b20:	1acb      	subs	r3, r1, r3
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	bfb8      	it	lt
 8000b26:	425b      	neglt	r3, r3
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	bfcc      	ite	gt
 8000b2c:	2301      	movgt	r3, #1
 8000b2e:	2300      	movle	r3, #0
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	837b      	strh	r3, [r7, #26]
	if (steep) {
 8000b34:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d00b      	beq.n	8000b54 <lcd_line+0x6c>
		swap16(x0, y0);
 8000b3c:	88fb      	ldrh	r3, [r7, #6]
 8000b3e:	833b      	strh	r3, [r7, #24]
 8000b40:	88bb      	ldrh	r3, [r7, #4]
 8000b42:	80fb      	strh	r3, [r7, #6]
 8000b44:	8b3b      	ldrh	r3, [r7, #24]
 8000b46:	80bb      	strh	r3, [r7, #4]
		swap16(x1, y1);
 8000b48:	887b      	ldrh	r3, [r7, #2]
 8000b4a:	82fb      	strh	r3, [r7, #22]
 8000b4c:	883b      	ldrh	r3, [r7, #0]
 8000b4e:	807b      	strh	r3, [r7, #2]
 8000b50:	8afb      	ldrh	r3, [r7, #22]
 8000b52:	803b      	strh	r3, [r7, #0]
	}

	if (x0 > x1) {
 8000b54:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	dd0b      	ble.n	8000b78 <lcd_line+0x90>
		swap16(x0, x1);
 8000b60:	88fb      	ldrh	r3, [r7, #6]
 8000b62:	82bb      	strh	r3, [r7, #20]
 8000b64:	887b      	ldrh	r3, [r7, #2]
 8000b66:	80fb      	strh	r3, [r7, #6]
 8000b68:	8abb      	ldrh	r3, [r7, #20]
 8000b6a:	807b      	strh	r3, [r7, #2]
		swap16(y0, y1);
 8000b6c:	88bb      	ldrh	r3, [r7, #4]
 8000b6e:	827b      	strh	r3, [r7, #18]
 8000b70:	883b      	ldrh	r3, [r7, #0]
 8000b72:	80bb      	strh	r3, [r7, #4]
 8000b74:	8a7b      	ldrh	r3, [r7, #18]
 8000b76:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x1 - x0;
 8000b78:	887a      	ldrh	r2, [r7, #2]
 8000b7a:	88fb      	ldrh	r3, [r7, #6]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	823b      	strh	r3, [r7, #16]
	dy = abs(y1 - y0);
 8000b82:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000b86:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b8a:	1ad3      	subs	r3, r2, r3
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	bfb8      	it	lt
 8000b90:	425b      	neglt	r3, r3
 8000b92:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 8000b94:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000b98:	0fda      	lsrs	r2, r3, #31
 8000b9a:	4413      	add	r3, r2
 8000b9c:	105b      	asrs	r3, r3, #1
 8000b9e:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y0 < y1) {
 8000ba0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000ba4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	da02      	bge.n	8000bb2 <lcd_line+0xca>
		ystep = 1;
 8000bac:	2301      	movs	r3, #1
 8000bae:	83bb      	strh	r3, [r7, #28]
 8000bb0:	e031      	b.n	8000c16 <lcd_line+0x12e>
	} else {
		ystep = -1;
 8000bb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bb6:	83bb      	strh	r3, [r7, #28]
	}

	for (; x0 <= x1; x0++) {
 8000bb8:	e02d      	b.n	8000c16 <lcd_line+0x12e>
		if (steep) {
 8000bba:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d008      	beq.n	8000bd4 <lcd_line+0xec>
			lcd_pixel(y0, x0, color);
 8000bc2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000bc4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000bc8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fe99 	bl	8000904 <lcd_pixel>
 8000bd2:	e007      	b.n	8000be4 <lcd_line+0xfc>
		} else {
			lcd_pixel(x0, y0, color);
 8000bd4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000bd6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000bda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fe90 	bl	8000904 <lcd_pixel>
		}
		err -= dy;
 8000be4:	8bfa      	ldrh	r2, [r7, #30]
 8000be6:	89fb      	ldrh	r3, [r7, #14]
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	83fb      	strh	r3, [r7, #30]
		if (err < 0) {
 8000bee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	da09      	bge.n	8000c0a <lcd_line+0x122>
			y0 += ystep;
 8000bf6:	88ba      	ldrh	r2, [r7, #4]
 8000bf8:	8bbb      	ldrh	r3, [r7, #28]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	80bb      	strh	r3, [r7, #4]
			err += dx;
 8000c00:	8bfa      	ldrh	r2, [r7, #30]
 8000c02:	8a3b      	ldrh	r3, [r7, #16]
 8000c04:	4413      	add	r3, r2
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	83fb      	strh	r3, [r7, #30]
	for (; x0 <= x1; x0++) {
 8000c0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	3301      	adds	r3, #1
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	80fb      	strh	r3, [r7, #6]
 8000c16:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000c1a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	ddcb      	ble.n	8000bba <lcd_line+0xd2>
		}
	}
}
 8000c22:	bf00      	nop
 8000c24:	bf00      	nop
 8000c26:	3724      	adds	r7, #36	; 0x24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd90      	pop	{r4, r7, pc}

08000c2c <lcd_fill_circle>:
    lcd_pixel(x0 - y, y0 - x, color);
  }
  lcd_end_write();
}

void lcd_fill_circle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b087      	sub	sp, #28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4604      	mov	r4, r0
 8000c34:	4608      	mov	r0, r1
 8000c36:	4611      	mov	r1, r2
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4623      	mov	r3, r4
 8000c3c:	80fb      	strh	r3, [r7, #6]
 8000c3e:	4603      	mov	r3, r0
 8000c40:	80bb      	strh	r3, [r7, #4]
 8000c42:	460b      	mov	r3, r1
 8000c44:	807b      	strh	r3, [r7, #2]
 8000c46:	4613      	mov	r3, r2
 8000c48:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 8000c4a:	887b      	ldrh	r3, [r7, #2]
 8000c4c:	f1c3 0301 	rsb	r3, r3, #1
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8000c54:	2301      	movs	r3, #1
 8000c56:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8000c58:	887b      	ldrh	r3, [r7, #2]
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	03d2      	lsls	r2, r2, #15
 8000c5e:	1ad3      	subs	r3, r2, r3
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8000c6a:	887b      	ldrh	r3, [r7, #2]
 8000c6c:	81fb      	strh	r3, [r7, #14]
	int16_t px = x;
 8000c6e:	8a3b      	ldrh	r3, [r7, #16]
 8000c70:	81bb      	strh	r3, [r7, #12]
	int16_t py = y;
 8000c72:	89fb      	ldrh	r3, [r7, #14]
 8000c74:	817b      	strh	r3, [r7, #10]

	while (x < y) {
 8000c76:	e071      	b.n	8000d5c <lcd_fill_circle+0x130>
		if (f >= 0) {
 8000c78:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	db0e      	blt.n	8000c9e <lcd_fill_circle+0x72>
			y--;
 8000c80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	3b01      	subs	r3, #1
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8000c8c:	8a7b      	ldrh	r3, [r7, #18]
 8000c8e:	3302      	adds	r3, #2
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8000c94:	8afa      	ldrh	r2, [r7, #22]
 8000c96:	8a7b      	ldrh	r3, [r7, #18]
 8000c98:	4413      	add	r3, r2
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8000c9e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8000caa:	8abb      	ldrh	r3, [r7, #20]
 8000cac:	3302      	adds	r3, #2
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8000cb2:	8afa      	ldrh	r2, [r7, #22]
 8000cb4:	8abb      	ldrh	r3, [r7, #20]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	82fb      	strh	r3, [r7, #22]
		if (x < (y + 1)) {
 8000cbc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000cc0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	db1f      	blt.n	8000d08 <lcd_fill_circle+0xdc>
			lcd_vline(x0 + x, y0 - y, 2 * y + 1, color);
 8000cc8:	88fa      	ldrh	r2, [r7, #6]
 8000cca:	8a3b      	ldrh	r3, [r7, #16]
 8000ccc:	4413      	add	r3, r2
 8000cce:	b298      	uxth	r0, r3
 8000cd0:	88ba      	ldrh	r2, [r7, #4]
 8000cd2:	89fb      	ldrh	r3, [r7, #14]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	b299      	uxth	r1, r3
 8000cd8:	89fb      	ldrh	r3, [r7, #14]
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	3301      	adds	r3, #1
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	883b      	ldrh	r3, [r7, #0]
 8000ce4:	f7ff fe4e 	bl	8000984 <lcd_vline>
			lcd_vline(x0 - x, y0 - y, 2 * y + 1, color);
 8000ce8:	88fa      	ldrh	r2, [r7, #6]
 8000cea:	8a3b      	ldrh	r3, [r7, #16]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	b298      	uxth	r0, r3
 8000cf0:	88ba      	ldrh	r2, [r7, #4]
 8000cf2:	89fb      	ldrh	r3, [r7, #14]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	b299      	uxth	r1, r3
 8000cf8:	89fb      	ldrh	r3, [r7, #14]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	3301      	adds	r3, #1
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	883b      	ldrh	r3, [r7, #0]
 8000d04:	f7ff fe3e 	bl	8000984 <lcd_vline>
		}
		if (y != py) {
 8000d08:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000d0c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d021      	beq.n	8000d58 <lcd_fill_circle+0x12c>
			lcd_vline(x0 + py, y0 - px, 2 * px + 1, color);
 8000d14:	88fa      	ldrh	r2, [r7, #6]
 8000d16:	897b      	ldrh	r3, [r7, #10]
 8000d18:	4413      	add	r3, r2
 8000d1a:	b298      	uxth	r0, r3
 8000d1c:	88ba      	ldrh	r2, [r7, #4]
 8000d1e:	89bb      	ldrh	r3, [r7, #12]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	b299      	uxth	r1, r3
 8000d24:	89bb      	ldrh	r3, [r7, #12]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	883b      	ldrh	r3, [r7, #0]
 8000d30:	f7ff fe28 	bl	8000984 <lcd_vline>
			lcd_vline(x0 - py, y0 - px, 2 * px + 1, color);
 8000d34:	88fa      	ldrh	r2, [r7, #6]
 8000d36:	897b      	ldrh	r3, [r7, #10]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	b298      	uxth	r0, r3
 8000d3c:	88ba      	ldrh	r2, [r7, #4]
 8000d3e:	89bb      	ldrh	r3, [r7, #12]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	b299      	uxth	r1, r3
 8000d44:	89bb      	ldrh	r3, [r7, #12]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	883b      	ldrh	r3, [r7, #0]
 8000d50:	f7ff fe18 	bl	8000984 <lcd_vline>
			py = y;
 8000d54:	89fb      	ldrh	r3, [r7, #14]
 8000d56:	817b      	strh	r3, [r7, #10]
		}
		px = x;
 8000d58:	8a3b      	ldrh	r3, [r7, #16]
 8000d5a:	81bb      	strh	r3, [r7, #12]
	while (x < y) {
 8000d5c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000d60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	db87      	blt.n	8000c78 <lcd_fill_circle+0x4c>
	}
	lcd_vline(x0, y0 - r, 2 * r + 1, color);
 8000d68:	88f8      	ldrh	r0, [r7, #6]
 8000d6a:	88ba      	ldrh	r2, [r7, #4]
 8000d6c:	887b      	ldrh	r3, [r7, #2]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	b299      	uxth	r1, r3
 8000d72:	887b      	ldrh	r3, [r7, #2]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	3301      	adds	r3, #1
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	883b      	ldrh	r3, [r7, #0]
 8000d7e:	f7ff fe01 	bl	8000984 <lcd_vline>
}
 8000d82:	bf00      	nop
 8000d84:	371c      	adds	r7, #28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd90      	pop	{r4, r7, pc}
	...

08000d8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  srand(time(NULL));
 8000d90:	2000      	movs	r0, #0
 8000d92:	f006 fd6f 	bl	8007874 <time>
 8000d96:	4602      	mov	r2, r0
 8000d98:	460b      	mov	r3, r1
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f006 fc3f 	bl	8007620 <srand>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da2:	f000 fe93 	bl	8001acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da6:	f000 f855 	bl	8000e54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000daa:	f000 f97f 	bl	80010ac <MX_GPIO_Init>
  MX_ADC1_Init();
 8000dae:	f000 f8bb 	bl	8000f28 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000db2:	f000 f90b 	bl	8000fcc <MX_SPI1_Init>
  MX_TIM9_Init();
 8000db6:	f000 f93f 	bl	8001038 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  bullets.startPtr = NULL;
 8000dba:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <main+0x9c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
  bullets.endPtr = NULL;
 8000dc0:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <main+0x9c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	605a      	str	r2, [r3, #4]
  bullets.cntrElem = 0;
 8000dc6:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <main+0x9c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	721a      	strb	r2, [r3, #8]
  bullets.maxItemNum = BULLETS_MAX_NUM;
 8000dcc:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <main+0x9c>)
 8000dce:	221e      	movs	r2, #30
 8000dd0:	725a      	strb	r2, [r3, #9]

  mobs.startPtr = NULL;
 8000dd2:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <main+0xa0>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
  mobs.endPtr = NULL;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <main+0xa0>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	605a      	str	r2, [r3, #4]
  mobs.cntrElem = 0;
 8000dde:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <main+0xa0>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	721a      	strb	r2, [r3, #8]
  mobs.maxItemNum = MOBS_MAX_NUM;
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <main+0xa0>)
 8000de6:	2203      	movs	r2, #3
 8000de8:	725a      	strb	r2, [r3, #9]

  HAL_TIM_Base_Start_IT(&htim9);
 8000dea:	4811      	ldr	r0, [pc, #68]	; (8000e30 <main+0xa4>)
 8000dec:	f002 fc88 	bl	8003700 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000df0:	f003 f842 	bl	8003e78 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of MTX1 */
  MTX1Handle = osMutexNew(&MTX1_attributes);
 8000df4:	480f      	ldr	r0, [pc, #60]	; (8000e34 <main+0xa8>)
 8000df6:	f003 f936 	bl	8004066 <osMutexNew>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <main+0xac>)
 8000dfe:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Draw */
  DrawHandle = osThreadNew(StartDraw, NULL, &Draw_attributes);
 8000e00:	4a0e      	ldr	r2, [pc, #56]	; (8000e3c <main+0xb0>)
 8000e02:	2100      	movs	r1, #0
 8000e04:	480e      	ldr	r0, [pc, #56]	; (8000e40 <main+0xb4>)
 8000e06:	f003 f881 	bl	8003f0c <osThreadNew>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4a0d      	ldr	r2, [pc, #52]	; (8000e44 <main+0xb8>)
 8000e0e:	6013      	str	r3, [r2, #0]

  /* creation of Control */
  ControlHandle = osThreadNew(StartControl, NULL, &Control_attributes);
 8000e10:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <main+0xbc>)
 8000e12:	2100      	movs	r1, #0
 8000e14:	480d      	ldr	r0, [pc, #52]	; (8000e4c <main+0xc0>)
 8000e16:	f003 f879 	bl	8003f0c <osThreadNew>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4a0c      	ldr	r2, [pc, #48]	; (8000e50 <main+0xc4>)
 8000e1e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000e20:	f003 f84e 	bl	8003ec0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <main+0x98>
 8000e26:	bf00      	nop
 8000e28:	20000190 	.word	0x20000190
 8000e2c:	2000019c 	.word	0x2000019c
 8000e30:	2000013c 	.word	0x2000013c
 8000e34:	08008568 	.word	0x08008568
 8000e38:	2000018c 	.word	0x2000018c
 8000e3c:	08008520 	.word	0x08008520
 8000e40:	080015f1 	.word	0x080015f1
 8000e44:	20000184 	.word	0x20000184
 8000e48:	08008544 	.word	0x08008544
 8000e4c:	08001641 	.word	0x08001641
 8000e50:	20000188 	.word	0x20000188

08000e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b094      	sub	sp, #80	; 0x50
 8000e58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5a:	f107 0320 	add.w	r3, r7, #32
 8000e5e:	2230      	movs	r2, #48	; 0x30
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f006 faf4 	bl	8007450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	4b28      	ldr	r3, [pc, #160]	; (8000f20 <SystemClock_Config+0xcc>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	4a27      	ldr	r2, [pc, #156]	; (8000f20 <SystemClock_Config+0xcc>)
 8000e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e86:	6413      	str	r3, [r2, #64]	; 0x40
 8000e88:	4b25      	ldr	r3, [pc, #148]	; (8000f20 <SystemClock_Config+0xcc>)
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e94:	2300      	movs	r3, #0
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	4b22      	ldr	r3, [pc, #136]	; (8000f24 <SystemClock_Config+0xd0>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ea0:	4a20      	ldr	r2, [pc, #128]	; (8000f24 <SystemClock_Config+0xd0>)
 8000ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ea6:	6013      	str	r3, [r2, #0]
 8000ea8:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <SystemClock_Config+0xd0>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ec2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ec8:	2319      	movs	r3, #25
 8000eca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ecc:	23a8      	movs	r3, #168	; 0xa8
 8000ece:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ed4:	2304      	movs	r3, #4
 8000ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed8:	f107 0320 	add.w	r3, r7, #32
 8000edc:	4618      	mov	r0, r3
 8000ede:	f001 fd0b 	bl	80028f8 <HAL_RCC_OscConfig>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ee8:	f000 fbd2 	bl	8001690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eec:	230f      	movs	r3, #15
 8000eee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000efc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	2102      	movs	r1, #2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f001 ff6d 	bl	8002de8 <HAL_RCC_ClockConfig>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f14:	f000 fbbc 	bl	8001690 <Error_Handler>
  }
}
 8000f18:	bf00      	nop
 8000f1a:	3750      	adds	r7, #80	; 0x50
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40007000 	.word	0x40007000

08000f28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f2e:	463b      	mov	r3, r7
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f3a:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <MX_ADC1_Init+0x98>)
 8000f3c:	4a21      	ldr	r2, [pc, #132]	; (8000fc4 <MX_ADC1_Init+0x9c>)
 8000f3e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f40:	4b1f      	ldr	r3, [pc, #124]	; (8000fc0 <MX_ADC1_Init+0x98>)
 8000f42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f46:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f48:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <MX_ADC1_Init+0x98>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f4e:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <MX_ADC1_Init+0x98>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f54:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <MX_ADC1_Init+0x98>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f5a:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <MX_ADC1_Init+0x98>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f62:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <MX_ADC1_Init+0x98>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f68:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <MX_ADC1_Init+0x98>)
 8000f6a:	4a17      	ldr	r2, [pc, #92]	; (8000fc8 <MX_ADC1_Init+0xa0>)
 8000f6c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f6e:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <MX_ADC1_Init+0x98>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <MX_ADC1_Init+0x98>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f7a:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <MX_ADC1_Init+0x98>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <MX_ADC1_Init+0x98>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f88:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <MX_ADC1_Init+0x98>)
 8000f8a:	f000 fe35 	bl	8001bf8 <HAL_ADC_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f94:	f000 fb7c 	bl	8001690 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa4:	463b      	mov	r3, r7
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_ADC1_Init+0x98>)
 8000faa:	f000 ffbf 	bl	8001f2c <HAL_ADC_ConfigChannel>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fb4:	f000 fb6c 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2000009c 	.word	0x2000009c
 8000fc4:	40012000 	.word	0x40012000
 8000fc8:	0f000001 	.word	0x0f000001

08000fcc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <MX_SPI1_Init+0x64>)
 8000fd2:	4a18      	ldr	r2, [pc, #96]	; (8001034 <MX_SPI1_Init+0x68>)
 8000fd4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fd6:	4b16      	ldr	r3, [pc, #88]	; (8001030 <MX_SPI1_Init+0x64>)
 8000fd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fdc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <MX_SPI1_Init+0x64>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <MX_SPI1_Init+0x64>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <MX_SPI1_Init+0x64>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <MX_SPI1_Init+0x64>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <MX_SPI1_Init+0x64>)
 8000ff8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ffc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <MX_SPI1_Init+0x64>)
 8001000:	2200      	movs	r2, #0
 8001002:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001004:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <MX_SPI1_Init+0x64>)
 8001006:	2200      	movs	r2, #0
 8001008:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <MX_SPI1_Init+0x64>)
 800100c:	2200      	movs	r2, #0
 800100e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <MX_SPI1_Init+0x64>)
 8001012:	2200      	movs	r2, #0
 8001014:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <MX_SPI1_Init+0x64>)
 8001018:	220a      	movs	r2, #10
 800101a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800101c:	4804      	ldr	r0, [pc, #16]	; (8001030 <MX_SPI1_Init+0x64>)
 800101e:	f002 f88f 	bl	8003140 <HAL_SPI_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001028:	f000 fb32 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	200000e4 	.word	0x200000e4
 8001034:	40013000 	.word	0x40013000

08001038 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800103e:	463b      	mov	r3, r7
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <MX_TIM9_Init+0x6c>)
 800104c:	4a16      	ldr	r2, [pc, #88]	; (80010a8 <MX_TIM9_Init+0x70>)
 800104e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 42000;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_TIM9_Init+0x6c>)
 8001052:	f24a 4210 	movw	r2, #42000	; 0xa410
 8001056:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <MX_TIM9_Init+0x6c>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 3000;
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_TIM9_Init+0x6c>)
 8001060:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001064:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_TIM9_Init+0x6c>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800106c:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <MX_TIM9_Init+0x6c>)
 800106e:	2280      	movs	r2, #128	; 0x80
 8001070:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001072:	480c      	ldr	r0, [pc, #48]	; (80010a4 <MX_TIM9_Init+0x6c>)
 8001074:	f002 faf4 	bl	8003660 <HAL_TIM_Base_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 800107e:	f000 fb07 	bl	8001690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001086:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001088:	463b      	mov	r3, r7
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_TIM9_Init+0x6c>)
 800108e:	f002 fca1 	bl	80039d4 <HAL_TIM_ConfigClockSource>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8001098:	f000 fafa 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	2000013c 	.word	0x2000013c
 80010a8:	40014000 	.word	0x40014000

080010ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b2:	f107 030c 	add.w	r3, r7, #12
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	4b2d      	ldr	r3, [pc, #180]	; (800117c <MX_GPIO_Init+0xd0>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a2c      	ldr	r2, [pc, #176]	; (800117c <MX_GPIO_Init+0xd0>)
 80010cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b2a      	ldr	r3, [pc, #168]	; (800117c <MX_GPIO_Init+0xd0>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	4b26      	ldr	r3, [pc, #152]	; (800117c <MX_GPIO_Init+0xd0>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a25      	ldr	r2, [pc, #148]	; (800117c <MX_GPIO_Init+0xd0>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b23      	ldr	r3, [pc, #140]	; (800117c <MX_GPIO_Init+0xd0>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	603b      	str	r3, [r7, #0]
 80010fe:	4b1f      	ldr	r3, [pc, #124]	; (800117c <MX_GPIO_Init+0xd0>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a1e      	ldr	r2, [pc, #120]	; (800117c <MX_GPIO_Init+0xd0>)
 8001104:	f043 0302 	orr.w	r3, r3, #2
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <MX_GPIO_Init+0xd0>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	2102      	movs	r1, #2
 800111a:	4819      	ldr	r0, [pc, #100]	; (8001180 <MX_GPIO_Init+0xd4>)
 800111c:	f001 fbba 	bl	8002894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin|LCD_A0_Pin, GPIO_PIN_SET);
 8001120:	2201      	movs	r2, #1
 8001122:	2150      	movs	r1, #80	; 0x50
 8001124:	4816      	ldr	r0, [pc, #88]	; (8001180 <MX_GPIO_Init+0xd4>)
 8001126:	f001 fbb5 	bl	8002894 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_CS_Pin LCD_A0_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_CS_Pin|LCD_A0_Pin;
 800112a:	2352      	movs	r3, #82	; 0x52
 800112c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112e:	2301      	movs	r3, #1
 8001130:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113a:	f107 030c 	add.w	r3, r7, #12
 800113e:	4619      	mov	r1, r3
 8001140:	480f      	ldr	r0, [pc, #60]	; (8001180 <MX_GPIO_Init+0xd4>)
 8001142:	f001 fa23 	bl	800258c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800114a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800114c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001150:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	4619      	mov	r1, r3
 800115c:	4809      	ldr	r0, [pc, #36]	; (8001184 <MX_GPIO_Init+0xd8>)
 800115e:	f001 fa15 	bl	800258c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2105      	movs	r1, #5
 8001166:	2028      	movs	r0, #40	; 0x28
 8001168:	f001 f9d9 	bl	800251e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800116c:	2028      	movs	r0, #40	; 0x28
 800116e:	f001 f9f2 	bl	8002556 <HAL_NVIC_EnableIRQ>

}
 8001172:	bf00      	nop
 8001174:	3720      	adds	r7, #32
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800
 8001180:	40020000 	.word	0x40020000
 8001184:	40020400 	.word	0x40020400

08001188 <addQueueFrame>:

/* USER CODE BEGIN 4 */
void addQueueFrame(item_t *Item)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
    if (Item->cntrElem < Item->maxItemNum)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800119c:	429a      	cmp	r2, r3
 800119e:	da25      	bge.n	80011ec <addQueueFrame+0x64>
    {
        queue *buf = (queue *)malloc(sizeof(queue));
 80011a0:	2008      	movs	r0, #8
 80011a2:	f006 f937 	bl	8007414 <malloc>
 80011a6:	4603      	mov	r3, r0
 80011a8:	60fb      	str	r3, [r7, #12]
        if(buf) {
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d01d      	beq.n	80011ec <addQueueFrame+0x64>
        	Item->endPtr = (Item->endPtr == NULL)  ?  (Item->startPtr = buf)  :  (queue *)(Item->endPtr->nextElem = (struct queue *)buf);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d105      	bne.n	80011c4 <addQueueFrame+0x3c>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	e004      	b.n	80011ce <addQueueFrame+0x46>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	6053      	str	r3, [r2, #4]
        	Item->endPtr->nextElem = NULL;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	605a      	str	r2, [r3, #4]
        	Item->cntrElem++;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	3301      	adds	r3, #1
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	b25a      	sxtb	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	721a      	strb	r2, [r3, #8]
        }
    }
}
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <delQueueFrame>:

void delQueueFrame(item_t *Item)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
    if (Item->cntrElem > 0 && Item->startPtr != NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001202:	2b00      	cmp	r3, #0
 8001204:	dd23      	ble.n	800124e <delQueueFrame+0x5a>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d01f      	beq.n	800124e <delQueueFrame+0x5a>
    {
        queue *buf = Item->startPtr;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	60fb      	str	r3, [r7, #12]
        Item->startPtr = (queue *)Item->startPtr->nextElem;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	685a      	ldr	r2, [r3, #4]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	601a      	str	r2, [r3, #0]
        free(buf);
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f006 f900 	bl	8007424 <free>
        if (--(Item->cntrElem) == 0)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800122a:	b2db      	uxtb	r3, r3
 800122c:	3b01      	subs	r3, #1
 800122e:	b2db      	uxtb	r3, r3
 8001230:	b25a      	sxtb	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	721a      	strb	r2, [r3, #8]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d106      	bne.n	800124e <delQueueFrame+0x5a>
            Item->endPtr = Item->startPtr = NULL;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	605a      	str	r2, [r3, #4]
    }
}
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <protagonistDraw>:

void protagonistDraw()
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af02      	add	r7, sp, #8
	if(POSITION(adc_value) != POSITION(adc_prev_value)) {					// motionless protagonist figure flicker reduction
 800125e:	4b49      	ldr	r3, [pc, #292]	; (8001384 <protagonistDraw+0x12c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001266:	228c      	movs	r2, #140	; 0x8c
 8001268:	fb03 f202 	mul.w	r2, r3, r2
 800126c:	4b46      	ldr	r3, [pc, #280]	; (8001388 <protagonistDraw+0x130>)
 800126e:	fba3 1302 	umull	r1, r3, r3, r2
 8001272:	1ad2      	subs	r2, r2, r3
 8001274:	0852      	lsrs	r2, r2, #1
 8001276:	4413      	add	r3, r2
 8001278:	0ada      	lsrs	r2, r3, #11
 800127a:	4b44      	ldr	r3, [pc, #272]	; (800138c <protagonistDraw+0x134>)
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001282:	218c      	movs	r1, #140	; 0x8c
 8001284:	fb01 f303 	mul.w	r3, r1, r3
 8001288:	4941      	ldr	r1, [pc, #260]	; (8001390 <protagonistDraw+0x138>)
 800128a:	fb81 0103 	smull	r0, r1, r1, r3
 800128e:	4419      	add	r1, r3
 8001290:	12c9      	asrs	r1, r1, #11
 8001292:	17db      	asrs	r3, r3, #31
 8001294:	1acb      	subs	r3, r1, r3
 8001296:	429a      	cmp	r2, r3
 8001298:	d071      	beq.n	800137e <protagonistDraw+0x126>
			osMutexAcquire(MTX1Handle, osWaitForever);
 800129a:	4b3e      	ldr	r3, [pc, #248]	; (8001394 <protagonistDraw+0x13c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f04f 31ff 	mov.w	r1, #4294967295
 80012a2:	4618      	mov	r0, r3
 80012a4:	f002 ff65 	bl	8004172 <osMutexAcquire>
			lcd_fill_rect( 3, POSITION(adc_prev_value), 14, 20, ST7735_BLACK);
 80012a8:	4b38      	ldr	r3, [pc, #224]	; (800138c <protagonistDraw+0x134>)
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012b0:	228c      	movs	r2, #140	; 0x8c
 80012b2:	fb02 f303 	mul.w	r3, r2, r3
 80012b6:	4a36      	ldr	r2, [pc, #216]	; (8001390 <protagonistDraw+0x138>)
 80012b8:	fb82 1203 	smull	r1, r2, r2, r3
 80012bc:	441a      	add	r2, r3
 80012be:	12d2      	asrs	r2, r2, #11
 80012c0:	17db      	asrs	r3, r3, #31
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	b219      	sxth	r1, r3
 80012c6:	2300      	movs	r3, #0
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2314      	movs	r3, #20
 80012cc:	220e      	movs	r2, #14
 80012ce:	2003      	movs	r0, #3
 80012d0:	f7ff fb8a 	bl	80009e8 <lcd_fill_rect>
			lcd_fill_rect( 3, POSITION(adc_value),       5, 20, ST7735_CYAN);
 80012d4:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <protagonistDraw+0x12c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012dc:	228c      	movs	r2, #140	; 0x8c
 80012de:	fb03 f202 	mul.w	r2, r3, r2
 80012e2:	4b29      	ldr	r3, [pc, #164]	; (8001388 <protagonistDraw+0x130>)
 80012e4:	fba3 1302 	umull	r1, r3, r3, r2
 80012e8:	1ad2      	subs	r2, r2, r3
 80012ea:	0852      	lsrs	r2, r2, #1
 80012ec:	4413      	add	r3, r2
 80012ee:	0adb      	lsrs	r3, r3, #11
 80012f0:	b219      	sxth	r1, r3
 80012f2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2314      	movs	r3, #20
 80012fa:	2205      	movs	r2, #5
 80012fc:	2003      	movs	r0, #3
 80012fe:	f7ff fb73 	bl	80009e8 <lcd_fill_rect>
			lcd_fill_rect( 8, POSITION(adc_value) + 5,   3, 10, ST7735_CYAN);
 8001302:	4b20      	ldr	r3, [pc, #128]	; (8001384 <protagonistDraw+0x12c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800130a:	228c      	movs	r2, #140	; 0x8c
 800130c:	fb03 f202 	mul.w	r2, r3, r2
 8001310:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <protagonistDraw+0x130>)
 8001312:	fba3 1302 	umull	r1, r3, r3, r2
 8001316:	1ad2      	subs	r2, r2, r3
 8001318:	0852      	lsrs	r2, r2, #1
 800131a:	4413      	add	r3, r2
 800131c:	0adb      	lsrs	r3, r3, #11
 800131e:	b29b      	uxth	r3, r3
 8001320:	3305      	adds	r3, #5
 8001322:	b29b      	uxth	r3, r3
 8001324:	b219      	sxth	r1, r3
 8001326:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	230a      	movs	r3, #10
 800132e:	2203      	movs	r2, #3
 8001330:	2008      	movs	r0, #8
 8001332:	f7ff fb59 	bl	80009e8 <lcd_fill_rect>
			lcd_fill_rect(11, POSITION(adc_value) + 8,   3,  4, ST7735_CYAN);
 8001336:	4b13      	ldr	r3, [pc, #76]	; (8001384 <protagonistDraw+0x12c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800133e:	228c      	movs	r2, #140	; 0x8c
 8001340:	fb03 f202 	mul.w	r2, r3, r2
 8001344:	4b10      	ldr	r3, [pc, #64]	; (8001388 <protagonistDraw+0x130>)
 8001346:	fba3 1302 	umull	r1, r3, r3, r2
 800134a:	1ad2      	subs	r2, r2, r3
 800134c:	0852      	lsrs	r2, r2, #1
 800134e:	4413      	add	r3, r2
 8001350:	0adb      	lsrs	r3, r3, #11
 8001352:	b29b      	uxth	r3, r3
 8001354:	3308      	adds	r3, #8
 8001356:	b29b      	uxth	r3, r3
 8001358:	b219      	sxth	r1, r3
 800135a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	2304      	movs	r3, #4
 8001362:	2203      	movs	r2, #3
 8001364:	200b      	movs	r0, #11
 8001366:	f7ff fb3f 	bl	80009e8 <lcd_fill_rect>
			adc_prev_value = adc_value;
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <protagonistDraw+0x12c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	b29a      	uxth	r2, r3
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <protagonistDraw+0x134>)
 8001372:	801a      	strh	r2, [r3, #0]
			osMutexRelease(MTX1Handle);
 8001374:	4b07      	ldr	r3, [pc, #28]	; (8001394 <protagonistDraw+0x13c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f002 ff45 	bl	8004208 <osMutexRelease>
	}
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	200001a8 	.word	0x200001a8
 8001388:	00100101 	.word	0x00100101
 800138c:	200001ac 	.word	0x200001ac
 8001390:	80080081 	.word	0x80080081
 8001394:	2000018c 	.word	0x2000018c

08001398 <bulletDraw>:

void bulletDraw()
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af02      	add	r7, sp, #8
	for(queue *buffer = bullets.startPtr; buffer != NULL; buffer = (queue*)(buffer->nextElem)) {
 800139e:	4b20      	ldr	r3, [pc, #128]	; (8001420 <bulletDraw+0x88>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	e034      	b.n	8001410 <bulletDraw+0x78>
		if((buffer->x + 5) < 127) {
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b79      	cmp	r3, #121	; 0x79
 80013ac:	d81d      	bhi.n	80013ea <bulletDraw+0x52>
			lcd_fill_rect(buffer->x++, buffer->y, 5, 2, ST7735_BLACK);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	1c5a      	adds	r2, r3, #1
 80013b4:	b2d1      	uxtb	r1, r2
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	7011      	strb	r1, [r2, #0]
 80013ba:	b218      	sxth	r0, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	785b      	ldrb	r3, [r3, #1]
 80013c0:	b219      	sxth	r1, r3
 80013c2:	2300      	movs	r3, #0
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	2302      	movs	r3, #2
 80013c8:	2205      	movs	r2, #5
 80013ca:	f7ff fb0d 	bl	80009e8 <lcd_fill_rect>
			lcd_fill_rect(buffer->x,   buffer->y, 5, 2, ST7735_GREEN);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	b218      	sxth	r0, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	785b      	ldrb	r3, [r3, #1]
 80013d8:	b219      	sxth	r1, r3
 80013da:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	2302      	movs	r3, #2
 80013e2:	2205      	movs	r2, #5
 80013e4:	f7ff fb00 	bl	80009e8 <lcd_fill_rect>
 80013e8:	e00f      	b.n	800140a <bulletDraw+0x72>
		} else {
			lcd_fill_rect(buffer->x, buffer->y, 5, 2, ST7735_BLACK);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	b218      	sxth	r0, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	785b      	ldrb	r3, [r3, #1]
 80013f4:	b219      	sxth	r1, r3
 80013f6:	2300      	movs	r3, #0
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	2302      	movs	r3, #2
 80013fc:	2205      	movs	r2, #5
 80013fe:	f7ff faf3 	bl	80009e8 <lcd_fill_rect>
			delQueueFrame(&bullets);
 8001402:	4807      	ldr	r0, [pc, #28]	; (8001420 <bulletDraw+0x88>)
 8001404:	f7ff fef6 	bl	80011f4 <delQueueFrame>
			break;
 8001408:	e006      	b.n	8001418 <bulletDraw+0x80>
	for(queue *buffer = bullets.startPtr; buffer != NULL; buffer = (queue*)(buffer->nextElem)) {
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1c7      	bne.n	80013a6 <bulletDraw+0xe>
		}
	}
}
 8001416:	bf00      	nop
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000190 	.word	0x20000190

08001424 <mobDraw>:

void mobDraw()
{
 8001424:	b590      	push	{r4, r7, lr}
 8001426:	b085      	sub	sp, #20
 8001428:	af02      	add	r7, sp, #8
	//static uint8_t movDir = 1;
	for(queue *buffer = mobs.startPtr; buffer != NULL; buffer = (queue*)(buffer->nextElem)) {
 800142a:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <mobDraw+0xb0>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	e047      	b.n	80014c2 <mobDraw+0x9e>
		lcd_line(buffer->x - 5, buffer->y - 5, buffer->x + 5, buffer->y + 5, ST7735_RED);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	b29b      	uxth	r3, r3
 8001438:	3b05      	subs	r3, #5
 800143a:	b29b      	uxth	r3, r3
 800143c:	b218      	sxth	r0, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	785b      	ldrb	r3, [r3, #1]
 8001442:	b29b      	uxth	r3, r3
 8001444:	3b05      	subs	r3, #5
 8001446:	b29b      	uxth	r3, r3
 8001448:	b219      	sxth	r1, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	b29b      	uxth	r3, r3
 8001450:	3305      	adds	r3, #5
 8001452:	b29b      	uxth	r3, r3
 8001454:	b21a      	sxth	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	785b      	ldrb	r3, [r3, #1]
 800145a:	b29b      	uxth	r3, r3
 800145c:	3305      	adds	r3, #5
 800145e:	b29b      	uxth	r3, r3
 8001460:	b21b      	sxth	r3, r3
 8001462:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8001466:	9400      	str	r4, [sp, #0]
 8001468:	f7ff fb3e 	bl	8000ae8 <lcd_line>
		lcd_line(buffer->x + 5, buffer->y - 5, buffer->x - 5, buffer->y + 5, ST7735_RED);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	b29b      	uxth	r3, r3
 8001472:	3305      	adds	r3, #5
 8001474:	b29b      	uxth	r3, r3
 8001476:	b218      	sxth	r0, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	785b      	ldrb	r3, [r3, #1]
 800147c:	b29b      	uxth	r3, r3
 800147e:	3b05      	subs	r3, #5
 8001480:	b29b      	uxth	r3, r3
 8001482:	b219      	sxth	r1, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	b29b      	uxth	r3, r3
 800148a:	3b05      	subs	r3, #5
 800148c:	b29b      	uxth	r3, r3
 800148e:	b21a      	sxth	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	785b      	ldrb	r3, [r3, #1]
 8001494:	b29b      	uxth	r3, r3
 8001496:	3305      	adds	r3, #5
 8001498:	b29b      	uxth	r3, r3
 800149a:	b21b      	sxth	r3, r3
 800149c:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80014a0:	9400      	str	r4, [sp, #0]
 80014a2:	f7ff fb21 	bl	8000ae8 <lcd_line>
		lcd_fill_circle(buffer->x, buffer->y, 5, ST7735_RED);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	b218      	sxth	r0, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	785b      	ldrb	r3, [r3, #1]
 80014b0:	b219      	sxth	r1, r3
 80014b2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80014b6:	2205      	movs	r2, #5
 80014b8:	f7ff fbb8 	bl	8000c2c <lcd_fill_circle>
	for(queue *buffer = mobs.startPtr; buffer != NULL; buffer = (queue*)(buffer->nextElem)) {
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1b4      	bne.n	8001432 <mobDraw+0xe>
	}
}
 80014c8:	bf00      	nop
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd90      	pop	{r4, r7, pc}
 80014d2:	bf00      	nop
 80014d4:	2000019c 	.word	0x2000019c

080014d8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	80fb      	strh	r3, [r7, #6]
	addQueueFrame(&bullets);
 80014e2:	4811      	ldr	r0, [pc, #68]	; (8001528 <HAL_GPIO_EXTI_Callback+0x50>)
 80014e4:	f7ff fe50 	bl	8001188 <addQueueFrame>
	if(bullets.endPtr != NULL) {
 80014e8:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <HAL_GPIO_EXTI_Callback+0x50>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d017      	beq.n	8001520 <HAL_GPIO_EXTI_Callback+0x48>
		bullets.endPtr->x = 14;
 80014f0:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <HAL_GPIO_EXTI_Callback+0x50>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	220e      	movs	r2, #14
 80014f6:	701a      	strb	r2, [r3, #0]
		bullets.endPtr->y = POSITION(adc_prev_value) + 9;		// !
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <HAL_GPIO_EXTI_Callback+0x54>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001500:	228c      	movs	r2, #140	; 0x8c
 8001502:	fb02 f303 	mul.w	r3, r2, r3
 8001506:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <HAL_GPIO_EXTI_Callback+0x58>)
 8001508:	fb82 1203 	smull	r1, r2, r2, r3
 800150c:	441a      	add	r2, r3
 800150e:	12d2      	asrs	r2, r2, #11
 8001510:	17db      	asrs	r3, r3, #31
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	b2da      	uxtb	r2, r3
 8001516:	4b04      	ldr	r3, [pc, #16]	; (8001528 <HAL_GPIO_EXTI_Callback+0x50>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	3209      	adds	r2, #9
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	705a      	strb	r2, [r3, #1]
	}
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000190 	.word	0x20000190
 800152c:	200001ac 	.word	0x200001ac
 8001530:	80080081 	.word	0x80080081

08001534 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	if(htim != &htim9)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a28      	ldr	r2, [pc, #160]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d148      	bne.n	80015d6 <HAL_TIM_PeriodElapsedCallback+0xa2>
			return;
	addQueueFrame(&mobs);
 8001544:	4827      	ldr	r0, [pc, #156]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001546:	f7ff fe1f 	bl	8001188 <addQueueFrame>
	if(mobs.endPtr != NULL) {
 800154a:	4b26      	ldr	r3, [pc, #152]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d016      	beq.n	8001580 <HAL_TIM_PeriodElapsedCallback+0x4c>
		mobs.endPtr->x = 117;				// x,y - mob`s center coordinates
 8001552:	4b24      	ldr	r3, [pc, #144]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2275      	movs	r2, #117	; 0x75
 8001558:	701a      	strb	r2, [r3, #0]
		mobs.endPtr->y = rand() % 154 + 5;
 800155a:	f006 f88f 	bl	800767c <rand>
 800155e:	4603      	mov	r3, r0
 8001560:	4a21      	ldr	r2, [pc, #132]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001562:	fb82 1203 	smull	r1, r2, r2, r3
 8001566:	1151      	asrs	r1, r2, #5
 8001568:	17da      	asrs	r2, r3, #31
 800156a:	1a8a      	subs	r2, r1, r2
 800156c:	219a      	movs	r1, #154	; 0x9a
 800156e:	fb01 f202 	mul.w	r2, r1, r2
 8001572:	1a9a      	subs	r2, r3, r2
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	3205      	adds	r2, #5
 800157c:	b2d2      	uxtb	r2, r2
 800157e:	705a      	strb	r2, [r3, #1]
	}
	__HAL_TIM_SET_AUTORELOAD(&htim9, rand() % 8000 + 2000);
 8001580:	f006 f87c 	bl	800767c <rand>
 8001584:	4602      	mov	r2, r0
 8001586:	4b19      	ldr	r3, [pc, #100]	; (80015ec <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001588:	fb83 1302 	smull	r1, r3, r3, r2
 800158c:	1259      	asrs	r1, r3, #9
 800158e:	17d3      	asrs	r3, r2, #31
 8001590:	1acb      	subs	r3, r1, r3
 8001592:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001596:	fb01 f303 	mul.w	r3, r1, r3
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80015a6:	f006 f869 	bl	800767c <rand>
 80015aa:	4602      	mov	r2, r0
 80015ac:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80015ae:	fb83 1302 	smull	r1, r3, r3, r2
 80015b2:	1259      	asrs	r1, r3, #9
 80015b4:	17d3      	asrs	r3, r2, #31
 80015b6:	1acb      	subs	r3, r1, r3
 80015b8:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80015bc:	fb01 f303 	mul.w	r3, r1, r3
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80015c6:	461a      	mov	r2, r3
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80015ca:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COUNTER(&htim9, 0);
 80015cc:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2200      	movs	r2, #0
 80015d2:	625a      	str	r2, [r3, #36]	; 0x24
 80015d4:	e000      	b.n	80015d8 <HAL_TIM_PeriodElapsedCallback+0xa4>
			return;
 80015d6:	bf00      	nop
}
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	2000013c 	.word	0x2000013c
 80015e4:	2000019c 	.word	0x2000019c
 80015e8:	3531dec1 	.word	0x3531dec1
 80015ec:	10624dd3 	.word	0x10624dd3

080015f0 <StartDraw>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDraw */
void StartDraw(void *argument)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	if(lcd_init())
 80015f8:	f7ff f892 	bl	8000720 <lcd_init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d000      	beq.n	8001604 <StartDraw+0x14>
	  while(1){}
 8001602:	e7fe      	b.n	8001602 <StartDraw+0x12>
	lcd_fill(ST7735_BLACK);
 8001604:	2000      	movs	r0, #0
 8001606:	f7ff fa55 	bl	8000ab4 <lcd_fill>
	adc_value = 2048;
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <StartDraw+0x48>)
 800160c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001610:	601a      	str	r2, [r3, #0]
	adc_prev_value = adc_value + 1024;		// adc_prev_value != adc_prev_value at first
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <StartDraw+0x48>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	b29b      	uxth	r3, r3
 8001618:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800161c:	b29a      	uxth	r2, r3
 800161e:	4b07      	ldr	r3, [pc, #28]	; (800163c <StartDraw+0x4c>)
 8001620:	801a      	strh	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	protagonistDraw();
 8001622:	f7ff fe19 	bl	8001258 <protagonistDraw>
	bulletDraw();
 8001626:	f7ff feb7 	bl	8001398 <bulletDraw>
	mobDraw();
 800162a:	f7ff fefb 	bl	8001424 <mobDraw>

    osDelay(FPS_TO_TICKS(60));
 800162e:	2010      	movs	r0, #16
 8001630:	f002 fcfe 	bl	8004030 <osDelay>
	protagonistDraw();
 8001634:	e7f5      	b.n	8001622 <StartDraw+0x32>
 8001636:	bf00      	nop
 8001638:	200001a8 	.word	0x200001a8
 800163c:	200001ac 	.word	0x200001ac

08001640 <StartControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControl */
void StartControl(void *argument)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControl */
  /* Infinite loop */
  for(;;)
  {
	HAL_ADC_Start_IT(&hadc1);
 8001648:	480e      	ldr	r0, [pc, #56]	; (8001684 <StartControl+0x44>)
 800164a:	f000 fba3 	bl	8001d94 <HAL_ADC_Start_IT>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800164e:	f04f 31ff 	mov.w	r1, #4294967295
 8001652:	480c      	ldr	r0, [pc, #48]	; (8001684 <StartControl+0x44>)
 8001654:	f000 fb13 	bl	8001c7e <HAL_ADC_PollForConversion>

	osMutexAcquire(MTX1Handle, osWaitForever);
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <StartControl+0x48>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f04f 31ff 	mov.w	r1, #4294967295
 8001660:	4618      	mov	r0, r3
 8001662:	f002 fd86 	bl	8004172 <osMutexAcquire>
	adc_value = HAL_ADC_GetValue(&hadc1);
 8001666:	4807      	ldr	r0, [pc, #28]	; (8001684 <StartControl+0x44>)
 8001668:	f000 fc52 	bl	8001f10 <HAL_ADC_GetValue>
 800166c:	4603      	mov	r3, r0
 800166e:	4a07      	ldr	r2, [pc, #28]	; (800168c <StartControl+0x4c>)
 8001670:	6013      	str	r3, [r2, #0]
	osMutexRelease(MTX1Handle);
 8001672:	4b05      	ldr	r3, [pc, #20]	; (8001688 <StartControl+0x48>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f002 fdc6 	bl	8004208 <osMutexRelease>

    osDelay(FPS_TO_TICKS(60));
 800167c:	2010      	movs	r0, #16
 800167e:	f002 fcd7 	bl	8004030 <osDelay>
	HAL_ADC_Start_IT(&hadc1);
 8001682:	e7e1      	b.n	8001648 <StartControl+0x8>
 8001684:	2000009c 	.word	0x2000009c
 8001688:	2000018c 	.word	0x2000018c
 800168c:	200001a8 	.word	0x200001a8

08001690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001694:	b672      	cpsid	i
}
 8001696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001698:	e7fe      	b.n	8001698 <Error_Handler+0x8>
	...

0800169c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <HAL_MspInit+0x54>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	4a11      	ldr	r2, [pc, #68]	; (80016f0 <HAL_MspInit+0x54>)
 80016ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b0:	6453      	str	r3, [r2, #68]	; 0x44
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <HAL_MspInit+0x54>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	603b      	str	r3, [r7, #0]
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_MspInit+0x54>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <HAL_MspInit+0x54>)
 80016c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016cc:	6413      	str	r3, [r2, #64]	; 0x40
 80016ce:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <HAL_MspInit+0x54>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	210f      	movs	r1, #15
 80016de:	f06f 0001 	mvn.w	r0, #1
 80016e2:	f000 ff1c 	bl	800251e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800

080016f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	; 0x28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a17      	ldr	r2, [pc, #92]	; (8001770 <HAL_ADC_MspInit+0x7c>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d127      	bne.n	8001766 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	4b16      	ldr	r3, [pc, #88]	; (8001774 <HAL_ADC_MspInit+0x80>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	4a15      	ldr	r2, [pc, #84]	; (8001774 <HAL_ADC_MspInit+0x80>)
 8001720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001724:	6453      	str	r3, [r2, #68]	; 0x44
 8001726:	4b13      	ldr	r3, [pc, #76]	; (8001774 <HAL_ADC_MspInit+0x80>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <HAL_ADC_MspInit+0x80>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a0e      	ldr	r2, [pc, #56]	; (8001774 <HAL_ADC_MspInit+0x80>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <HAL_ADC_MspInit+0x80>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = CONTROL_POT_Pin;
 800174e:	2301      	movs	r3, #1
 8001750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001752:	2303      	movs	r3, #3
 8001754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CONTROL_POT_GPIO_Port, &GPIO_InitStruct);
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	4805      	ldr	r0, [pc, #20]	; (8001778 <HAL_ADC_MspInit+0x84>)
 8001762:	f000 ff13 	bl	800258c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001766:	bf00      	nop
 8001768:	3728      	adds	r7, #40	; 0x28
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40012000 	.word	0x40012000
 8001774:	40023800 	.word	0x40023800
 8001778:	40020000 	.word	0x40020000

0800177c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08a      	sub	sp, #40	; 0x28
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a19      	ldr	r2, [pc, #100]	; (8001800 <HAL_SPI_MspInit+0x84>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d12b      	bne.n	80017f6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	4b18      	ldr	r3, [pc, #96]	; (8001804 <HAL_SPI_MspInit+0x88>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	4a17      	ldr	r2, [pc, #92]	; (8001804 <HAL_SPI_MspInit+0x88>)
 80017a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017ac:	6453      	str	r3, [r2, #68]	; 0x44
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <HAL_SPI_MspInit+0x88>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <HAL_SPI_MspInit+0x88>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a10      	ldr	r2, [pc, #64]	; (8001804 <HAL_SPI_MspInit+0x88>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <HAL_SPI_MspInit+0x88>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_SDA_Pin;
 80017d6:	23a0      	movs	r3, #160	; 0xa0
 80017d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e2:	2303      	movs	r3, #3
 80017e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017e6:	2305      	movs	r3, #5
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	4619      	mov	r1, r3
 80017f0:	4805      	ldr	r0, [pc, #20]	; (8001808 <HAL_SPI_MspInit+0x8c>)
 80017f2:	f000 fecb 	bl	800258c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017f6:	bf00      	nop
 80017f8:	3728      	adds	r7, #40	; 0x28
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40013000 	.word	0x40013000
 8001804:	40023800 	.word	0x40023800
 8001808:	40020000 	.word	0x40020000

0800180c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0e      	ldr	r2, [pc, #56]	; (8001854 <HAL_TIM_Base_MspInit+0x48>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d115      	bne.n	800184a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <HAL_TIM_Base_MspInit+0x4c>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	4a0c      	ldr	r2, [pc, #48]	; (8001858 <HAL_TIM_Base_MspInit+0x4c>)
 8001828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800182c:	6453      	str	r3, [r2, #68]	; 0x44
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_TIM_Base_MspInit+0x4c>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2105      	movs	r1, #5
 800183e:	2018      	movs	r0, #24
 8001840:	f000 fe6d 	bl	800251e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001844:	2018      	movs	r0, #24
 8001846:	f000 fe86 	bl	8002556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800184a:	bf00      	nop
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40014000 	.word	0x40014000
 8001858:	40023800 	.word	0x40023800

0800185c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001860:	e7fe      	b.n	8001860 <NMI_Handler+0x4>

08001862 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001866:	e7fe      	b.n	8001866 <HardFault_Handler+0x4>

08001868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800186c:	e7fe      	b.n	800186c <MemManage_Handler+0x4>

0800186e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001872:	e7fe      	b.n	8001872 <BusFault_Handler+0x4>

08001874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001878:	e7fe      	b.n	8001878 <UsageFault_Handler+0x4>

0800187a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800188c:	f000 f970 	bl	8001b70 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001890:	f004 fb38 	bl	8005f04 <xTaskGetSchedulerState>
 8001894:	4603      	mov	r3, r0
 8001896:	2b01      	cmp	r3, #1
 8001898:	d001      	beq.n	800189e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800189a:	f005 fa1d 	bl	8006cd8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80018aa:	f001 ff8b 	bl	80037c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	2000013c 	.word	0x2000013c

080018b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80018bc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80018c0:	f001 f802 	bl	80028c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
	return 1;
 80018cc:	2301      	movs	r3, #1
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <_kill>:

int _kill(int pid, int sig)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018e2:	f005 fc73 	bl	80071cc <__errno>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2216      	movs	r2, #22
 80018ea:	601a      	str	r2, [r3, #0]
	return -1;
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <_exit>:

void _exit (int status)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001900:	f04f 31ff 	mov.w	r1, #4294967295
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ffe7 	bl	80018d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800190a:	e7fe      	b.n	800190a <_exit+0x12>

0800190c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	e00a      	b.n	8001934 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800191e:	f3af 8000 	nop.w
 8001922:	4601      	mov	r1, r0
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	1c5a      	adds	r2, r3, #1
 8001928:	60ba      	str	r2, [r7, #8]
 800192a:	b2ca      	uxtb	r2, r1
 800192c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	3301      	adds	r3, #1
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	429a      	cmp	r2, r3
 800193a:	dbf0      	blt.n	800191e <_read+0x12>
	}

return len;
 800193c:	687b      	ldr	r3, [r7, #4]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	60f8      	str	r0, [r7, #12]
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	e009      	b.n	800196c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	60ba      	str	r2, [r7, #8]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	3301      	adds	r3, #1
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	429a      	cmp	r2, r3
 8001972:	dbf1      	blt.n	8001958 <_write+0x12>
	}
	return len;
 8001974:	687b      	ldr	r3, [r7, #4]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <_close>:

int _close(int file)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
	return -1;
 8001986:	f04f 33ff 	mov.w	r3, #4294967295
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019a6:	605a      	str	r2, [r3, #4]
	return 0;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <_isatty>:

int _isatty(int file)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
	return 1;
 80019be:	2301      	movs	r3, #1
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
	return 0;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f0:	4a14      	ldr	r2, [pc, #80]	; (8001a44 <_sbrk+0x5c>)
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <_sbrk+0x60>)
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019fc:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <_sbrk+0x64>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d102      	bne.n	8001a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <_sbrk+0x64>)
 8001a06:	4a12      	ldr	r2, [pc, #72]	; (8001a50 <_sbrk+0x68>)
 8001a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <_sbrk+0x64>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d207      	bcs.n	8001a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a18:	f005 fbd8 	bl	80071cc <__errno>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	220c      	movs	r2, #12
 8001a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295
 8001a26:	e009      	b.n	8001a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <_sbrk+0x64>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a2e:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <_sbrk+0x64>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	4a05      	ldr	r2, [pc, #20]	; (8001a4c <_sbrk+0x64>)
 8001a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20010000 	.word	0x20010000
 8001a48:	00000400 	.word	0x00000400
 8001a4c:	200001b0 	.word	0x200001b0
 8001a50:	20004bd8 	.word	0x20004bd8

08001a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <SystemInit+0x20>)
 8001a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a5e:	4a05      	ldr	r2, [pc, #20]	; (8001a74 <SystemInit+0x20>)
 8001a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ab0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a7c:	480d      	ldr	r0, [pc, #52]	; (8001ab4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a7e:	490e      	ldr	r1, [pc, #56]	; (8001ab8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a80:	4a0e      	ldr	r2, [pc, #56]	; (8001abc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a84:	e002      	b.n	8001a8c <LoopCopyDataInit>

08001a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a8a:	3304      	adds	r3, #4

08001a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a90:	d3f9      	bcc.n	8001a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a92:	4a0b      	ldr	r2, [pc, #44]	; (8001ac0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a94:	4c0b      	ldr	r4, [pc, #44]	; (8001ac4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a98:	e001      	b.n	8001a9e <LoopFillZerobss>

08001a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a9c:	3204      	adds	r2, #4

08001a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa0:	d3fb      	bcc.n	8001a9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001aa2:	f7ff ffd7 	bl	8001a54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aa6:	f005 fc8d 	bl	80073c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aaa:	f7ff f96f 	bl	8000d8c <main>
  bx  lr    
 8001aae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ab0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ab8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001abc:	080086e0 	.word	0x080086e0
  ldr r2, =_sbss
 8001ac0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001ac4:	20004bd8 	.word	0x20004bd8

08001ac8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ac8:	e7fe      	b.n	8001ac8 <ADC_IRQHandler>
	...

08001acc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ad0:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <HAL_Init+0x40>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a0d      	ldr	r2, [pc, #52]	; (8001b0c <HAL_Init+0x40>)
 8001ad6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ada:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_Init+0x40>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <HAL_Init+0x40>)
 8001ae2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ae6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ae8:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <HAL_Init+0x40>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a07      	ldr	r2, [pc, #28]	; (8001b0c <HAL_Init+0x40>)
 8001aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af4:	2003      	movs	r0, #3
 8001af6:	f000 fd07 	bl	8002508 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001afa:	200f      	movs	r0, #15
 8001afc:	f000 f808 	bl	8001b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b00:	f7ff fdcc 	bl	800169c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023c00 	.word	0x40023c00

08001b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b18:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_InitTick+0x54>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_InitTick+0x58>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	4619      	mov	r1, r3
 8001b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 fd1f 	bl	8002572 <HAL_SYSTICK_Config>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e00e      	b.n	8001b5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b0f      	cmp	r3, #15
 8001b42:	d80a      	bhi.n	8001b5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b44:	2200      	movs	r2, #0
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	f04f 30ff 	mov.w	r0, #4294967295
 8001b4c:	f000 fce7 	bl	800251e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b50:	4a06      	ldr	r2, [pc, #24]	; (8001b6c <HAL_InitTick+0x5c>)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
 8001b58:	e000      	b.n	8001b5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000000 	.word	0x20000000
 8001b68:	20000008 	.word	0x20000008
 8001b6c:	20000004 	.word	0x20000004

08001b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_IncTick+0x20>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_IncTick+0x24>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4413      	add	r3, r2
 8001b80:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <HAL_IncTick+0x24>)
 8001b82:	6013      	str	r3, [r2, #0]
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	20000008 	.word	0x20000008
 8001b94:	200001b4 	.word	0x200001b4

08001b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <HAL_GetTick+0x14>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	200001b4 	.word	0x200001b4

08001bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb8:	f7ff ffee 	bl	8001b98 <HAL_GetTick>
 8001bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc8:	d005      	beq.n	8001bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <HAL_Delay+0x44>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bd6:	bf00      	nop
 8001bd8:	f7ff ffde 	bl	8001b98 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d8f7      	bhi.n	8001bd8 <HAL_Delay+0x28>
  {
  }
}
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000008 	.word	0x20000008

08001bf8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e033      	b.n	8001c76 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d109      	bne.n	8001c2a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff fd6c 	bl	80016f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f003 0310 	and.w	r3, r3, #16
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d118      	bne.n	8001c68 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c3e:	f023 0302 	bic.w	r3, r3, #2
 8001c42:	f043 0202 	orr.w	r2, r3, #2
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 fa90 	bl	8002170 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f023 0303 	bic.w	r3, r3, #3
 8001c5e:	f043 0201 	orr.w	r2, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	641a      	str	r2, [r3, #64]	; 0x40
 8001c66:	e001      	b.n	8001c6c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b084      	sub	sp, #16
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c9a:	d113      	bne.n	8001cc4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001caa:	d10b      	bne.n	8001cc4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	f043 0220 	orr.w	r2, r3, #32
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e063      	b.n	8001d8c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001cc4:	f7ff ff68 	bl	8001b98 <HAL_GetTick>
 8001cc8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cca:	e021      	b.n	8001d10 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd2:	d01d      	beq.n	8001d10 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d007      	beq.n	8001cea <HAL_ADC_PollForConversion+0x6c>
 8001cda:	f7ff ff5d 	bl	8001b98 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d212      	bcs.n	8001d10 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d00b      	beq.n	8001d10 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	f043 0204 	orr.w	r2, r3, #4
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e03d      	b.n	8001d8c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d1d6      	bne.n	8001ccc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f06f 0212 	mvn.w	r2, #18
 8001d26:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d123      	bne.n	8001d8a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d11f      	bne.n	8001d8a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d50:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d006      	beq.n	8001d66 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d111      	bne.n	8001d8a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d105      	bne.n	8001d8a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f043 0201 	orr.w	r2, r3, #1
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d101      	bne.n	8001dae <HAL_ADC_Start_IT+0x1a>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e0a1      	b.n	8001ef2 <HAL_ADC_Start_IT+0x15e>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d018      	beq.n	8001df6 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0201 	orr.w	r2, r2, #1
 8001dd2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001dd4:	4b4a      	ldr	r3, [pc, #296]	; (8001f00 <HAL_ADC_Start_IT+0x16c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a4a      	ldr	r2, [pc, #296]	; (8001f04 <HAL_ADC_Start_IT+0x170>)
 8001dda:	fba2 2303 	umull	r2, r3, r2, r3
 8001dde:	0c9a      	lsrs	r2, r3, #18
 8001de0:	4613      	mov	r3, r2
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	4413      	add	r3, r2
 8001de6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001de8:	e002      	b.n	8001df0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	3b01      	subs	r3, #1
 8001dee:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f9      	bne.n	8001dea <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d169      	bne.n	8001ed8 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e0c:	f023 0301 	bic.w	r3, r3, #1
 8001e10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d007      	beq.n	8001e36 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e2e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e42:	d106      	bne.n	8001e52 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e48:	f023 0206 	bic.w	r2, r3, #6
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	645a      	str	r2, [r3, #68]	; 0x44
 8001e50:	e002      	b.n	8001e58 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e60:	4b29      	ldr	r3, [pc, #164]	; (8001f08 <HAL_ADC_Start_IT+0x174>)
 8001e62:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e6c:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6812      	ldr	r2, [r2, #0]
 8001e78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e7c:	f043 0320 	orr.w	r3, r3, #32
 8001e80:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 031f 	and.w	r3, r3, #31
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10f      	bne.n	8001eae <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d129      	bne.n	8001ef0 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	e020      	b.n	8001ef0 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a16      	ldr	r2, [pc, #88]	; (8001f0c <HAL_ADC_Start_IT+0x178>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d11b      	bne.n	8001ef0 <HAL_ADC_Start_IT+0x15c>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d114      	bne.n	8001ef0 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	e00b      	b.n	8001ef0 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	f043 0210 	orr.w	r2, r3, #16
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee8:	f043 0201 	orr.w	r2, r3, #1
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	20000000 	.word	0x20000000
 8001f04:	431bde83 	.word	0x431bde83
 8001f08:	40012300 	.word	0x40012300
 8001f0c:	40012000 	.word	0x40012000

08001f10 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d101      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x1c>
 8001f44:	2302      	movs	r3, #2
 8001f46:	e105      	b.n	8002154 <HAL_ADC_ConfigChannel+0x228>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b09      	cmp	r3, #9
 8001f56:	d925      	bls.n	8001fa4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68d9      	ldr	r1, [r3, #12]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	461a      	mov	r2, r3
 8001f66:	4613      	mov	r3, r2
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	4413      	add	r3, r2
 8001f6c:	3b1e      	subs	r3, #30
 8001f6e:	2207      	movs	r2, #7
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43da      	mvns	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	400a      	ands	r2, r1
 8001f7c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68d9      	ldr	r1, [r3, #12]
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	4618      	mov	r0, r3
 8001f90:	4603      	mov	r3, r0
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4403      	add	r3, r0
 8001f96:	3b1e      	subs	r3, #30
 8001f98:	409a      	lsls	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	e022      	b.n	8001fea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6919      	ldr	r1, [r3, #16]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	4413      	add	r3, r2
 8001fb8:	2207      	movs	r2, #7
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43da      	mvns	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	400a      	ands	r2, r1
 8001fc6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6919      	ldr	r1, [r3, #16]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	4618      	mov	r0, r3
 8001fda:	4603      	mov	r3, r0
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	4403      	add	r3, r0
 8001fe0:	409a      	lsls	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b06      	cmp	r3, #6
 8001ff0:	d824      	bhi.n	800203c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	3b05      	subs	r3, #5
 8002004:	221f      	movs	r2, #31
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43da      	mvns	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	400a      	ands	r2, r1
 8002012:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	b29b      	uxth	r3, r3
 8002020:	4618      	mov	r0, r3
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	3b05      	subs	r3, #5
 800202e:	fa00 f203 	lsl.w	r2, r0, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	635a      	str	r2, [r3, #52]	; 0x34
 800203a:	e04c      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b0c      	cmp	r3, #12
 8002042:	d824      	bhi.n	800208e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	3b23      	subs	r3, #35	; 0x23
 8002056:	221f      	movs	r2, #31
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43da      	mvns	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	400a      	ands	r2, r1
 8002064:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	b29b      	uxth	r3, r3
 8002072:	4618      	mov	r0, r3
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	4613      	mov	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	3b23      	subs	r3, #35	; 0x23
 8002080:	fa00 f203 	lsl.w	r2, r0, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	631a      	str	r2, [r3, #48]	; 0x30
 800208c:	e023      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	3b41      	subs	r3, #65	; 0x41
 80020a0:	221f      	movs	r2, #31
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43da      	mvns	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	400a      	ands	r2, r1
 80020ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	4618      	mov	r0, r3
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	3b41      	subs	r3, #65	; 0x41
 80020ca:	fa00 f203 	lsl.w	r2, r0, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020d6:	4b22      	ldr	r3, [pc, #136]	; (8002160 <HAL_ADC_ConfigChannel+0x234>)
 80020d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a21      	ldr	r2, [pc, #132]	; (8002164 <HAL_ADC_ConfigChannel+0x238>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d109      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x1cc>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b12      	cmp	r3, #18
 80020ea:	d105      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a19      	ldr	r2, [pc, #100]	; (8002164 <HAL_ADC_ConfigChannel+0x238>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d123      	bne.n	800214a <HAL_ADC_ConfigChannel+0x21e>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2b10      	cmp	r3, #16
 8002108:	d003      	beq.n	8002112 <HAL_ADC_ConfigChannel+0x1e6>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2b11      	cmp	r3, #17
 8002110:	d11b      	bne.n	800214a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b10      	cmp	r3, #16
 8002124:	d111      	bne.n	800214a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <HAL_ADC_ConfigChannel+0x23c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a10      	ldr	r2, [pc, #64]	; (800216c <HAL_ADC_ConfigChannel+0x240>)
 800212c:	fba2 2303 	umull	r2, r3, r2, r3
 8002130:	0c9a      	lsrs	r2, r3, #18
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800213c:	e002      	b.n	8002144 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	3b01      	subs	r3, #1
 8002142:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f9      	bne.n	800213e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	40012300 	.word	0x40012300
 8002164:	40012000 	.word	0x40012000
 8002168:	20000000 	.word	0x20000000
 800216c:	431bde83 	.word	0x431bde83

08002170 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002178:	4b79      	ldr	r3, [pc, #484]	; (8002360 <ADC_Init+0x1f0>)
 800217a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	431a      	orrs	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6859      	ldr	r1, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	021a      	lsls	r2, r3, #8
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6859      	ldr	r1, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6899      	ldr	r1, [r3, #8]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002202:	4a58      	ldr	r2, [pc, #352]	; (8002364 <ADC_Init+0x1f4>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d022      	beq.n	800224e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002216:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6899      	ldr	r1, [r3, #8]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002238:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6899      	ldr	r1, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	e00f      	b.n	800226e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800225c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800226c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0202 	bic.w	r2, r2, #2
 800227c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6899      	ldr	r1, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	7e1b      	ldrb	r3, [r3, #24]
 8002288:	005a      	lsls	r2, r3, #1
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d01b      	beq.n	80022d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6859      	ldr	r1, [r3, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	3b01      	subs	r3, #1
 80022c8:	035a      	lsls	r2, r3, #13
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	e007      	b.n	80022e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	3b01      	subs	r3, #1
 8002300:	051a      	lsls	r2, r3, #20
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002318:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6899      	ldr	r1, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002326:	025a      	lsls	r2, r3, #9
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800233e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6899      	ldr	r1, [r3, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	029a      	lsls	r2, r3, #10
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	609a      	str	r2, [r3, #8]
}
 8002354:	bf00      	nop
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	40012300 	.word	0x40012300
 8002364:	0f000001 	.word	0x0f000001

08002368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002378:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <__NVIC_SetPriorityGrouping+0x44>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002384:	4013      	ands	r3, r2
 8002386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002390:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800239a:	4a04      	ldr	r2, [pc, #16]	; (80023ac <__NVIC_SetPriorityGrouping+0x44>)
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	60d3      	str	r3, [r2, #12]
}
 80023a0:	bf00      	nop
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b4:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <__NVIC_GetPriorityGrouping+0x18>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	0a1b      	lsrs	r3, r3, #8
 80023ba:	f003 0307 	and.w	r3, r3, #7
}
 80023be:	4618      	mov	r0, r3
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	db0b      	blt.n	80023f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	f003 021f 	and.w	r2, r3, #31
 80023e4:	4907      	ldr	r1, [pc, #28]	; (8002404 <__NVIC_EnableIRQ+0x38>)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	095b      	lsrs	r3, r3, #5
 80023ec:	2001      	movs	r0, #1
 80023ee:	fa00 f202 	lsl.w	r2, r0, r2
 80023f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	e000e100 	.word	0xe000e100

08002408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	6039      	str	r1, [r7, #0]
 8002412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002418:	2b00      	cmp	r3, #0
 800241a:	db0a      	blt.n	8002432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	b2da      	uxtb	r2, r3
 8002420:	490c      	ldr	r1, [pc, #48]	; (8002454 <__NVIC_SetPriority+0x4c>)
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	0112      	lsls	r2, r2, #4
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	440b      	add	r3, r1
 800242c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002430:	e00a      	b.n	8002448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	b2da      	uxtb	r2, r3
 8002436:	4908      	ldr	r1, [pc, #32]	; (8002458 <__NVIC_SetPriority+0x50>)
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	3b04      	subs	r3, #4
 8002440:	0112      	lsls	r2, r2, #4
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	440b      	add	r3, r1
 8002446:	761a      	strb	r2, [r3, #24]
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	e000e100 	.word	0xe000e100
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800245c:	b480      	push	{r7}
 800245e:	b089      	sub	sp, #36	; 0x24
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f1c3 0307 	rsb	r3, r3, #7
 8002476:	2b04      	cmp	r3, #4
 8002478:	bf28      	it	cs
 800247a:	2304      	movcs	r3, #4
 800247c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3304      	adds	r3, #4
 8002482:	2b06      	cmp	r3, #6
 8002484:	d902      	bls.n	800248c <NVIC_EncodePriority+0x30>
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	3b03      	subs	r3, #3
 800248a:	e000      	b.n	800248e <NVIC_EncodePriority+0x32>
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002490:	f04f 32ff 	mov.w	r2, #4294967295
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43da      	mvns	r2, r3
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	401a      	ands	r2, r3
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a4:	f04f 31ff 	mov.w	r1, #4294967295
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	fa01 f303 	lsl.w	r3, r1, r3
 80024ae:	43d9      	mvns	r1, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b4:	4313      	orrs	r3, r2
         );
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3724      	adds	r7, #36	; 0x24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
	...

080024c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024d4:	d301      	bcc.n	80024da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024d6:	2301      	movs	r3, #1
 80024d8:	e00f      	b.n	80024fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024da:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <SysTick_Config+0x40>)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3b01      	subs	r3, #1
 80024e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024e2:	210f      	movs	r1, #15
 80024e4:	f04f 30ff 	mov.w	r0, #4294967295
 80024e8:	f7ff ff8e 	bl	8002408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024ec:	4b05      	ldr	r3, [pc, #20]	; (8002504 <SysTick_Config+0x40>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024f2:	4b04      	ldr	r3, [pc, #16]	; (8002504 <SysTick_Config+0x40>)
 80024f4:	2207      	movs	r2, #7
 80024f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	e000e010 	.word	0xe000e010

08002508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7ff ff29 	bl	8002368 <__NVIC_SetPriorityGrouping>
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800251e:	b580      	push	{r7, lr}
 8002520:	b086      	sub	sp, #24
 8002522:	af00      	add	r7, sp, #0
 8002524:	4603      	mov	r3, r0
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	607a      	str	r2, [r7, #4]
 800252a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002530:	f7ff ff3e 	bl	80023b0 <__NVIC_GetPriorityGrouping>
 8002534:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	68b9      	ldr	r1, [r7, #8]
 800253a:	6978      	ldr	r0, [r7, #20]
 800253c:	f7ff ff8e 	bl	800245c <NVIC_EncodePriority>
 8002540:	4602      	mov	r2, r0
 8002542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002546:	4611      	mov	r1, r2
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff ff5d 	bl	8002408 <__NVIC_SetPriority>
}
 800254e:	bf00      	nop
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	4603      	mov	r3, r0
 800255e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff ff31 	bl	80023cc <__NVIC_EnableIRQ>
}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7ff ffa2 	bl	80024c4 <SysTick_Config>
 8002580:	4603      	mov	r3, r0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800258c:	b480      	push	{r7}
 800258e:	b089      	sub	sp, #36	; 0x24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800259a:	2300      	movs	r3, #0
 800259c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800259e:	2300      	movs	r3, #0
 80025a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025a2:	2300      	movs	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
 80025a6:	e159      	b.n	800285c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025a8:	2201      	movs	r2, #1
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	4013      	ands	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	f040 8148 	bne.w	8002856 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d005      	beq.n	80025de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d130      	bne.n	8002640 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	2203      	movs	r2, #3
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4013      	ands	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4313      	orrs	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002614:	2201      	movs	r2, #1
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	091b      	lsrs	r3, r3, #4
 800262a:	f003 0201 	and.w	r2, r3, #1
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	2b03      	cmp	r3, #3
 800264a:	d017      	beq.n	800267c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	2203      	movs	r2, #3
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4313      	orrs	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d123      	bne.n	80026d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	08da      	lsrs	r2, r3, #3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3208      	adds	r2, #8
 8002690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002694:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	220f      	movs	r2, #15
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	691a      	ldr	r2, [r3, #16]
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	08da      	lsrs	r2, r3, #3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3208      	adds	r2, #8
 80026ca:	69b9      	ldr	r1, [r7, #24]
 80026cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	2203      	movs	r2, #3
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 0203 	and.w	r2, r3, #3
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80a2 	beq.w	8002856 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	4b57      	ldr	r3, [pc, #348]	; (8002874 <HAL_GPIO_Init+0x2e8>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	4a56      	ldr	r2, [pc, #344]	; (8002874 <HAL_GPIO_Init+0x2e8>)
 800271c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002720:	6453      	str	r3, [r2, #68]	; 0x44
 8002722:	4b54      	ldr	r3, [pc, #336]	; (8002874 <HAL_GPIO_Init+0x2e8>)
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800272e:	4a52      	ldr	r2, [pc, #328]	; (8002878 <HAL_GPIO_Init+0x2ec>)
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	089b      	lsrs	r3, r3, #2
 8002734:	3302      	adds	r3, #2
 8002736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	220f      	movs	r2, #15
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43db      	mvns	r3, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4013      	ands	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a49      	ldr	r2, [pc, #292]	; (800287c <HAL_GPIO_Init+0x2f0>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d019      	beq.n	800278e <HAL_GPIO_Init+0x202>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a48      	ldr	r2, [pc, #288]	; (8002880 <HAL_GPIO_Init+0x2f4>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d013      	beq.n	800278a <HAL_GPIO_Init+0x1fe>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a47      	ldr	r2, [pc, #284]	; (8002884 <HAL_GPIO_Init+0x2f8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00d      	beq.n	8002786 <HAL_GPIO_Init+0x1fa>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a46      	ldr	r2, [pc, #280]	; (8002888 <HAL_GPIO_Init+0x2fc>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d007      	beq.n	8002782 <HAL_GPIO_Init+0x1f6>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a45      	ldr	r2, [pc, #276]	; (800288c <HAL_GPIO_Init+0x300>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d101      	bne.n	800277e <HAL_GPIO_Init+0x1f2>
 800277a:	2304      	movs	r3, #4
 800277c:	e008      	b.n	8002790 <HAL_GPIO_Init+0x204>
 800277e:	2307      	movs	r3, #7
 8002780:	e006      	b.n	8002790 <HAL_GPIO_Init+0x204>
 8002782:	2303      	movs	r3, #3
 8002784:	e004      	b.n	8002790 <HAL_GPIO_Init+0x204>
 8002786:	2302      	movs	r3, #2
 8002788:	e002      	b.n	8002790 <HAL_GPIO_Init+0x204>
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <HAL_GPIO_Init+0x204>
 800278e:	2300      	movs	r3, #0
 8002790:	69fa      	ldr	r2, [r7, #28]
 8002792:	f002 0203 	and.w	r2, r2, #3
 8002796:	0092      	lsls	r2, r2, #2
 8002798:	4093      	lsls	r3, r2
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027a0:	4935      	ldr	r1, [pc, #212]	; (8002878 <HAL_GPIO_Init+0x2ec>)
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	089b      	lsrs	r3, r3, #2
 80027a6:	3302      	adds	r3, #2
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ae:	4b38      	ldr	r3, [pc, #224]	; (8002890 <HAL_GPIO_Init+0x304>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4013      	ands	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027d2:	4a2f      	ldr	r2, [pc, #188]	; (8002890 <HAL_GPIO_Init+0x304>)
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027d8:	4b2d      	ldr	r3, [pc, #180]	; (8002890 <HAL_GPIO_Init+0x304>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027fc:	4a24      	ldr	r2, [pc, #144]	; (8002890 <HAL_GPIO_Init+0x304>)
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002802:	4b23      	ldr	r3, [pc, #140]	; (8002890 <HAL_GPIO_Init+0x304>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002826:	4a1a      	ldr	r2, [pc, #104]	; (8002890 <HAL_GPIO_Init+0x304>)
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800282c:	4b18      	ldr	r3, [pc, #96]	; (8002890 <HAL_GPIO_Init+0x304>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002850:	4a0f      	ldr	r2, [pc, #60]	; (8002890 <HAL_GPIO_Init+0x304>)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3301      	adds	r3, #1
 800285a:	61fb      	str	r3, [r7, #28]
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	2b0f      	cmp	r3, #15
 8002860:	f67f aea2 	bls.w	80025a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002864:	bf00      	nop
 8002866:	bf00      	nop
 8002868:	3724      	adds	r7, #36	; 0x24
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40023800 	.word	0x40023800
 8002878:	40013800 	.word	0x40013800
 800287c:	40020000 	.word	0x40020000
 8002880:	40020400 	.word	0x40020400
 8002884:	40020800 	.word	0x40020800
 8002888:	40020c00 	.word	0x40020c00
 800288c:	40021000 	.word	0x40021000
 8002890:	40013c00 	.word	0x40013c00

08002894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	807b      	strh	r3, [r7, #2]
 80028a0:	4613      	mov	r3, r2
 80028a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028a4:	787b      	ldrb	r3, [r7, #1]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028aa:	887a      	ldrh	r2, [r7, #2]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028b0:	e003      	b.n	80028ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028b2:	887b      	ldrh	r3, [r7, #2]
 80028b4:	041a      	lsls	r2, r3, #16
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	619a      	str	r2, [r3, #24]
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
	...

080028c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028d2:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028d4:	695a      	ldr	r2, [r3, #20]
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	4013      	ands	r3, r2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d006      	beq.n	80028ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028de:	4a05      	ldr	r2, [pc, #20]	; (80028f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028e0:	88fb      	ldrh	r3, [r7, #6]
 80028e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028e4:	88fb      	ldrh	r3, [r7, #6]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fe fdf6 	bl	80014d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80028ec:	bf00      	nop
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40013c00 	.word	0x40013c00

080028f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e267      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d075      	beq.n	8002a02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002916:	4b88      	ldr	r3, [pc, #544]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 030c 	and.w	r3, r3, #12
 800291e:	2b04      	cmp	r3, #4
 8002920:	d00c      	beq.n	800293c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002922:	4b85      	ldr	r3, [pc, #532]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800292a:	2b08      	cmp	r3, #8
 800292c:	d112      	bne.n	8002954 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800292e:	4b82      	ldr	r3, [pc, #520]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002936:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800293a:	d10b      	bne.n	8002954 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800293c:	4b7e      	ldr	r3, [pc, #504]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d05b      	beq.n	8002a00 <HAL_RCC_OscConfig+0x108>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d157      	bne.n	8002a00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e242      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800295c:	d106      	bne.n	800296c <HAL_RCC_OscConfig+0x74>
 800295e:	4b76      	ldr	r3, [pc, #472]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a75      	ldr	r2, [pc, #468]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	e01d      	b.n	80029a8 <HAL_RCC_OscConfig+0xb0>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002974:	d10c      	bne.n	8002990 <HAL_RCC_OscConfig+0x98>
 8002976:	4b70      	ldr	r3, [pc, #448]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a6f      	ldr	r2, [pc, #444]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 800297c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	4b6d      	ldr	r3, [pc, #436]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a6c      	ldr	r2, [pc, #432]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	e00b      	b.n	80029a8 <HAL_RCC_OscConfig+0xb0>
 8002990:	4b69      	ldr	r3, [pc, #420]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a68      	ldr	r2, [pc, #416]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800299a:	6013      	str	r3, [r2, #0]
 800299c:	4b66      	ldr	r3, [pc, #408]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a65      	ldr	r2, [pc, #404]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 80029a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d013      	beq.n	80029d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b0:	f7ff f8f2 	bl	8001b98 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029b8:	f7ff f8ee 	bl	8001b98 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b64      	cmp	r3, #100	; 0x64
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e207      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ca:	4b5b      	ldr	r3, [pc, #364]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0f0      	beq.n	80029b8 <HAL_RCC_OscConfig+0xc0>
 80029d6:	e014      	b.n	8002a02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7ff f8de 	bl	8001b98 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029e0:	f7ff f8da 	bl	8001b98 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b64      	cmp	r3, #100	; 0x64
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e1f3      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029f2:	4b51      	ldr	r3, [pc, #324]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0xe8>
 80029fe:	e000      	b.n	8002a02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d063      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a0e:	4b4a      	ldr	r3, [pc, #296]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 030c 	and.w	r3, r3, #12
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00b      	beq.n	8002a32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a1a:	4b47      	ldr	r3, [pc, #284]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a22:	2b08      	cmp	r3, #8
 8002a24:	d11c      	bne.n	8002a60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a26:	4b44      	ldr	r3, [pc, #272]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d116      	bne.n	8002a60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a32:	4b41      	ldr	r3, [pc, #260]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d005      	beq.n	8002a4a <HAL_RCC_OscConfig+0x152>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d001      	beq.n	8002a4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e1c7      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4a:	4b3b      	ldr	r3, [pc, #236]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4937      	ldr	r1, [pc, #220]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a5e:	e03a      	b.n	8002ad6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d020      	beq.n	8002aaa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a68:	4b34      	ldr	r3, [pc, #208]	; (8002b3c <HAL_RCC_OscConfig+0x244>)
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6e:	f7ff f893 	bl	8001b98 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a76:	f7ff f88f 	bl	8001b98 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e1a8      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a88:	4b2b      	ldr	r3, [pc, #172]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0f0      	beq.n	8002a76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a94:	4b28      	ldr	r3, [pc, #160]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4925      	ldr	r1, [pc, #148]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	600b      	str	r3, [r1, #0]
 8002aa8:	e015      	b.n	8002ad6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aaa:	4b24      	ldr	r3, [pc, #144]	; (8002b3c <HAL_RCC_OscConfig+0x244>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab0:	f7ff f872 	bl	8001b98 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ab8:	f7ff f86e 	bl	8001b98 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e187      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aca:	4b1b      	ldr	r3, [pc, #108]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d036      	beq.n	8002b50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d016      	beq.n	8002b18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aea:	4b15      	ldr	r3, [pc, #84]	; (8002b40 <HAL_RCC_OscConfig+0x248>)
 8002aec:	2201      	movs	r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af0:	f7ff f852 	bl	8001b98 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002af8:	f7ff f84e 	bl	8001b98 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e167      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b0a:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0x200>
 8002b16:	e01b      	b.n	8002b50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b18:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <HAL_RCC_OscConfig+0x248>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b1e:	f7ff f83b 	bl	8001b98 <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b24:	e00e      	b.n	8002b44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b26:	f7ff f837 	bl	8001b98 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d907      	bls.n	8002b44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e150      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	42470000 	.word	0x42470000
 8002b40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b44:	4b88      	ldr	r3, [pc, #544]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1ea      	bne.n	8002b26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 8097 	beq.w	8002c8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b62:	4b81      	ldr	r3, [pc, #516]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10f      	bne.n	8002b8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60bb      	str	r3, [r7, #8]
 8002b72:	4b7d      	ldr	r3, [pc, #500]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	4a7c      	ldr	r2, [pc, #496]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b7e:	4b7a      	ldr	r3, [pc, #488]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b86:	60bb      	str	r3, [r7, #8]
 8002b88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8e:	4b77      	ldr	r3, [pc, #476]	; (8002d6c <HAL_RCC_OscConfig+0x474>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d118      	bne.n	8002bcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b9a:	4b74      	ldr	r3, [pc, #464]	; (8002d6c <HAL_RCC_OscConfig+0x474>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a73      	ldr	r2, [pc, #460]	; (8002d6c <HAL_RCC_OscConfig+0x474>)
 8002ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ba6:	f7fe fff7 	bl	8001b98 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bae:	f7fe fff3 	bl	8001b98 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e10c      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc0:	4b6a      	ldr	r3, [pc, #424]	; (8002d6c <HAL_RCC_OscConfig+0x474>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0f0      	beq.n	8002bae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d106      	bne.n	8002be2 <HAL_RCC_OscConfig+0x2ea>
 8002bd4:	4b64      	ldr	r3, [pc, #400]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd8:	4a63      	ldr	r2, [pc, #396]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	6713      	str	r3, [r2, #112]	; 0x70
 8002be0:	e01c      	b.n	8002c1c <HAL_RCC_OscConfig+0x324>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	2b05      	cmp	r3, #5
 8002be8:	d10c      	bne.n	8002c04 <HAL_RCC_OscConfig+0x30c>
 8002bea:	4b5f      	ldr	r3, [pc, #380]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bee:	4a5e      	ldr	r2, [pc, #376]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002bf0:	f043 0304 	orr.w	r3, r3, #4
 8002bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf6:	4b5c      	ldr	r3, [pc, #368]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfa:	4a5b      	ldr	r2, [pc, #364]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	6713      	str	r3, [r2, #112]	; 0x70
 8002c02:	e00b      	b.n	8002c1c <HAL_RCC_OscConfig+0x324>
 8002c04:	4b58      	ldr	r3, [pc, #352]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c08:	4a57      	ldr	r2, [pc, #348]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002c0a:	f023 0301 	bic.w	r3, r3, #1
 8002c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c10:	4b55      	ldr	r3, [pc, #340]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c14:	4a54      	ldr	r2, [pc, #336]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002c16:	f023 0304 	bic.w	r3, r3, #4
 8002c1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d015      	beq.n	8002c50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c24:	f7fe ffb8 	bl	8001b98 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c2a:	e00a      	b.n	8002c42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c2c:	f7fe ffb4 	bl	8001b98 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e0cb      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c42:	4b49      	ldr	r3, [pc, #292]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0ee      	beq.n	8002c2c <HAL_RCC_OscConfig+0x334>
 8002c4e:	e014      	b.n	8002c7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c50:	f7fe ffa2 	bl	8001b98 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c56:	e00a      	b.n	8002c6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c58:	f7fe ff9e 	bl	8001b98 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e0b5      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c6e:	4b3e      	ldr	r3, [pc, #248]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1ee      	bne.n	8002c58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c7a:	7dfb      	ldrb	r3, [r7, #23]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d105      	bne.n	8002c8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c80:	4b39      	ldr	r3, [pc, #228]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	4a38      	ldr	r2, [pc, #224]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002c86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 80a1 	beq.w	8002dd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c96:	4b34      	ldr	r3, [pc, #208]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d05c      	beq.n	8002d5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d141      	bne.n	8002d2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002caa:	4b31      	ldr	r3, [pc, #196]	; (8002d70 <HAL_RCC_OscConfig+0x478>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7fe ff72 	bl	8001b98 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb8:	f7fe ff6e 	bl	8001b98 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e087      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cca:	4b27      	ldr	r3, [pc, #156]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69da      	ldr	r2, [r3, #28]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	019b      	lsls	r3, r3, #6
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cec:	085b      	lsrs	r3, r3, #1
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	041b      	lsls	r3, r3, #16
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf8:	061b      	lsls	r3, r3, #24
 8002cfa:	491b      	ldr	r1, [pc, #108]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d00:	4b1b      	ldr	r3, [pc, #108]	; (8002d70 <HAL_RCC_OscConfig+0x478>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d06:	f7fe ff47 	bl	8001b98 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0c:	e008      	b.n	8002d20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d0e:	f7fe ff43 	bl	8001b98 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e05c      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d20:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0f0      	beq.n	8002d0e <HAL_RCC_OscConfig+0x416>
 8002d2c:	e054      	b.n	8002dd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2e:	4b10      	ldr	r3, [pc, #64]	; (8002d70 <HAL_RCC_OscConfig+0x478>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d34:	f7fe ff30 	bl	8001b98 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d3c:	f7fe ff2c 	bl	8001b98 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e045      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4e:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f0      	bne.n	8002d3c <HAL_RCC_OscConfig+0x444>
 8002d5a:	e03d      	b.n	8002dd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d107      	bne.n	8002d74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e038      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	40007000 	.word	0x40007000
 8002d70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d74:	4b1b      	ldr	r3, [pc, #108]	; (8002de4 <HAL_RCC_OscConfig+0x4ec>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d028      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d121      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d11a      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002da4:	4013      	ands	r3, r2
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002daa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d111      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dba:	085b      	lsrs	r3, r3, #1
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d107      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e000      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40023800 	.word	0x40023800

08002de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e0cc      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dfc:	4b68      	ldr	r3, [pc, #416]	; (8002fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d90c      	bls.n	8002e24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0a:	4b65      	ldr	r3, [pc, #404]	; (8002fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e12:	4b63      	ldr	r3, [pc, #396]	; (8002fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e0b8      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d020      	beq.n	8002e72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e3c:	4b59      	ldr	r3, [pc, #356]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	4a58      	ldr	r2, [pc, #352]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d005      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e54:	4b53      	ldr	r3, [pc, #332]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	4a52      	ldr	r2, [pc, #328]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e60:	4b50      	ldr	r3, [pc, #320]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	494d      	ldr	r1, [pc, #308]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d044      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d107      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e86:	4b47      	ldr	r3, [pc, #284]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d119      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e07f      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d003      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ea2:	2b03      	cmp	r3, #3
 8002ea4:	d107      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ea6:	4b3f      	ldr	r3, [pc, #252]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d109      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e06f      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb6:	4b3b      	ldr	r3, [pc, #236]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e067      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ec6:	4b37      	ldr	r3, [pc, #220]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f023 0203 	bic.w	r2, r3, #3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	4934      	ldr	r1, [pc, #208]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ed8:	f7fe fe5e 	bl	8001b98 <HAL_GetTick>
 8002edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ede:	e00a      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ee0:	f7fe fe5a 	bl	8001b98 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e04f      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef6:	4b2b      	ldr	r3, [pc, #172]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 020c 	and.w	r2, r3, #12
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d1eb      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f08:	4b25      	ldr	r3, [pc, #148]	; (8002fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d20c      	bcs.n	8002f30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f16:	4b22      	ldr	r3, [pc, #136]	; (8002fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1e:	4b20      	ldr	r3, [pc, #128]	; (8002fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e032      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f3c:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	4916      	ldr	r1, [pc, #88]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d009      	beq.n	8002f6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f5a:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	490e      	ldr	r1, [pc, #56]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f6e:	f000 f821 	bl	8002fb4 <HAL_RCC_GetSysClockFreq>
 8002f72:	4602      	mov	r2, r0
 8002f74:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	091b      	lsrs	r3, r3, #4
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	490a      	ldr	r1, [pc, #40]	; (8002fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f80:	5ccb      	ldrb	r3, [r1, r3]
 8002f82:	fa22 f303 	lsr.w	r3, r2, r3
 8002f86:	4a09      	ldr	r2, [pc, #36]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f8a:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fe fdbe 	bl	8001b10 <HAL_InitTick>

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40023c00 	.word	0x40023c00
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	08008578 	.word	0x08008578
 8002fac:	20000000 	.word	0x20000000
 8002fb0:	20000004 	.word	0x20000004

08002fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fb8:	b090      	sub	sp, #64	; 0x40
 8002fba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	637b      	str	r3, [r7, #52]	; 0x34
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fcc:	4b59      	ldr	r3, [pc, #356]	; (8003134 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 030c 	and.w	r3, r3, #12
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d00d      	beq.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x40>
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	f200 80a1 	bhi.w	8003120 <HAL_RCC_GetSysClockFreq+0x16c>
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x34>
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d003      	beq.n	8002fee <HAL_RCC_GetSysClockFreq+0x3a>
 8002fe6:	e09b      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fe8:	4b53      	ldr	r3, [pc, #332]	; (8003138 <HAL_RCC_GetSysClockFreq+0x184>)
 8002fea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002fec:	e09b      	b.n	8003126 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fee:	4b53      	ldr	r3, [pc, #332]	; (800313c <HAL_RCC_GetSysClockFreq+0x188>)
 8002ff0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ff2:	e098      	b.n	8003126 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ff4:	4b4f      	ldr	r3, [pc, #316]	; (8003134 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ffc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ffe:	4b4d      	ldr	r3, [pc, #308]	; (8003134 <HAL_RCC_GetSysClockFreq+0x180>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d028      	beq.n	800305c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800300a:	4b4a      	ldr	r3, [pc, #296]	; (8003134 <HAL_RCC_GetSysClockFreq+0x180>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	099b      	lsrs	r3, r3, #6
 8003010:	2200      	movs	r2, #0
 8003012:	623b      	str	r3, [r7, #32]
 8003014:	627a      	str	r2, [r7, #36]	; 0x24
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800301c:	2100      	movs	r1, #0
 800301e:	4b47      	ldr	r3, [pc, #284]	; (800313c <HAL_RCC_GetSysClockFreq+0x188>)
 8003020:	fb03 f201 	mul.w	r2, r3, r1
 8003024:	2300      	movs	r3, #0
 8003026:	fb00 f303 	mul.w	r3, r0, r3
 800302a:	4413      	add	r3, r2
 800302c:	4a43      	ldr	r2, [pc, #268]	; (800313c <HAL_RCC_GetSysClockFreq+0x188>)
 800302e:	fba0 1202 	umull	r1, r2, r0, r2
 8003032:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003034:	460a      	mov	r2, r1
 8003036:	62ba      	str	r2, [r7, #40]	; 0x28
 8003038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800303a:	4413      	add	r3, r2
 800303c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800303e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003040:	2200      	movs	r2, #0
 8003042:	61bb      	str	r3, [r7, #24]
 8003044:	61fa      	str	r2, [r7, #28]
 8003046:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800304a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800304e:	f7fd f917 	bl	8000280 <__aeabi_uldivmod>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4613      	mov	r3, r2
 8003058:	63fb      	str	r3, [r7, #60]	; 0x3c
 800305a:	e053      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800305c:	4b35      	ldr	r3, [pc, #212]	; (8003134 <HAL_RCC_GetSysClockFreq+0x180>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	099b      	lsrs	r3, r3, #6
 8003062:	2200      	movs	r2, #0
 8003064:	613b      	str	r3, [r7, #16]
 8003066:	617a      	str	r2, [r7, #20]
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800306e:	f04f 0b00 	mov.w	fp, #0
 8003072:	4652      	mov	r2, sl
 8003074:	465b      	mov	r3, fp
 8003076:	f04f 0000 	mov.w	r0, #0
 800307a:	f04f 0100 	mov.w	r1, #0
 800307e:	0159      	lsls	r1, r3, #5
 8003080:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003084:	0150      	lsls	r0, r2, #5
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	ebb2 080a 	subs.w	r8, r2, sl
 800308e:	eb63 090b 	sbc.w	r9, r3, fp
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800309e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030a6:	ebb2 0408 	subs.w	r4, r2, r8
 80030aa:	eb63 0509 	sbc.w	r5, r3, r9
 80030ae:	f04f 0200 	mov.w	r2, #0
 80030b2:	f04f 0300 	mov.w	r3, #0
 80030b6:	00eb      	lsls	r3, r5, #3
 80030b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030bc:	00e2      	lsls	r2, r4, #3
 80030be:	4614      	mov	r4, r2
 80030c0:	461d      	mov	r5, r3
 80030c2:	eb14 030a 	adds.w	r3, r4, sl
 80030c6:	603b      	str	r3, [r7, #0]
 80030c8:	eb45 030b 	adc.w	r3, r5, fp
 80030cc:	607b      	str	r3, [r7, #4]
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030da:	4629      	mov	r1, r5
 80030dc:	028b      	lsls	r3, r1, #10
 80030de:	4621      	mov	r1, r4
 80030e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030e4:	4621      	mov	r1, r4
 80030e6:	028a      	lsls	r2, r1, #10
 80030e8:	4610      	mov	r0, r2
 80030ea:	4619      	mov	r1, r3
 80030ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ee:	2200      	movs	r2, #0
 80030f0:	60bb      	str	r3, [r7, #8]
 80030f2:	60fa      	str	r2, [r7, #12]
 80030f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030f8:	f7fd f8c2 	bl	8000280 <__aeabi_uldivmod>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4613      	mov	r3, r2
 8003102:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003104:	4b0b      	ldr	r3, [pc, #44]	; (8003134 <HAL_RCC_GetSysClockFreq+0x180>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	0c1b      	lsrs	r3, r3, #16
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	3301      	adds	r3, #1
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003114:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003118:	fbb2 f3f3 	udiv	r3, r2, r3
 800311c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800311e:	e002      	b.n	8003126 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003120:	4b05      	ldr	r3, [pc, #20]	; (8003138 <HAL_RCC_GetSysClockFreq+0x184>)
 8003122:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003124:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003128:	4618      	mov	r0, r3
 800312a:	3740      	adds	r7, #64	; 0x40
 800312c:	46bd      	mov	sp, r7
 800312e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003132:	bf00      	nop
 8003134:	40023800 	.word	0x40023800
 8003138:	00f42400 	.word	0x00f42400
 800313c:	017d7840 	.word	0x017d7840

08003140 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e07b      	b.n	800324a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	2b00      	cmp	r3, #0
 8003158:	d108      	bne.n	800316c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003162:	d009      	beq.n	8003178 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	61da      	str	r2, [r3, #28]
 800316a:	e005      	b.n	8003178 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d106      	bne.n	8003198 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7fe faf2 	bl	800177c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031c0:	431a      	orrs	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	431a      	orrs	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	431a      	orrs	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031e8:	431a      	orrs	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031fc:	ea42 0103 	orr.w	r1, r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	0c1b      	lsrs	r3, r3, #16
 8003216:	f003 0104 	and.w	r1, r3, #4
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	f003 0210 	and.w	r2, r3, #16
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	69da      	ldr	r2, [r3, #28]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003238:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b088      	sub	sp, #32
 8003256:	af00      	add	r7, sp, #0
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	603b      	str	r3, [r7, #0]
 800325e:	4613      	mov	r3, r2
 8003260:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003262:	2300      	movs	r3, #0
 8003264:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_SPI_Transmit+0x22>
 8003270:	2302      	movs	r3, #2
 8003272:	e126      	b.n	80034c2 <HAL_SPI_Transmit+0x270>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800327c:	f7fe fc8c 	bl	8001b98 <HAL_GetTick>
 8003280:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003282:	88fb      	ldrh	r3, [r7, #6]
 8003284:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b01      	cmp	r3, #1
 8003290:	d002      	beq.n	8003298 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003292:	2302      	movs	r3, #2
 8003294:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003296:	e10b      	b.n	80034b0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <HAL_SPI_Transmit+0x52>
 800329e:	88fb      	ldrh	r3, [r7, #6]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d102      	bne.n	80032aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032a8:	e102      	b.n	80034b0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2203      	movs	r2, #3
 80032ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	88fa      	ldrh	r2, [r7, #6]
 80032c2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	88fa      	ldrh	r2, [r7, #6]
 80032c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032f0:	d10f      	bne.n	8003312 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003300:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003310:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331c:	2b40      	cmp	r3, #64	; 0x40
 800331e:	d007      	beq.n	8003330 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800332e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003338:	d14b      	bne.n	80033d2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d002      	beq.n	8003348 <HAL_SPI_Transmit+0xf6>
 8003342:	8afb      	ldrh	r3, [r7, #22]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d13e      	bne.n	80033c6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334c:	881a      	ldrh	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003358:	1c9a      	adds	r2, r3, #2
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800336c:	e02b      	b.n	80033c6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b02      	cmp	r3, #2
 800337a:	d112      	bne.n	80033a2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003380:	881a      	ldrh	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	1c9a      	adds	r2, r3, #2
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003396:	b29b      	uxth	r3, r3
 8003398:	3b01      	subs	r3, #1
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	86da      	strh	r2, [r3, #54]	; 0x36
 80033a0:	e011      	b.n	80033c6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033a2:	f7fe fbf9 	bl	8001b98 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d803      	bhi.n	80033ba <HAL_SPI_Transmit+0x168>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b8:	d102      	bne.n	80033c0 <HAL_SPI_Transmit+0x16e>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d102      	bne.n	80033c6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033c4:	e074      	b.n	80034b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1ce      	bne.n	800336e <HAL_SPI_Transmit+0x11c>
 80033d0:	e04c      	b.n	800346c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <HAL_SPI_Transmit+0x18e>
 80033da:	8afb      	ldrh	r3, [r7, #22]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d140      	bne.n	8003462 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	330c      	adds	r3, #12
 80033ea:	7812      	ldrb	r2, [r2, #0]
 80033ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	1c5a      	adds	r2, r3, #1
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	3b01      	subs	r3, #1
 8003400:	b29a      	uxth	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003406:	e02c      	b.n	8003462 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b02      	cmp	r3, #2
 8003414:	d113      	bne.n	800343e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	330c      	adds	r3, #12
 8003420:	7812      	ldrb	r2, [r2, #0]
 8003422:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003432:	b29b      	uxth	r3, r3
 8003434:	3b01      	subs	r3, #1
 8003436:	b29a      	uxth	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	86da      	strh	r2, [r3, #54]	; 0x36
 800343c:	e011      	b.n	8003462 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800343e:	f7fe fbab 	bl	8001b98 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	429a      	cmp	r2, r3
 800344c:	d803      	bhi.n	8003456 <HAL_SPI_Transmit+0x204>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003454:	d102      	bne.n	800345c <HAL_SPI_Transmit+0x20a>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d102      	bne.n	8003462 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003460:	e026      	b.n	80034b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003466:	b29b      	uxth	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1cd      	bne.n	8003408 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	6839      	ldr	r1, [r7, #0]
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 f8b3 	bl	80035dc <SPI_EndRxTxTransaction>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d002      	beq.n	8003482 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2220      	movs	r2, #32
 8003480:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10a      	bne.n	80034a0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800348a:	2300      	movs	r3, #0
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	613b      	str	r3, [r7, #16]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	613b      	str	r3, [r7, #16]
 800349e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d002      	beq.n	80034ae <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	77fb      	strb	r3, [r7, #31]
 80034ac:	e000      	b.n	80034b0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80034ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3720      	adds	r7, #32
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
	...

080034cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b088      	sub	sp, #32
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	603b      	str	r3, [r7, #0]
 80034d8:	4613      	mov	r3, r2
 80034da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034dc:	f7fe fb5c 	bl	8001b98 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e4:	1a9b      	subs	r3, r3, r2
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	4413      	add	r3, r2
 80034ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034ec:	f7fe fb54 	bl	8001b98 <HAL_GetTick>
 80034f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034f2:	4b39      	ldr	r3, [pc, #228]	; (80035d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	015b      	lsls	r3, r3, #5
 80034f8:	0d1b      	lsrs	r3, r3, #20
 80034fa:	69fa      	ldr	r2, [r7, #28]
 80034fc:	fb02 f303 	mul.w	r3, r2, r3
 8003500:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003502:	e054      	b.n	80035ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350a:	d050      	beq.n	80035ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800350c:	f7fe fb44 	bl	8001b98 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	69fa      	ldr	r2, [r7, #28]
 8003518:	429a      	cmp	r2, r3
 800351a:	d902      	bls.n	8003522 <SPI_WaitFlagStateUntilTimeout+0x56>
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d13d      	bne.n	800359e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003530:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800353a:	d111      	bne.n	8003560 <SPI_WaitFlagStateUntilTimeout+0x94>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003544:	d004      	beq.n	8003550 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800354e:	d107      	bne.n	8003560 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800355e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003568:	d10f      	bne.n	800358a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003588:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e017      	b.n	80035ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	4013      	ands	r3, r2
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	bf0c      	ite	eq
 80035be:	2301      	moveq	r3, #1
 80035c0:	2300      	movne	r3, #0
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	461a      	mov	r2, r3
 80035c6:	79fb      	ldrb	r3, [r7, #7]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d19b      	bne.n	8003504 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3720      	adds	r7, #32
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	20000000 	.word	0x20000000

080035dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80035e8:	4b1b      	ldr	r3, [pc, #108]	; (8003658 <SPI_EndRxTxTransaction+0x7c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a1b      	ldr	r2, [pc, #108]	; (800365c <SPI_EndRxTxTransaction+0x80>)
 80035ee:	fba2 2303 	umull	r2, r3, r2, r3
 80035f2:	0d5b      	lsrs	r3, r3, #21
 80035f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035f8:	fb02 f303 	mul.w	r3, r2, r3
 80035fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003606:	d112      	bne.n	800362e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2200      	movs	r2, #0
 8003610:	2180      	movs	r1, #128	; 0x80
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f7ff ff5a 	bl	80034cc <SPI_WaitFlagStateUntilTimeout>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d016      	beq.n	800364c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003622:	f043 0220 	orr.w	r2, r3, #32
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e00f      	b.n	800364e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00a      	beq.n	800364a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	3b01      	subs	r3, #1
 8003638:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003644:	2b80      	cmp	r3, #128	; 0x80
 8003646:	d0f2      	beq.n	800362e <SPI_EndRxTxTransaction+0x52>
 8003648:	e000      	b.n	800364c <SPI_EndRxTxTransaction+0x70>
        break;
 800364a:	bf00      	nop
  }

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3718      	adds	r7, #24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	20000000 	.word	0x20000000
 800365c:	165e9f81 	.word	0x165e9f81

08003660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e041      	b.n	80036f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d106      	bne.n	800368c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7fe f8c0 	bl	800180c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3304      	adds	r3, #4
 800369c:	4619      	mov	r1, r3
 800369e:	4610      	mov	r0, r2
 80036a0:	f000 fa88 	bl	8003bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b01      	cmp	r3, #1
 8003712:	d001      	beq.n	8003718 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e044      	b.n	80037a2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2202      	movs	r2, #2
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0201 	orr.w	r2, r2, #1
 800372e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a1e      	ldr	r2, [pc, #120]	; (80037b0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d018      	beq.n	800376c <HAL_TIM_Base_Start_IT+0x6c>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003742:	d013      	beq.n	800376c <HAL_TIM_Base_Start_IT+0x6c>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a1a      	ldr	r2, [pc, #104]	; (80037b4 <HAL_TIM_Base_Start_IT+0xb4>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d00e      	beq.n	800376c <HAL_TIM_Base_Start_IT+0x6c>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a19      	ldr	r2, [pc, #100]	; (80037b8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d009      	beq.n	800376c <HAL_TIM_Base_Start_IT+0x6c>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a17      	ldr	r2, [pc, #92]	; (80037bc <HAL_TIM_Base_Start_IT+0xbc>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d004      	beq.n	800376c <HAL_TIM_Base_Start_IT+0x6c>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a16      	ldr	r2, [pc, #88]	; (80037c0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d111      	bne.n	8003790 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2b06      	cmp	r3, #6
 800377c:	d010      	beq.n	80037a0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f042 0201 	orr.w	r2, r2, #1
 800378c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800378e:	e007      	b.n	80037a0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0201 	orr.w	r2, r2, #1
 800379e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40010000 	.word	0x40010000
 80037b4:	40000400 	.word	0x40000400
 80037b8:	40000800 	.word	0x40000800
 80037bc:	40000c00 	.word	0x40000c00
 80037c0:	40014000 	.word	0x40014000

080037c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d122      	bne.n	8003820 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d11b      	bne.n	8003820 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f06f 0202 	mvn.w	r2, #2
 80037f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f9b5 	bl	8003b76 <HAL_TIM_IC_CaptureCallback>
 800380c:	e005      	b.n	800381a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f9a7 	bl	8003b62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f9b8 	bl	8003b8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	f003 0304 	and.w	r3, r3, #4
 800382a:	2b04      	cmp	r3, #4
 800382c:	d122      	bne.n	8003874 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b04      	cmp	r3, #4
 800383a:	d11b      	bne.n	8003874 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f06f 0204 	mvn.w	r2, #4
 8003844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2202      	movs	r2, #2
 800384a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f98b 	bl	8003b76 <HAL_TIM_IC_CaptureCallback>
 8003860:	e005      	b.n	800386e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f97d 	bl	8003b62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f98e 	bl	8003b8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b08      	cmp	r3, #8
 8003880:	d122      	bne.n	80038c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	2b08      	cmp	r3, #8
 800388e:	d11b      	bne.n	80038c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f06f 0208 	mvn.w	r2, #8
 8003898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2204      	movs	r2, #4
 800389e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f961 	bl	8003b76 <HAL_TIM_IC_CaptureCallback>
 80038b4:	e005      	b.n	80038c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f953 	bl	8003b62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f964 	bl	8003b8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	f003 0310 	and.w	r3, r3, #16
 80038d2:	2b10      	cmp	r3, #16
 80038d4:	d122      	bne.n	800391c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f003 0310 	and.w	r3, r3, #16
 80038e0:	2b10      	cmp	r3, #16
 80038e2:	d11b      	bne.n	800391c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f06f 0210 	mvn.w	r2, #16
 80038ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2208      	movs	r2, #8
 80038f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f937 	bl	8003b76 <HAL_TIM_IC_CaptureCallback>
 8003908:	e005      	b.n	8003916 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f929 	bl	8003b62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 f93a 	bl	8003b8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b01      	cmp	r3, #1
 8003928:	d10e      	bne.n	8003948 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b01      	cmp	r3, #1
 8003936:	d107      	bne.n	8003948 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f06f 0201 	mvn.w	r2, #1
 8003940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fd fdf6 	bl	8001534 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003952:	2b80      	cmp	r3, #128	; 0x80
 8003954:	d10e      	bne.n	8003974 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003960:	2b80      	cmp	r3, #128	; 0x80
 8003962:	d107      	bne.n	8003974 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800396c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 fa44 	bl	8003dfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397e:	2b40      	cmp	r3, #64	; 0x40
 8003980:	d10e      	bne.n	80039a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398c:	2b40      	cmp	r3, #64	; 0x40
 800398e:	d107      	bne.n	80039a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f8ff 	bl	8003b9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	f003 0320 	and.w	r3, r3, #32
 80039aa:	2b20      	cmp	r3, #32
 80039ac:	d10e      	bne.n	80039cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f003 0320 	and.w	r3, r3, #32
 80039b8:	2b20      	cmp	r3, #32
 80039ba:	d107      	bne.n	80039cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f06f 0220 	mvn.w	r2, #32
 80039c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 fa0e 	bl	8003de8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039cc:	bf00      	nop
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039de:	2300      	movs	r3, #0
 80039e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d101      	bne.n	80039f0 <HAL_TIM_ConfigClockSource+0x1c>
 80039ec:	2302      	movs	r3, #2
 80039ee:	e0b4      	b.n	8003b5a <HAL_TIM_ConfigClockSource+0x186>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a28:	d03e      	beq.n	8003aa8 <HAL_TIM_ConfigClockSource+0xd4>
 8003a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a2e:	f200 8087 	bhi.w	8003b40 <HAL_TIM_ConfigClockSource+0x16c>
 8003a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a36:	f000 8086 	beq.w	8003b46 <HAL_TIM_ConfigClockSource+0x172>
 8003a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a3e:	d87f      	bhi.n	8003b40 <HAL_TIM_ConfigClockSource+0x16c>
 8003a40:	2b70      	cmp	r3, #112	; 0x70
 8003a42:	d01a      	beq.n	8003a7a <HAL_TIM_ConfigClockSource+0xa6>
 8003a44:	2b70      	cmp	r3, #112	; 0x70
 8003a46:	d87b      	bhi.n	8003b40 <HAL_TIM_ConfigClockSource+0x16c>
 8003a48:	2b60      	cmp	r3, #96	; 0x60
 8003a4a:	d050      	beq.n	8003aee <HAL_TIM_ConfigClockSource+0x11a>
 8003a4c:	2b60      	cmp	r3, #96	; 0x60
 8003a4e:	d877      	bhi.n	8003b40 <HAL_TIM_ConfigClockSource+0x16c>
 8003a50:	2b50      	cmp	r3, #80	; 0x50
 8003a52:	d03c      	beq.n	8003ace <HAL_TIM_ConfigClockSource+0xfa>
 8003a54:	2b50      	cmp	r3, #80	; 0x50
 8003a56:	d873      	bhi.n	8003b40 <HAL_TIM_ConfigClockSource+0x16c>
 8003a58:	2b40      	cmp	r3, #64	; 0x40
 8003a5a:	d058      	beq.n	8003b0e <HAL_TIM_ConfigClockSource+0x13a>
 8003a5c:	2b40      	cmp	r3, #64	; 0x40
 8003a5e:	d86f      	bhi.n	8003b40 <HAL_TIM_ConfigClockSource+0x16c>
 8003a60:	2b30      	cmp	r3, #48	; 0x30
 8003a62:	d064      	beq.n	8003b2e <HAL_TIM_ConfigClockSource+0x15a>
 8003a64:	2b30      	cmp	r3, #48	; 0x30
 8003a66:	d86b      	bhi.n	8003b40 <HAL_TIM_ConfigClockSource+0x16c>
 8003a68:	2b20      	cmp	r3, #32
 8003a6a:	d060      	beq.n	8003b2e <HAL_TIM_ConfigClockSource+0x15a>
 8003a6c:	2b20      	cmp	r3, #32
 8003a6e:	d867      	bhi.n	8003b40 <HAL_TIM_ConfigClockSource+0x16c>
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d05c      	beq.n	8003b2e <HAL_TIM_ConfigClockSource+0x15a>
 8003a74:	2b10      	cmp	r3, #16
 8003a76:	d05a      	beq.n	8003b2e <HAL_TIM_ConfigClockSource+0x15a>
 8003a78:	e062      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6818      	ldr	r0, [r3, #0]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	6899      	ldr	r1, [r3, #8]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f000 f98d 	bl	8003da8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	609a      	str	r2, [r3, #8]
      break;
 8003aa6:	e04f      	b.n	8003b48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6818      	ldr	r0, [r3, #0]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	6899      	ldr	r1, [r3, #8]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	f000 f976 	bl	8003da8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003aca:	609a      	str	r2, [r3, #8]
      break;
 8003acc:	e03c      	b.n	8003b48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	6859      	ldr	r1, [r3, #4]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	461a      	mov	r2, r3
 8003adc:	f000 f8ea 	bl	8003cb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2150      	movs	r1, #80	; 0x50
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 f943 	bl	8003d72 <TIM_ITRx_SetConfig>
      break;
 8003aec:	e02c      	b.n	8003b48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6818      	ldr	r0, [r3, #0]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	6859      	ldr	r1, [r3, #4]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	461a      	mov	r2, r3
 8003afc:	f000 f909 	bl	8003d12 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2160      	movs	r1, #96	; 0x60
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 f933 	bl	8003d72 <TIM_ITRx_SetConfig>
      break;
 8003b0c:	e01c      	b.n	8003b48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6818      	ldr	r0, [r3, #0]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	6859      	ldr	r1, [r3, #4]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	f000 f8ca 	bl	8003cb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2140      	movs	r1, #64	; 0x40
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 f923 	bl	8003d72 <TIM_ITRx_SetConfig>
      break;
 8003b2c:	e00c      	b.n	8003b48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4619      	mov	r1, r3
 8003b38:	4610      	mov	r0, r2
 8003b3a:	f000 f91a 	bl	8003d72 <TIM_ITRx_SetConfig>
      break;
 8003b3e:	e003      	b.n	8003b48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	73fb      	strb	r3, [r7, #15]
      break;
 8003b44:	e000      	b.n	8003b48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
	...

08003bb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a34      	ldr	r2, [pc, #208]	; (8003c98 <TIM_Base_SetConfig+0xe4>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d00f      	beq.n	8003bec <TIM_Base_SetConfig+0x38>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd2:	d00b      	beq.n	8003bec <TIM_Base_SetConfig+0x38>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a31      	ldr	r2, [pc, #196]	; (8003c9c <TIM_Base_SetConfig+0xe8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d007      	beq.n	8003bec <TIM_Base_SetConfig+0x38>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a30      	ldr	r2, [pc, #192]	; (8003ca0 <TIM_Base_SetConfig+0xec>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d003      	beq.n	8003bec <TIM_Base_SetConfig+0x38>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a2f      	ldr	r2, [pc, #188]	; (8003ca4 <TIM_Base_SetConfig+0xf0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d108      	bne.n	8003bfe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a25      	ldr	r2, [pc, #148]	; (8003c98 <TIM_Base_SetConfig+0xe4>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d01b      	beq.n	8003c3e <TIM_Base_SetConfig+0x8a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c0c:	d017      	beq.n	8003c3e <TIM_Base_SetConfig+0x8a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a22      	ldr	r2, [pc, #136]	; (8003c9c <TIM_Base_SetConfig+0xe8>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d013      	beq.n	8003c3e <TIM_Base_SetConfig+0x8a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a21      	ldr	r2, [pc, #132]	; (8003ca0 <TIM_Base_SetConfig+0xec>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d00f      	beq.n	8003c3e <TIM_Base_SetConfig+0x8a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a20      	ldr	r2, [pc, #128]	; (8003ca4 <TIM_Base_SetConfig+0xf0>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d00b      	beq.n	8003c3e <TIM_Base_SetConfig+0x8a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a1f      	ldr	r2, [pc, #124]	; (8003ca8 <TIM_Base_SetConfig+0xf4>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d007      	beq.n	8003c3e <TIM_Base_SetConfig+0x8a>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a1e      	ldr	r2, [pc, #120]	; (8003cac <TIM_Base_SetConfig+0xf8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d003      	beq.n	8003c3e <TIM_Base_SetConfig+0x8a>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a1d      	ldr	r2, [pc, #116]	; (8003cb0 <TIM_Base_SetConfig+0xfc>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d108      	bne.n	8003c50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a08      	ldr	r2, [pc, #32]	; (8003c98 <TIM_Base_SetConfig+0xe4>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d103      	bne.n	8003c84 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	615a      	str	r2, [r3, #20]
}
 8003c8a:	bf00      	nop
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40010000 	.word	0x40010000
 8003c9c:	40000400 	.word	0x40000400
 8003ca0:	40000800 	.word	0x40000800
 8003ca4:	40000c00 	.word	0x40000c00
 8003ca8:	40014000 	.word	0x40014000
 8003cac:	40014400 	.word	0x40014400
 8003cb0:	40014800 	.word	0x40014800

08003cb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	f023 0201 	bic.w	r2, r3, #1
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f023 030a 	bic.w	r3, r3, #10
 8003cf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	621a      	str	r2, [r3, #32]
}
 8003d06:	bf00      	nop
 8003d08:	371c      	adds	r7, #28
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b087      	sub	sp, #28
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	60f8      	str	r0, [r7, #12]
 8003d1a:	60b9      	str	r1, [r7, #8]
 8003d1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	f023 0210 	bic.w	r2, r3, #16
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	031b      	lsls	r3, r3, #12
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	011b      	lsls	r3, r3, #4
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	621a      	str	r2, [r3, #32]
}
 8003d66:	bf00      	nop
 8003d68:	371c      	adds	r7, #28
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b085      	sub	sp, #20
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f043 0307 	orr.w	r3, r3, #7
 8003d94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	609a      	str	r2, [r3, #8]
}
 8003d9c:	bf00      	nop
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b087      	sub	sp, #28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
 8003db4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	021a      	lsls	r2, r3, #8
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	609a      	str	r2, [r3, #8]
}
 8003ddc:	bf00      	nop
 8003dde:	371c      	adds	r7, #28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <__NVIC_SetPriority>:
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	4603      	mov	r3, r0
 8003e18:	6039      	str	r1, [r7, #0]
 8003e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	db0a      	blt.n	8003e3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	490c      	ldr	r1, [pc, #48]	; (8003e5c <__NVIC_SetPriority+0x4c>)
 8003e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2e:	0112      	lsls	r2, r2, #4
 8003e30:	b2d2      	uxtb	r2, r2
 8003e32:	440b      	add	r3, r1
 8003e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003e38:	e00a      	b.n	8003e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	4908      	ldr	r1, [pc, #32]	; (8003e60 <__NVIC_SetPriority+0x50>)
 8003e40:	79fb      	ldrb	r3, [r7, #7]
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	3b04      	subs	r3, #4
 8003e48:	0112      	lsls	r2, r2, #4
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	761a      	strb	r2, [r3, #24]
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	e000e100 	.word	0xe000e100
 8003e60:	e000ed00 	.word	0xe000ed00

08003e64 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003e68:	2100      	movs	r1, #0
 8003e6a:	f06f 0004 	mvn.w	r0, #4
 8003e6e:	f7ff ffcf 	bl	8003e10 <__NVIC_SetPriority>
#endif
}
 8003e72:	bf00      	nop
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e7e:	f3ef 8305 	mrs	r3, IPSR
 8003e82:	603b      	str	r3, [r7, #0]
  return(result);
 8003e84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003e8a:	f06f 0305 	mvn.w	r3, #5
 8003e8e:	607b      	str	r3, [r7, #4]
 8003e90:	e00c      	b.n	8003eac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003e92:	4b0a      	ldr	r3, [pc, #40]	; (8003ebc <osKernelInitialize+0x44>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d105      	bne.n	8003ea6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003e9a:	4b08      	ldr	r3, [pc, #32]	; (8003ebc <osKernelInitialize+0x44>)
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	607b      	str	r3, [r7, #4]
 8003ea4:	e002      	b.n	8003eac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eaa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003eac:	687b      	ldr	r3, [r7, #4]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	200001b8 	.word	0x200001b8

08003ec0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ec6:	f3ef 8305 	mrs	r3, IPSR
 8003eca:	603b      	str	r3, [r7, #0]
  return(result);
 8003ecc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <osKernelStart+0x1a>
    stat = osErrorISR;
 8003ed2:	f06f 0305 	mvn.w	r3, #5
 8003ed6:	607b      	str	r3, [r7, #4]
 8003ed8:	e010      	b.n	8003efc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003eda:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <osKernelStart+0x48>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d109      	bne.n	8003ef6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003ee2:	f7ff ffbf 	bl	8003e64 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003ee6:	4b08      	ldr	r3, [pc, #32]	; (8003f08 <osKernelStart+0x48>)
 8003ee8:	2202      	movs	r2, #2
 8003eea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003eec:	f001 fb9e 	bl	800562c <vTaskStartScheduler>
      stat = osOK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	607b      	str	r3, [r7, #4]
 8003ef4:	e002      	b.n	8003efc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8003efa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003efc:	687b      	ldr	r3, [r7, #4]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	200001b8 	.word	0x200001b8

08003f0c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08e      	sub	sp, #56	; 0x38
 8003f10:	af04      	add	r7, sp, #16
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f1c:	f3ef 8305 	mrs	r3, IPSR
 8003f20:	617b      	str	r3, [r7, #20]
  return(result);
 8003f22:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d17e      	bne.n	8004026 <osThreadNew+0x11a>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d07b      	beq.n	8004026 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003f2e:	2380      	movs	r3, #128	; 0x80
 8003f30:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003f32:	2318      	movs	r3, #24
 8003f34:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003f36:	2300      	movs	r3, #0
 8003f38:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f3e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d045      	beq.n	8003fd2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d002      	beq.n	8003f54 <osThreadNew+0x48>
        name = attr->name;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d002      	beq.n	8003f62 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d008      	beq.n	8003f7a <osThreadNew+0x6e>
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	2b38      	cmp	r3, #56	; 0x38
 8003f6c:	d805      	bhi.n	8003f7a <osThreadNew+0x6e>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <osThreadNew+0x72>
        return (NULL);
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	e054      	b.n	8004028 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	089b      	lsrs	r3, r3, #2
 8003f8c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00e      	beq.n	8003fb4 <osThreadNew+0xa8>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	2bbb      	cmp	r3, #187	; 0xbb
 8003f9c:	d90a      	bls.n	8003fb4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d006      	beq.n	8003fb4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <osThreadNew+0xa8>
        mem = 1;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	61bb      	str	r3, [r7, #24]
 8003fb2:	e010      	b.n	8003fd6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10c      	bne.n	8003fd6 <osThreadNew+0xca>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d108      	bne.n	8003fd6 <osThreadNew+0xca>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d104      	bne.n	8003fd6 <osThreadNew+0xca>
          mem = 0;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	61bb      	str	r3, [r7, #24]
 8003fd0:	e001      	b.n	8003fd6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d110      	bne.n	8003ffe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003fe4:	9202      	str	r2, [sp, #8]
 8003fe6:	9301      	str	r3, [sp, #4]
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	6a3a      	ldr	r2, [r7, #32]
 8003ff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f001 f92e 	bl	8005254 <xTaskCreateStatic>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	613b      	str	r3, [r7, #16]
 8003ffc:	e013      	b.n	8004026 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d110      	bne.n	8004026 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	b29a      	uxth	r2, r3
 8004008:	f107 0310 	add.w	r3, r7, #16
 800400c:	9301      	str	r3, [sp, #4]
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f001 f979 	bl	800530e <xTaskCreate>
 800401c:	4603      	mov	r3, r0
 800401e:	2b01      	cmp	r3, #1
 8004020:	d001      	beq.n	8004026 <osThreadNew+0x11a>
            hTask = NULL;
 8004022:	2300      	movs	r3, #0
 8004024:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004026:	693b      	ldr	r3, [r7, #16]
}
 8004028:	4618      	mov	r0, r3
 800402a:	3728      	adds	r7, #40	; 0x28
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004038:	f3ef 8305 	mrs	r3, IPSR
 800403c:	60bb      	str	r3, [r7, #8]
  return(result);
 800403e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <osDelay+0x1c>
    stat = osErrorISR;
 8004044:	f06f 0305 	mvn.w	r3, #5
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	e007      	b.n	800405c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800404c:	2300      	movs	r3, #0
 800404e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d002      	beq.n	800405c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f001 fab4 	bl	80055c4 <vTaskDelay>
    }
  }

  return (stat);
 800405c:	68fb      	ldr	r3, [r7, #12]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004066:	b580      	push	{r7, lr}
 8004068:	b088      	sub	sp, #32
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800406e:	2300      	movs	r3, #0
 8004070:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004072:	f3ef 8305 	mrs	r3, IPSR
 8004076:	60bb      	str	r3, [r7, #8]
  return(result);
 8004078:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800407a:	2b00      	cmp	r3, #0
 800407c:	d174      	bne.n	8004168 <osMutexNew+0x102>
    if (attr != NULL) {
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <osMutexNew+0x26>
      type = attr->attr_bits;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	61bb      	str	r3, [r7, #24]
 800408a:	e001      	b.n	8004090 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800408c:	2300      	movs	r3, #0
 800408e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <osMutexNew+0x3a>
      rmtx = 1U;
 800409a:	2301      	movs	r3, #1
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	e001      	b.n	80040a4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d15c      	bne.n	8004168 <osMutexNew+0x102>
      mem = -1;
 80040ae:	f04f 33ff 	mov.w	r3, #4294967295
 80040b2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d015      	beq.n	80040e6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d006      	beq.n	80040d0 <osMutexNew+0x6a>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	2b4f      	cmp	r3, #79	; 0x4f
 80040c8:	d902      	bls.n	80040d0 <osMutexNew+0x6a>
          mem = 1;
 80040ca:	2301      	movs	r3, #1
 80040cc:	613b      	str	r3, [r7, #16]
 80040ce:	e00c      	b.n	80040ea <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d108      	bne.n	80040ea <osMutexNew+0x84>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d104      	bne.n	80040ea <osMutexNew+0x84>
            mem = 0;
 80040e0:	2300      	movs	r3, #0
 80040e2:	613b      	str	r3, [r7, #16]
 80040e4:	e001      	b.n	80040ea <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80040e6:	2300      	movs	r3, #0
 80040e8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d112      	bne.n	8004116 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d007      	beq.n	8004106 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	4619      	mov	r1, r3
 80040fc:	2004      	movs	r0, #4
 80040fe:	f000 fb18 	bl	8004732 <xQueueCreateMutexStatic>
 8004102:	61f8      	str	r0, [r7, #28]
 8004104:	e016      	b.n	8004134 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	4619      	mov	r1, r3
 800410c:	2001      	movs	r0, #1
 800410e:	f000 fb10 	bl	8004732 <xQueueCreateMutexStatic>
 8004112:	61f8      	str	r0, [r7, #28]
 8004114:	e00e      	b.n	8004134 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10b      	bne.n	8004134 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d004      	beq.n	800412c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004122:	2004      	movs	r0, #4
 8004124:	f000 faed 	bl	8004702 <xQueueCreateMutex>
 8004128:	61f8      	str	r0, [r7, #28]
 800412a:	e003      	b.n	8004134 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800412c:	2001      	movs	r0, #1
 800412e:	f000 fae8 	bl	8004702 <xQueueCreateMutex>
 8004132:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00c      	beq.n	8004154 <osMutexNew+0xee>
        if (attr != NULL) {
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <osMutexNew+0xe2>
          name = attr->name;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	e001      	b.n	800414c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004148:	2300      	movs	r3, #0
 800414a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800414c:	68f9      	ldr	r1, [r7, #12]
 800414e:	69f8      	ldr	r0, [r7, #28]
 8004150:	f001 f822 	bl	8005198 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d006      	beq.n	8004168 <osMutexNew+0x102>
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d003      	beq.n	8004168 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004168:	69fb      	ldr	r3, [r7, #28]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3720      	adds	r7, #32
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004172:	b580      	push	{r7, lr}
 8004174:	b086      	sub	sp, #24
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
 800417a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f023 0301 	bic.w	r3, r3, #1
 8004182:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800418c:	2300      	movs	r3, #0
 800418e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004190:	f3ef 8305 	mrs	r3, IPSR
 8004194:	60bb      	str	r3, [r7, #8]
  return(result);
 8004196:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800419c:	f06f 0305 	mvn.w	r3, #5
 80041a0:	617b      	str	r3, [r7, #20]
 80041a2:	e02c      	b.n	80041fe <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d103      	bne.n	80041b2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80041aa:	f06f 0303 	mvn.w	r3, #3
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	e025      	b.n	80041fe <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d011      	beq.n	80041dc <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80041b8:	6839      	ldr	r1, [r7, #0]
 80041ba:	6938      	ldr	r0, [r7, #16]
 80041bc:	f000 fb08 	bl	80047d0 <xQueueTakeMutexRecursive>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d01b      	beq.n	80041fe <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d003      	beq.n	80041d4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80041cc:	f06f 0301 	mvn.w	r3, #1
 80041d0:	617b      	str	r3, [r7, #20]
 80041d2:	e014      	b.n	80041fe <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80041d4:	f06f 0302 	mvn.w	r3, #2
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	e010      	b.n	80041fe <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80041dc:	6839      	ldr	r1, [r7, #0]
 80041de:	6938      	ldr	r0, [r7, #16]
 80041e0:	f000 fda6 	bl	8004d30 <xQueueSemaphoreTake>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d009      	beq.n	80041fe <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80041f0:	f06f 0301 	mvn.w	r3, #1
 80041f4:	617b      	str	r3, [r7, #20]
 80041f6:	e002      	b.n	80041fe <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80041f8:	f06f 0302 	mvn.w	r3, #2
 80041fc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80041fe:	697b      	ldr	r3, [r7, #20]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f023 0301 	bic.w	r3, r3, #1
 8004216:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004220:	2300      	movs	r3, #0
 8004222:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004224:	f3ef 8305 	mrs	r3, IPSR
 8004228:	60bb      	str	r3, [r7, #8]
  return(result);
 800422a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <osMutexRelease+0x30>
    stat = osErrorISR;
 8004230:	f06f 0305 	mvn.w	r3, #5
 8004234:	617b      	str	r3, [r7, #20]
 8004236:	e01f      	b.n	8004278 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d103      	bne.n	8004246 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800423e:	f06f 0303 	mvn.w	r3, #3
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	e018      	b.n	8004278 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d009      	beq.n	8004260 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800424c:	6938      	ldr	r0, [r7, #16]
 800424e:	f000 fa8b 	bl	8004768 <xQueueGiveMutexRecursive>
 8004252:	4603      	mov	r3, r0
 8004254:	2b01      	cmp	r3, #1
 8004256:	d00f      	beq.n	8004278 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004258:	f06f 0302 	mvn.w	r3, #2
 800425c:	617b      	str	r3, [r7, #20]
 800425e:	e00b      	b.n	8004278 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004260:	2300      	movs	r3, #0
 8004262:	2200      	movs	r2, #0
 8004264:	2100      	movs	r1, #0
 8004266:	6938      	ldr	r0, [r7, #16]
 8004268:	f000 fae8 	bl	800483c <xQueueGenericSend>
 800426c:	4603      	mov	r3, r0
 800426e:	2b01      	cmp	r3, #1
 8004270:	d002      	beq.n	8004278 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004272:	f06f 0302 	mvn.w	r3, #2
 8004276:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004278:	697b      	ldr	r3, [r7, #20]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3718      	adds	r7, #24
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
	...

08004284 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4a07      	ldr	r2, [pc, #28]	; (80042b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8004294:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	4a06      	ldr	r2, [pc, #24]	; (80042b4 <vApplicationGetIdleTaskMemory+0x30>)
 800429a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2280      	movs	r2, #128	; 0x80
 80042a0:	601a      	str	r2, [r3, #0]
}
 80042a2:	bf00      	nop
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	200001bc 	.word	0x200001bc
 80042b4:	20000278 	.word	0x20000278

080042b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4a07      	ldr	r2, [pc, #28]	; (80042e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80042c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	4a06      	ldr	r2, [pc, #24]	; (80042e8 <vApplicationGetTimerTaskMemory+0x30>)
 80042ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042d6:	601a      	str	r2, [r3, #0]
}
 80042d8:	bf00      	nop
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	20000478 	.word	0x20000478
 80042e8:	20000534 	.word	0x20000534

080042ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f103 0208 	add.w	r2, r3, #8
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f04f 32ff 	mov.w	r2, #4294967295
 8004304:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f103 0208 	add.w	r2, r3, #8
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f103 0208 	add.w	r2, r3, #8
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004346:	b480      	push	{r7}
 8004348:	b085      	sub	sp, #20
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
 800434e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	601a      	str	r2, [r3, #0]
}
 8004382:	bf00      	nop
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800438e:	b480      	push	{r7}
 8004390:	b085      	sub	sp, #20
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a4:	d103      	bne.n	80043ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	e00c      	b.n	80043c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3308      	adds	r3, #8
 80043b2:	60fb      	str	r3, [r7, #12]
 80043b4:	e002      	b.n	80043bc <vListInsert+0x2e>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d2f6      	bcs.n	80043b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	1c5a      	adds	r2, r3, #1
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	601a      	str	r2, [r3, #0]
}
 80043f4:	bf00      	nop
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6892      	ldr	r2, [r2, #8]
 8004416:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	6852      	ldr	r2, [r2, #4]
 8004420:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	429a      	cmp	r2, r3
 800442a:	d103      	bne.n	8004434 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	1e5a      	subs	r2, r3, #1
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10a      	bne.n	800447e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800447a:	bf00      	nop
 800447c:	e7fe      	b.n	800447c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800447e:	f002 fb99 	bl	8006bb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448a:	68f9      	ldr	r1, [r7, #12]
 800448c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800448e:	fb01 f303 	mul.w	r3, r1, r3
 8004492:	441a      	add	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ae:	3b01      	subs	r3, #1
 80044b0:	68f9      	ldr	r1, [r7, #12]
 80044b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044b4:	fb01 f303 	mul.w	r3, r1, r3
 80044b8:	441a      	add	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	22ff      	movs	r2, #255	; 0xff
 80044c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	22ff      	movs	r2, #255	; 0xff
 80044ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d114      	bne.n	80044fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d01a      	beq.n	8004512 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	3310      	adds	r3, #16
 80044e0:	4618      	mov	r0, r3
 80044e2:	f001 fb3d 	bl	8005b60 <xTaskRemoveFromEventList>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d012      	beq.n	8004512 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80044ec:	4b0c      	ldr	r3, [pc, #48]	; (8004520 <xQueueGenericReset+0xcc>)
 80044ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	f3bf 8f6f 	isb	sy
 80044fc:	e009      	b.n	8004512 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	3310      	adds	r3, #16
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff fef2 	bl	80042ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	3324      	adds	r3, #36	; 0x24
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff feed 	bl	80042ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004512:	f002 fb7f 	bl	8006c14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004516:	2301      	movs	r3, #1
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	e000ed04 	.word	0xe000ed04

08004524 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004524:	b580      	push	{r7, lr}
 8004526:	b08e      	sub	sp, #56	; 0x38
 8004528:	af02      	add	r7, sp, #8
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
 8004530:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10a      	bne.n	800454e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453c:	f383 8811 	msr	BASEPRI, r3
 8004540:	f3bf 8f6f 	isb	sy
 8004544:	f3bf 8f4f 	dsb	sy
 8004548:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800454a:	bf00      	nop
 800454c:	e7fe      	b.n	800454c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10a      	bne.n	800456a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004558:	f383 8811 	msr	BASEPRI, r3
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004566:	bf00      	nop
 8004568:	e7fe      	b.n	8004568 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <xQueueGenericCreateStatic+0x52>
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <xQueueGenericCreateStatic+0x56>
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <xQueueGenericCreateStatic+0x58>
 800457a:	2300      	movs	r3, #0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10a      	bne.n	8004596 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004584:	f383 8811 	msr	BASEPRI, r3
 8004588:	f3bf 8f6f 	isb	sy
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	623b      	str	r3, [r7, #32]
}
 8004592:	bf00      	nop
 8004594:	e7fe      	b.n	8004594 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d102      	bne.n	80045a2 <xQueueGenericCreateStatic+0x7e>
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <xQueueGenericCreateStatic+0x82>
 80045a2:	2301      	movs	r3, #1
 80045a4:	e000      	b.n	80045a8 <xQueueGenericCreateStatic+0x84>
 80045a6:	2300      	movs	r3, #0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10a      	bne.n	80045c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80045ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b0:	f383 8811 	msr	BASEPRI, r3
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	f3bf 8f4f 	dsb	sy
 80045bc:	61fb      	str	r3, [r7, #28]
}
 80045be:	bf00      	nop
 80045c0:	e7fe      	b.n	80045c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80045c2:	2350      	movs	r3, #80	; 0x50
 80045c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2b50      	cmp	r3, #80	; 0x50
 80045ca:	d00a      	beq.n	80045e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80045cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	61bb      	str	r3, [r7, #24]
}
 80045de:	bf00      	nop
 80045e0:	e7fe      	b.n	80045e0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80045e2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80045e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00d      	beq.n	800460a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80045ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80045f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80045fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	4613      	mov	r3, r2
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	68b9      	ldr	r1, [r7, #8]
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 f83f 	bl	8004688 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800460a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800460c:	4618      	mov	r0, r3
 800460e:	3730      	adds	r7, #48	; 0x30
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004614:	b580      	push	{r7, lr}
 8004616:	b08a      	sub	sp, #40	; 0x28
 8004618:	af02      	add	r7, sp, #8
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	4613      	mov	r3, r2
 8004620:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10a      	bne.n	800463e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	613b      	str	r3, [r7, #16]
}
 800463a:	bf00      	nop
 800463c:	e7fe      	b.n	800463c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	fb02 f303 	mul.w	r3, r2, r3
 8004646:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	3350      	adds	r3, #80	; 0x50
 800464c:	4618      	mov	r0, r3
 800464e:	f002 fbd3 	bl	8006df8 <pvPortMalloc>
 8004652:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d011      	beq.n	800467e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	3350      	adds	r3, #80	; 0x50
 8004662:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800466c:	79fa      	ldrb	r2, [r7, #7]
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	4613      	mov	r3, r2
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	68b9      	ldr	r1, [r7, #8]
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f805 	bl	8004688 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800467e:	69bb      	ldr	r3, [r7, #24]
	}
 8004680:	4618      	mov	r0, r3
 8004682:	3720      	adds	r7, #32
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
 8004694:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d103      	bne.n	80046a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	601a      	str	r2, [r3, #0]
 80046a2:	e002      	b.n	80046aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80046b6:	2101      	movs	r1, #1
 80046b8:	69b8      	ldr	r0, [r7, #24]
 80046ba:	f7ff fecb 	bl	8004454 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	78fa      	ldrb	r2, [r7, #3]
 80046c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80046c6:	bf00      	nop
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b082      	sub	sp, #8
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00e      	beq.n	80046fa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80046ee:	2300      	movs	r3, #0
 80046f0:	2200      	movs	r2, #0
 80046f2:	2100      	movs	r1, #0
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 f8a1 	bl	800483c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80046fa:	bf00      	nop
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004702:	b580      	push	{r7, lr}
 8004704:	b086      	sub	sp, #24
 8004706:	af00      	add	r7, sp, #0
 8004708:	4603      	mov	r3, r0
 800470a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800470c:	2301      	movs	r3, #1
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	2300      	movs	r3, #0
 8004712:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004714:	79fb      	ldrb	r3, [r7, #7]
 8004716:	461a      	mov	r2, r3
 8004718:	6939      	ldr	r1, [r7, #16]
 800471a:	6978      	ldr	r0, [r7, #20]
 800471c:	f7ff ff7a 	bl	8004614 <xQueueGenericCreate>
 8004720:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f7ff ffd3 	bl	80046ce <prvInitialiseMutex>

		return xNewQueue;
 8004728:	68fb      	ldr	r3, [r7, #12]
	}
 800472a:	4618      	mov	r0, r3
 800472c:	3718      	adds	r7, #24
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004732:	b580      	push	{r7, lr}
 8004734:	b088      	sub	sp, #32
 8004736:	af02      	add	r7, sp, #8
 8004738:	4603      	mov	r3, r0
 800473a:	6039      	str	r1, [r7, #0]
 800473c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800473e:	2301      	movs	r3, #1
 8004740:	617b      	str	r3, [r7, #20]
 8004742:	2300      	movs	r3, #0
 8004744:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004746:	79fb      	ldrb	r3, [r7, #7]
 8004748:	9300      	str	r3, [sp, #0]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2200      	movs	r2, #0
 800474e:	6939      	ldr	r1, [r7, #16]
 8004750:	6978      	ldr	r0, [r7, #20]
 8004752:	f7ff fee7 	bl	8004524 <xQueueGenericCreateStatic>
 8004756:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f7ff ffb8 	bl	80046ce <prvInitialiseMutex>

		return xNewQueue;
 800475e:	68fb      	ldr	r3, [r7, #12]
	}
 8004760:	4618      	mov	r0, r3
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004768:	b590      	push	{r4, r7, lr}
 800476a:	b087      	sub	sp, #28
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10a      	bne.n	8004790 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800477a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477e:	f383 8811 	msr	BASEPRI, r3
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	60fb      	str	r3, [r7, #12]
}
 800478c:	bf00      	nop
 800478e:	e7fe      	b.n	800478e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	689c      	ldr	r4, [r3, #8]
 8004794:	f001 fba6 	bl	8005ee4 <xTaskGetCurrentTaskHandle>
 8004798:	4603      	mov	r3, r0
 800479a:	429c      	cmp	r4, r3
 800479c:	d111      	bne.n	80047c2 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	1e5a      	subs	r2, r3, #1
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d105      	bne.n	80047bc <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80047b0:	2300      	movs	r3, #0
 80047b2:	2200      	movs	r2, #0
 80047b4:	2100      	movs	r1, #0
 80047b6:	6938      	ldr	r0, [r7, #16]
 80047b8:	f000 f840 	bl	800483c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80047bc:	2301      	movs	r3, #1
 80047be:	617b      	str	r3, [r7, #20]
 80047c0:	e001      	b.n	80047c6 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80047c2:	2300      	movs	r3, #0
 80047c4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80047c6:	697b      	ldr	r3, [r7, #20]
	}
 80047c8:	4618      	mov	r0, r3
 80047ca:	371c      	adds	r7, #28
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd90      	pop	{r4, r7, pc}

080047d0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80047d0:	b590      	push	{r4, r7, lr}
 80047d2:	b087      	sub	sp, #28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10a      	bne.n	80047fa <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80047e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e8:	f383 8811 	msr	BASEPRI, r3
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	60fb      	str	r3, [r7, #12]
}
 80047f6:	bf00      	nop
 80047f8:	e7fe      	b.n	80047f8 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	689c      	ldr	r4, [r3, #8]
 80047fe:	f001 fb71 	bl	8005ee4 <xTaskGetCurrentTaskHandle>
 8004802:	4603      	mov	r3, r0
 8004804:	429c      	cmp	r4, r3
 8004806:	d107      	bne.n	8004818 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	1c5a      	adds	r2, r3, #1
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8004812:	2301      	movs	r3, #1
 8004814:	617b      	str	r3, [r7, #20]
 8004816:	e00c      	b.n	8004832 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004818:	6839      	ldr	r1, [r7, #0]
 800481a:	6938      	ldr	r0, [r7, #16]
 800481c:	f000 fa88 	bl	8004d30 <xQueueSemaphoreTake>
 8004820:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d004      	beq.n	8004832 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8004832:	697b      	ldr	r3, [r7, #20]
	}
 8004834:	4618      	mov	r0, r3
 8004836:	371c      	adds	r7, #28
 8004838:	46bd      	mov	sp, r7
 800483a:	bd90      	pop	{r4, r7, pc}

0800483c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b08e      	sub	sp, #56	; 0x38
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
 8004848:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800484a:	2300      	movs	r3, #0
 800484c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10a      	bne.n	800486e <xQueueGenericSend+0x32>
	__asm volatile
 8004858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485c:	f383 8811 	msr	BASEPRI, r3
 8004860:	f3bf 8f6f 	isb	sy
 8004864:	f3bf 8f4f 	dsb	sy
 8004868:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800486a:	bf00      	nop
 800486c:	e7fe      	b.n	800486c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d103      	bne.n	800487c <xQueueGenericSend+0x40>
 8004874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <xQueueGenericSend+0x44>
 800487c:	2301      	movs	r3, #1
 800487e:	e000      	b.n	8004882 <xQueueGenericSend+0x46>
 8004880:	2300      	movs	r3, #0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10a      	bne.n	800489c <xQueueGenericSend+0x60>
	__asm volatile
 8004886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488a:	f383 8811 	msr	BASEPRI, r3
 800488e:	f3bf 8f6f 	isb	sy
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004898:	bf00      	nop
 800489a:	e7fe      	b.n	800489a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d103      	bne.n	80048aa <xQueueGenericSend+0x6e>
 80048a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d101      	bne.n	80048ae <xQueueGenericSend+0x72>
 80048aa:	2301      	movs	r3, #1
 80048ac:	e000      	b.n	80048b0 <xQueueGenericSend+0x74>
 80048ae:	2300      	movs	r3, #0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10a      	bne.n	80048ca <xQueueGenericSend+0x8e>
	__asm volatile
 80048b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	623b      	str	r3, [r7, #32]
}
 80048c6:	bf00      	nop
 80048c8:	e7fe      	b.n	80048c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048ca:	f001 fb1b 	bl	8005f04 <xTaskGetSchedulerState>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d102      	bne.n	80048da <xQueueGenericSend+0x9e>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <xQueueGenericSend+0xa2>
 80048da:	2301      	movs	r3, #1
 80048dc:	e000      	b.n	80048e0 <xQueueGenericSend+0xa4>
 80048de:	2300      	movs	r3, #0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10a      	bne.n	80048fa <xQueueGenericSend+0xbe>
	__asm volatile
 80048e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e8:	f383 8811 	msr	BASEPRI, r3
 80048ec:	f3bf 8f6f 	isb	sy
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	61fb      	str	r3, [r7, #28]
}
 80048f6:	bf00      	nop
 80048f8:	e7fe      	b.n	80048f8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048fa:	f002 f95b 	bl	8006bb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004900:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004906:	429a      	cmp	r2, r3
 8004908:	d302      	bcc.n	8004910 <xQueueGenericSend+0xd4>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b02      	cmp	r3, #2
 800490e:	d129      	bne.n	8004964 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	68b9      	ldr	r1, [r7, #8]
 8004914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004916:	f000 fb2f 	bl	8004f78 <prvCopyDataToQueue>
 800491a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800491c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	2b00      	cmp	r3, #0
 8004922:	d010      	beq.n	8004946 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004926:	3324      	adds	r3, #36	; 0x24
 8004928:	4618      	mov	r0, r3
 800492a:	f001 f919 	bl	8005b60 <xTaskRemoveFromEventList>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d013      	beq.n	800495c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004934:	4b3f      	ldr	r3, [pc, #252]	; (8004a34 <xQueueGenericSend+0x1f8>)
 8004936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	f3bf 8f6f 	isb	sy
 8004944:	e00a      	b.n	800495c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004948:	2b00      	cmp	r3, #0
 800494a:	d007      	beq.n	800495c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800494c:	4b39      	ldr	r3, [pc, #228]	; (8004a34 <xQueueGenericSend+0x1f8>)
 800494e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800495c:	f002 f95a 	bl	8006c14 <vPortExitCritical>
				return pdPASS;
 8004960:	2301      	movs	r3, #1
 8004962:	e063      	b.n	8004a2c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d103      	bne.n	8004972 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800496a:	f002 f953 	bl	8006c14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800496e:	2300      	movs	r3, #0
 8004970:	e05c      	b.n	8004a2c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004974:	2b00      	cmp	r3, #0
 8004976:	d106      	bne.n	8004986 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004978:	f107 0314 	add.w	r3, r7, #20
 800497c:	4618      	mov	r0, r3
 800497e:	f001 f953 	bl	8005c28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004982:	2301      	movs	r3, #1
 8004984:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004986:	f002 f945 	bl	8006c14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800498a:	f000 febf 	bl	800570c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800498e:	f002 f911 	bl	8006bb4 <vPortEnterCritical>
 8004992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004994:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004998:	b25b      	sxtb	r3, r3
 800499a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499e:	d103      	bne.n	80049a8 <xQueueGenericSend+0x16c>
 80049a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049ae:	b25b      	sxtb	r3, r3
 80049b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b4:	d103      	bne.n	80049be <xQueueGenericSend+0x182>
 80049b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049be:	f002 f929 	bl	8006c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049c2:	1d3a      	adds	r2, r7, #4
 80049c4:	f107 0314 	add.w	r3, r7, #20
 80049c8:	4611      	mov	r1, r2
 80049ca:	4618      	mov	r0, r3
 80049cc:	f001 f942 	bl	8005c54 <xTaskCheckForTimeOut>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d124      	bne.n	8004a20 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80049d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049d8:	f000 fbc6 	bl	8005168 <prvIsQueueFull>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d018      	beq.n	8004a14 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80049e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e4:	3310      	adds	r3, #16
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	4611      	mov	r1, r2
 80049ea:	4618      	mov	r0, r3
 80049ec:	f001 f868 	bl	8005ac0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80049f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049f2:	f000 fb51 	bl	8005098 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80049f6:	f000 fe97 	bl	8005728 <xTaskResumeAll>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f47f af7c 	bne.w	80048fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004a02:	4b0c      	ldr	r3, [pc, #48]	; (8004a34 <xQueueGenericSend+0x1f8>)
 8004a04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	e772      	b.n	80048fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004a14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a16:	f000 fb3f 	bl	8005098 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a1a:	f000 fe85 	bl	8005728 <xTaskResumeAll>
 8004a1e:	e76c      	b.n	80048fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a22:	f000 fb39 	bl	8005098 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a26:	f000 fe7f 	bl	8005728 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3738      	adds	r7, #56	; 0x38
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	e000ed04 	.word	0xe000ed04

08004a38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b090      	sub	sp, #64	; 0x40
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
 8004a44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10a      	bne.n	8004a66 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a54:	f383 8811 	msr	BASEPRI, r3
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a62:	bf00      	nop
 8004a64:	e7fe      	b.n	8004a64 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d103      	bne.n	8004a74 <xQueueGenericSendFromISR+0x3c>
 8004a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <xQueueGenericSendFromISR+0x40>
 8004a74:	2301      	movs	r3, #1
 8004a76:	e000      	b.n	8004a7a <xQueueGenericSendFromISR+0x42>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10a      	bne.n	8004a94 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a82:	f383 8811 	msr	BASEPRI, r3
 8004a86:	f3bf 8f6f 	isb	sy
 8004a8a:	f3bf 8f4f 	dsb	sy
 8004a8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a90:	bf00      	nop
 8004a92:	e7fe      	b.n	8004a92 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d103      	bne.n	8004aa2 <xQueueGenericSendFromISR+0x6a>
 8004a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d101      	bne.n	8004aa6 <xQueueGenericSendFromISR+0x6e>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e000      	b.n	8004aa8 <xQueueGenericSendFromISR+0x70>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10a      	bne.n	8004ac2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab0:	f383 8811 	msr	BASEPRI, r3
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	623b      	str	r3, [r7, #32]
}
 8004abe:	bf00      	nop
 8004ac0:	e7fe      	b.n	8004ac0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ac2:	f002 f959 	bl	8006d78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004ac6:	f3ef 8211 	mrs	r2, BASEPRI
 8004aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ace:	f383 8811 	msr	BASEPRI, r3
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	61fa      	str	r2, [r7, #28]
 8004adc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004ade:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ae0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d302      	bcc.n	8004af4 <xQueueGenericSendFromISR+0xbc>
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d12f      	bne.n	8004b54 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b02:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	68b9      	ldr	r1, [r7, #8]
 8004b08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004b0a:	f000 fa35 	bl	8004f78 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b0e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b16:	d112      	bne.n	8004b3e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d016      	beq.n	8004b4e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b22:	3324      	adds	r3, #36	; 0x24
 8004b24:	4618      	mov	r0, r3
 8004b26:	f001 f81b 	bl	8005b60 <xTaskRemoveFromEventList>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00e      	beq.n	8004b4e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00b      	beq.n	8004b4e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	e007      	b.n	8004b4e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004b42:	3301      	adds	r3, #1
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	b25a      	sxtb	r2, r3
 8004b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004b52:	e001      	b.n	8004b58 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b54:	2300      	movs	r3, #0
 8004b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b62:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3740      	adds	r7, #64	; 0x40
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
	...

08004b70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b08c      	sub	sp, #48	; 0x30
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10a      	bne.n	8004ba0 <xQueueReceive+0x30>
	__asm volatile
 8004b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8e:	f383 8811 	msr	BASEPRI, r3
 8004b92:	f3bf 8f6f 	isb	sy
 8004b96:	f3bf 8f4f 	dsb	sy
 8004b9a:	623b      	str	r3, [r7, #32]
}
 8004b9c:	bf00      	nop
 8004b9e:	e7fe      	b.n	8004b9e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d103      	bne.n	8004bae <xQueueReceive+0x3e>
 8004ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <xQueueReceive+0x42>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e000      	b.n	8004bb4 <xQueueReceive+0x44>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10a      	bne.n	8004bce <xQueueReceive+0x5e>
	__asm volatile
 8004bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbc:	f383 8811 	msr	BASEPRI, r3
 8004bc0:	f3bf 8f6f 	isb	sy
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	61fb      	str	r3, [r7, #28]
}
 8004bca:	bf00      	nop
 8004bcc:	e7fe      	b.n	8004bcc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bce:	f001 f999 	bl	8005f04 <xTaskGetSchedulerState>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d102      	bne.n	8004bde <xQueueReceive+0x6e>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <xQueueReceive+0x72>
 8004bde:	2301      	movs	r3, #1
 8004be0:	e000      	b.n	8004be4 <xQueueReceive+0x74>
 8004be2:	2300      	movs	r3, #0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10a      	bne.n	8004bfe <xQueueReceive+0x8e>
	__asm volatile
 8004be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bec:	f383 8811 	msr	BASEPRI, r3
 8004bf0:	f3bf 8f6f 	isb	sy
 8004bf4:	f3bf 8f4f 	dsb	sy
 8004bf8:	61bb      	str	r3, [r7, #24]
}
 8004bfa:	bf00      	nop
 8004bfc:	e7fe      	b.n	8004bfc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bfe:	f001 ffd9 	bl	8006bb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c06:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d01f      	beq.n	8004c4e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c0e:	68b9      	ldr	r1, [r7, #8]
 8004c10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c12:	f000 fa1b 	bl	800504c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	1e5a      	subs	r2, r3, #1
 8004c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00f      	beq.n	8004c46 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c28:	3310      	adds	r3, #16
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 ff98 	bl	8005b60 <xTaskRemoveFromEventList>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d007      	beq.n	8004c46 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c36:	4b3d      	ldr	r3, [pc, #244]	; (8004d2c <xQueueReceive+0x1bc>)
 8004c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c46:	f001 ffe5 	bl	8006c14 <vPortExitCritical>
				return pdPASS;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e069      	b.n	8004d22 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d103      	bne.n	8004c5c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c54:	f001 ffde 	bl	8006c14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	e062      	b.n	8004d22 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d106      	bne.n	8004c70 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c62:	f107 0310 	add.w	r3, r7, #16
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 ffde 	bl	8005c28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c70:	f001 ffd0 	bl	8006c14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c74:	f000 fd4a 	bl	800570c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c78:	f001 ff9c 	bl	8006bb4 <vPortEnterCritical>
 8004c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c82:	b25b      	sxtb	r3, r3
 8004c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c88:	d103      	bne.n	8004c92 <xQueueReceive+0x122>
 8004c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c98:	b25b      	sxtb	r3, r3
 8004c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9e:	d103      	bne.n	8004ca8 <xQueueReceive+0x138>
 8004ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ca8:	f001 ffb4 	bl	8006c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cac:	1d3a      	adds	r2, r7, #4
 8004cae:	f107 0310 	add.w	r3, r7, #16
 8004cb2:	4611      	mov	r1, r2
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 ffcd 	bl	8005c54 <xTaskCheckForTimeOut>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d123      	bne.n	8004d08 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cc2:	f000 fa3b 	bl	800513c <prvIsQueueEmpty>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d017      	beq.n	8004cfc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cce:	3324      	adds	r3, #36	; 0x24
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	4611      	mov	r1, r2
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 fef3 	bl	8005ac0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004cda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cdc:	f000 f9dc 	bl	8005098 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ce0:	f000 fd22 	bl	8005728 <xTaskResumeAll>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d189      	bne.n	8004bfe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004cea:	4b10      	ldr	r3, [pc, #64]	; (8004d2c <xQueueReceive+0x1bc>)
 8004cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	f3bf 8f4f 	dsb	sy
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	e780      	b.n	8004bfe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cfe:	f000 f9cb 	bl	8005098 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d02:	f000 fd11 	bl	8005728 <xTaskResumeAll>
 8004d06:	e77a      	b.n	8004bfe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004d08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d0a:	f000 f9c5 	bl	8005098 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d0e:	f000 fd0b 	bl	8005728 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d14:	f000 fa12 	bl	800513c <prvIsQueueEmpty>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f43f af6f 	beq.w	8004bfe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3730      	adds	r7, #48	; 0x30
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	e000ed04 	.word	0xe000ed04

08004d30 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b08e      	sub	sp, #56	; 0x38
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004d42:	2300      	movs	r3, #0
 8004d44:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10a      	bne.n	8004d62 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d50:	f383 8811 	msr	BASEPRI, r3
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	f3bf 8f4f 	dsb	sy
 8004d5c:	623b      	str	r3, [r7, #32]
}
 8004d5e:	bf00      	nop
 8004d60:	e7fe      	b.n	8004d60 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6e:	f383 8811 	msr	BASEPRI, r3
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	f3bf 8f4f 	dsb	sy
 8004d7a:	61fb      	str	r3, [r7, #28]
}
 8004d7c:	bf00      	nop
 8004d7e:	e7fe      	b.n	8004d7e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d80:	f001 f8c0 	bl	8005f04 <xTaskGetSchedulerState>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d102      	bne.n	8004d90 <xQueueSemaphoreTake+0x60>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <xQueueSemaphoreTake+0x64>
 8004d90:	2301      	movs	r3, #1
 8004d92:	e000      	b.n	8004d96 <xQueueSemaphoreTake+0x66>
 8004d94:	2300      	movs	r3, #0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10a      	bne.n	8004db0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9e:	f383 8811 	msr	BASEPRI, r3
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	61bb      	str	r3, [r7, #24]
}
 8004dac:	bf00      	nop
 8004dae:	e7fe      	b.n	8004dae <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004db0:	f001 ff00 	bl	8006bb4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d024      	beq.n	8004e0a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc2:	1e5a      	subs	r2, r3, #1
 8004dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d104      	bne.n	8004dda <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004dd0:	f001 fa0e 	bl	80061f0 <pvTaskIncrementMutexHeldCount>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00f      	beq.n	8004e02 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de4:	3310      	adds	r3, #16
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 feba 	bl	8005b60 <xTaskRemoveFromEventList>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d007      	beq.n	8004e02 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004df2:	4b54      	ldr	r3, [pc, #336]	; (8004f44 <xQueueSemaphoreTake+0x214>)
 8004df4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e02:	f001 ff07 	bl	8006c14 <vPortExitCritical>
				return pdPASS;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e097      	b.n	8004f3a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d111      	bne.n	8004e34 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	617b      	str	r3, [r7, #20]
}
 8004e28:	bf00      	nop
 8004e2a:	e7fe      	b.n	8004e2a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004e2c:	f001 fef2 	bl	8006c14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e30:	2300      	movs	r3, #0
 8004e32:	e082      	b.n	8004f3a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d106      	bne.n	8004e48 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e3a:	f107 030c 	add.w	r3, r7, #12
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 fef2 	bl	8005c28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e44:	2301      	movs	r3, #1
 8004e46:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e48:	f001 fee4 	bl	8006c14 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e4c:	f000 fc5e 	bl	800570c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e50:	f001 feb0 	bl	8006bb4 <vPortEnterCritical>
 8004e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e5a:	b25b      	sxtb	r3, r3
 8004e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e60:	d103      	bne.n	8004e6a <xQueueSemaphoreTake+0x13a>
 8004e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e70:	b25b      	sxtb	r3, r3
 8004e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e76:	d103      	bne.n	8004e80 <xQueueSemaphoreTake+0x150>
 8004e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e80:	f001 fec8 	bl	8006c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e84:	463a      	mov	r2, r7
 8004e86:	f107 030c 	add.w	r3, r7, #12
 8004e8a:	4611      	mov	r1, r2
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f000 fee1 	bl	8005c54 <xTaskCheckForTimeOut>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d132      	bne.n	8004efe <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e9a:	f000 f94f 	bl	800513c <prvIsQueueEmpty>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d026      	beq.n	8004ef2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d109      	bne.n	8004ec0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004eac:	f001 fe82 	bl	8006bb4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f001 f843 	bl	8005f40 <xTaskPriorityInherit>
 8004eba:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004ebc:	f001 feaa 	bl	8006c14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec2:	3324      	adds	r3, #36	; 0x24
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 fdf9 	bl	8005ac0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ece:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ed0:	f000 f8e2 	bl	8005098 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ed4:	f000 fc28 	bl	8005728 <xTaskResumeAll>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f47f af68 	bne.w	8004db0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004ee0:	4b18      	ldr	r3, [pc, #96]	; (8004f44 <xQueueSemaphoreTake+0x214>)
 8004ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	e75e      	b.n	8004db0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004ef2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ef4:	f000 f8d0 	bl	8005098 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ef8:	f000 fc16 	bl	8005728 <xTaskResumeAll>
 8004efc:	e758      	b.n	8004db0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004efe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f00:	f000 f8ca 	bl	8005098 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f04:	f000 fc10 	bl	8005728 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f0a:	f000 f917 	bl	800513c <prvIsQueueEmpty>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f43f af4d 	beq.w	8004db0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00d      	beq.n	8004f38 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004f1c:	f001 fe4a 	bl	8006bb4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004f20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f22:	f000 f811 	bl	8004f48 <prvGetDisinheritPriorityAfterTimeout>
 8004f26:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f001 f8dc 	bl	80060ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004f34:	f001 fe6e 	bl	8006c14 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3738      	adds	r7, #56	; 0x38
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	e000ed04 	.word	0xe000ed04

08004f48 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d006      	beq.n	8004f66 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	e001      	b.n	8004f6a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004f66:	2300      	movs	r3, #0
 8004f68:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
	}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f84:	2300      	movs	r3, #0
 8004f86:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10d      	bne.n	8004fb2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d14d      	bne.n	800503a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f001 f834 	bl	8006010 <xTaskPriorityDisinherit>
 8004fa8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	609a      	str	r2, [r3, #8]
 8004fb0:	e043      	b.n	800503a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d119      	bne.n	8004fec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6858      	ldr	r0, [r3, #4]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	68b9      	ldr	r1, [r7, #8]
 8004fc4:	f002 fa36 	bl	8007434 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd0:	441a      	add	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d32b      	bcc.n	800503a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	605a      	str	r2, [r3, #4]
 8004fea:	e026      	b.n	800503a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	68d8      	ldr	r0, [r3, #12]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	68b9      	ldr	r1, [r7, #8]
 8004ff8:	f002 fa1c 	bl	8007434 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	68da      	ldr	r2, [r3, #12]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005004:	425b      	negs	r3, r3
 8005006:	441a      	add	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	68da      	ldr	r2, [r3, #12]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	429a      	cmp	r2, r3
 8005016:	d207      	bcs.n	8005028 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005020:	425b      	negs	r3, r3
 8005022:	441a      	add	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b02      	cmp	r3, #2
 800502c:	d105      	bne.n	800503a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d002      	beq.n	800503a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	3b01      	subs	r3, #1
 8005038:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	1c5a      	adds	r2, r3, #1
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005042:	697b      	ldr	r3, [r7, #20]
}
 8005044:	4618      	mov	r0, r3
 8005046:	3718      	adds	r7, #24
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505a:	2b00      	cmp	r3, #0
 800505c:	d018      	beq.n	8005090 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68da      	ldr	r2, [r3, #12]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005066:	441a      	add	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	68da      	ldr	r2, [r3, #12]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	429a      	cmp	r2, r3
 8005076:	d303      	bcc.n	8005080 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68d9      	ldr	r1, [r3, #12]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005088:	461a      	mov	r2, r3
 800508a:	6838      	ldr	r0, [r7, #0]
 800508c:	f002 f9d2 	bl	8007434 <memcpy>
	}
}
 8005090:	bf00      	nop
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80050a0:	f001 fd88 	bl	8006bb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050ac:	e011      	b.n	80050d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d012      	beq.n	80050dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	3324      	adds	r3, #36	; 0x24
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 fd50 	bl	8005b60 <xTaskRemoveFromEventList>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80050c6:	f000 fe27 	bl	8005d18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80050ca:	7bfb      	ldrb	r3, [r7, #15]
 80050cc:	3b01      	subs	r3, #1
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	dce9      	bgt.n	80050ae <prvUnlockQueue+0x16>
 80050da:	e000      	b.n	80050de <prvUnlockQueue+0x46>
					break;
 80050dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	22ff      	movs	r2, #255	; 0xff
 80050e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80050e6:	f001 fd95 	bl	8006c14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80050ea:	f001 fd63 	bl	8006bb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050f6:	e011      	b.n	800511c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d012      	beq.n	8005126 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	3310      	adds	r3, #16
 8005104:	4618      	mov	r0, r3
 8005106:	f000 fd2b 	bl	8005b60 <xTaskRemoveFromEventList>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005110:	f000 fe02 	bl	8005d18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005114:	7bbb      	ldrb	r3, [r7, #14]
 8005116:	3b01      	subs	r3, #1
 8005118:	b2db      	uxtb	r3, r3
 800511a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800511c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005120:	2b00      	cmp	r3, #0
 8005122:	dce9      	bgt.n	80050f8 <prvUnlockQueue+0x60>
 8005124:	e000      	b.n	8005128 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005126:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	22ff      	movs	r2, #255	; 0xff
 800512c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005130:	f001 fd70 	bl	8006c14 <vPortExitCritical>
}
 8005134:	bf00      	nop
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005144:	f001 fd36 	bl	8006bb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514c:	2b00      	cmp	r3, #0
 800514e:	d102      	bne.n	8005156 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005150:	2301      	movs	r3, #1
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	e001      	b.n	800515a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005156:	2300      	movs	r3, #0
 8005158:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800515a:	f001 fd5b 	bl	8006c14 <vPortExitCritical>

	return xReturn;
 800515e:	68fb      	ldr	r3, [r7, #12]
}
 8005160:	4618      	mov	r0, r3
 8005162:	3710      	adds	r7, #16
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005170:	f001 fd20 	bl	8006bb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800517c:	429a      	cmp	r2, r3
 800517e:	d102      	bne.n	8005186 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005180:	2301      	movs	r3, #1
 8005182:	60fb      	str	r3, [r7, #12]
 8005184:	e001      	b.n	800518a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005186:	2300      	movs	r3, #0
 8005188:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800518a:	f001 fd43 	bl	8006c14 <vPortExitCritical>

	return xReturn;
 800518e:	68fb      	ldr	r3, [r7, #12]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	e014      	b.n	80051d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80051a8:	4a0f      	ldr	r2, [pc, #60]	; (80051e8 <vQueueAddToRegistry+0x50>)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10b      	bne.n	80051cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80051b4:	490c      	ldr	r1, [pc, #48]	; (80051e8 <vQueueAddToRegistry+0x50>)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80051be:	4a0a      	ldr	r2, [pc, #40]	; (80051e8 <vQueueAddToRegistry+0x50>)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	4413      	add	r3, r2
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80051ca:	e006      	b.n	80051da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	3301      	adds	r3, #1
 80051d0:	60fb      	str	r3, [r7, #12]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b07      	cmp	r3, #7
 80051d6:	d9e7      	bls.n	80051a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80051d8:	bf00      	nop
 80051da:	bf00      	nop
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	20000934 	.word	0x20000934

080051ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80051fc:	f001 fcda 	bl	8006bb4 <vPortEnterCritical>
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005206:	b25b      	sxtb	r3, r3
 8005208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520c:	d103      	bne.n	8005216 <vQueueWaitForMessageRestricted+0x2a>
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800521c:	b25b      	sxtb	r3, r3
 800521e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005222:	d103      	bne.n	800522c <vQueueWaitForMessageRestricted+0x40>
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800522c:	f001 fcf2 	bl	8006c14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005234:	2b00      	cmp	r3, #0
 8005236:	d106      	bne.n	8005246 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	3324      	adds	r3, #36	; 0x24
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	68b9      	ldr	r1, [r7, #8]
 8005240:	4618      	mov	r0, r3
 8005242:	f000 fc61 	bl	8005b08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005246:	6978      	ldr	r0, [r7, #20]
 8005248:	f7ff ff26 	bl	8005098 <prvUnlockQueue>
	}
 800524c:	bf00      	nop
 800524e:	3718      	adds	r7, #24
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005254:	b580      	push	{r7, lr}
 8005256:	b08e      	sub	sp, #56	; 0x38
 8005258:	af04      	add	r7, sp, #16
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
 8005260:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10a      	bne.n	800527e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	623b      	str	r3, [r7, #32]
}
 800527a:	bf00      	nop
 800527c:	e7fe      	b.n	800527c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800527e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10a      	bne.n	800529a <xTaskCreateStatic+0x46>
	__asm volatile
 8005284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005288:	f383 8811 	msr	BASEPRI, r3
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	61fb      	str	r3, [r7, #28]
}
 8005296:	bf00      	nop
 8005298:	e7fe      	b.n	8005298 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800529a:	23bc      	movs	r3, #188	; 0xbc
 800529c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	2bbc      	cmp	r3, #188	; 0xbc
 80052a2:	d00a      	beq.n	80052ba <xTaskCreateStatic+0x66>
	__asm volatile
 80052a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a8:	f383 8811 	msr	BASEPRI, r3
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	61bb      	str	r3, [r7, #24]
}
 80052b6:	bf00      	nop
 80052b8:	e7fe      	b.n	80052b8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80052ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80052bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d01e      	beq.n	8005300 <xTaskCreateStatic+0xac>
 80052c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d01b      	beq.n	8005300 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80052d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d4:	2202      	movs	r2, #2
 80052d6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80052da:	2300      	movs	r3, #0
 80052dc:	9303      	str	r3, [sp, #12]
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	9302      	str	r3, [sp, #8]
 80052e2:	f107 0314 	add.w	r3, r7, #20
 80052e6:	9301      	str	r3, [sp, #4]
 80052e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	68b9      	ldr	r1, [r7, #8]
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f000 f850 	bl	8005398 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052fa:	f000 f8f3 	bl	80054e4 <prvAddNewTaskToReadyList>
 80052fe:	e001      	b.n	8005304 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005300:	2300      	movs	r3, #0
 8005302:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005304:	697b      	ldr	r3, [r7, #20]
	}
 8005306:	4618      	mov	r0, r3
 8005308:	3728      	adds	r7, #40	; 0x28
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800530e:	b580      	push	{r7, lr}
 8005310:	b08c      	sub	sp, #48	; 0x30
 8005312:	af04      	add	r7, sp, #16
 8005314:	60f8      	str	r0, [r7, #12]
 8005316:	60b9      	str	r1, [r7, #8]
 8005318:	603b      	str	r3, [r7, #0]
 800531a:	4613      	mov	r3, r2
 800531c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800531e:	88fb      	ldrh	r3, [r7, #6]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4618      	mov	r0, r3
 8005324:	f001 fd68 	bl	8006df8 <pvPortMalloc>
 8005328:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00e      	beq.n	800534e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005330:	20bc      	movs	r0, #188	; 0xbc
 8005332:	f001 fd61 	bl	8006df8 <pvPortMalloc>
 8005336:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	631a      	str	r2, [r3, #48]	; 0x30
 8005344:	e005      	b.n	8005352 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005346:	6978      	ldr	r0, [r7, #20]
 8005348:	f001 fe22 	bl	8006f90 <vPortFree>
 800534c:	e001      	b.n	8005352 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800534e:	2300      	movs	r3, #0
 8005350:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d017      	beq.n	8005388 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005360:	88fa      	ldrh	r2, [r7, #6]
 8005362:	2300      	movs	r3, #0
 8005364:	9303      	str	r3, [sp, #12]
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	9302      	str	r3, [sp, #8]
 800536a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536c:	9301      	str	r3, [sp, #4]
 800536e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	68b9      	ldr	r1, [r7, #8]
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 f80e 	bl	8005398 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800537c:	69f8      	ldr	r0, [r7, #28]
 800537e:	f000 f8b1 	bl	80054e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005382:	2301      	movs	r3, #1
 8005384:	61bb      	str	r3, [r7, #24]
 8005386:	e002      	b.n	800538e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005388:	f04f 33ff 	mov.w	r3, #4294967295
 800538c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800538e:	69bb      	ldr	r3, [r7, #24]
	}
 8005390:	4618      	mov	r0, r3
 8005392:	3720      	adds	r7, #32
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b088      	sub	sp, #32
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
 80053a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80053a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	461a      	mov	r2, r3
 80053b0:	21a5      	movs	r1, #165	; 0xa5
 80053b2:	f002 f84d 	bl	8007450 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80053b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80053c0:	3b01      	subs	r3, #1
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	f023 0307 	bic.w	r3, r3, #7
 80053ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	f003 0307 	and.w	r3, r3, #7
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80053da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053de:	f383 8811 	msr	BASEPRI, r3
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	617b      	str	r3, [r7, #20]
}
 80053ec:	bf00      	nop
 80053ee:	e7fe      	b.n	80053ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d01f      	beq.n	8005436 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053f6:	2300      	movs	r3, #0
 80053f8:	61fb      	str	r3, [r7, #28]
 80053fa:	e012      	b.n	8005422 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	4413      	add	r3, r2
 8005402:	7819      	ldrb	r1, [r3, #0]
 8005404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	4413      	add	r3, r2
 800540a:	3334      	adds	r3, #52	; 0x34
 800540c:	460a      	mov	r2, r1
 800540e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	4413      	add	r3, r2
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d006      	beq.n	800542a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	3301      	adds	r3, #1
 8005420:	61fb      	str	r3, [r7, #28]
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	2b0f      	cmp	r3, #15
 8005426:	d9e9      	bls.n	80053fc <prvInitialiseNewTask+0x64>
 8005428:	e000      	b.n	800542c <prvInitialiseNewTask+0x94>
			{
				break;
 800542a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800542c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542e:	2200      	movs	r2, #0
 8005430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005434:	e003      	b.n	800543e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800543e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005440:	2b37      	cmp	r3, #55	; 0x37
 8005442:	d901      	bls.n	8005448 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005444:	2337      	movs	r3, #55	; 0x37
 8005446:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800544c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800544e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005450:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005452:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005456:	2200      	movs	r2, #0
 8005458:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800545a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545c:	3304      	adds	r3, #4
 800545e:	4618      	mov	r0, r3
 8005460:	f7fe ff64 	bl	800432c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005466:	3318      	adds	r3, #24
 8005468:	4618      	mov	r0, r3
 800546a:	f7fe ff5f 	bl	800432c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800546e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005472:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005476:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800547e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005482:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005486:	2200      	movs	r2, #0
 8005488:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548e:	2200      	movs	r2, #0
 8005490:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005496:	3354      	adds	r3, #84	; 0x54
 8005498:	2260      	movs	r2, #96	; 0x60
 800549a:	2100      	movs	r1, #0
 800549c:	4618      	mov	r0, r3
 800549e:	f001 ffd7 	bl	8007450 <memset>
 80054a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a4:	4a0c      	ldr	r2, [pc, #48]	; (80054d8 <prvInitialiseNewTask+0x140>)
 80054a6:	659a      	str	r2, [r3, #88]	; 0x58
 80054a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054aa:	4a0c      	ldr	r2, [pc, #48]	; (80054dc <prvInitialiseNewTask+0x144>)
 80054ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80054ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b0:	4a0b      	ldr	r2, [pc, #44]	; (80054e0 <prvInitialiseNewTask+0x148>)
 80054b2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054b4:	683a      	ldr	r2, [r7, #0]
 80054b6:	68f9      	ldr	r1, [r7, #12]
 80054b8:	69b8      	ldr	r0, [r7, #24]
 80054ba:	f001 fa4f 	bl	800695c <pxPortInitialiseStack>
 80054be:	4602      	mov	r2, r0
 80054c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80054c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d002      	beq.n	80054d0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054d0:	bf00      	nop
 80054d2:	3720      	adds	r7, #32
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	080085a8 	.word	0x080085a8
 80054dc:	080085c8 	.word	0x080085c8
 80054e0:	08008588 	.word	0x08008588

080054e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80054ec:	f001 fb62 	bl	8006bb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80054f0:	4b2d      	ldr	r3, [pc, #180]	; (80055a8 <prvAddNewTaskToReadyList+0xc4>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3301      	adds	r3, #1
 80054f6:	4a2c      	ldr	r2, [pc, #176]	; (80055a8 <prvAddNewTaskToReadyList+0xc4>)
 80054f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80054fa:	4b2c      	ldr	r3, [pc, #176]	; (80055ac <prvAddNewTaskToReadyList+0xc8>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d109      	bne.n	8005516 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005502:	4a2a      	ldr	r2, [pc, #168]	; (80055ac <prvAddNewTaskToReadyList+0xc8>)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005508:	4b27      	ldr	r3, [pc, #156]	; (80055a8 <prvAddNewTaskToReadyList+0xc4>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d110      	bne.n	8005532 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005510:	f000 fc26 	bl	8005d60 <prvInitialiseTaskLists>
 8005514:	e00d      	b.n	8005532 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005516:	4b26      	ldr	r3, [pc, #152]	; (80055b0 <prvAddNewTaskToReadyList+0xcc>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d109      	bne.n	8005532 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800551e:	4b23      	ldr	r3, [pc, #140]	; (80055ac <prvAddNewTaskToReadyList+0xc8>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005528:	429a      	cmp	r2, r3
 800552a:	d802      	bhi.n	8005532 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800552c:	4a1f      	ldr	r2, [pc, #124]	; (80055ac <prvAddNewTaskToReadyList+0xc8>)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005532:	4b20      	ldr	r3, [pc, #128]	; (80055b4 <prvAddNewTaskToReadyList+0xd0>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	3301      	adds	r3, #1
 8005538:	4a1e      	ldr	r2, [pc, #120]	; (80055b4 <prvAddNewTaskToReadyList+0xd0>)
 800553a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800553c:	4b1d      	ldr	r3, [pc, #116]	; (80055b4 <prvAddNewTaskToReadyList+0xd0>)
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005548:	4b1b      	ldr	r3, [pc, #108]	; (80055b8 <prvAddNewTaskToReadyList+0xd4>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	429a      	cmp	r2, r3
 800554e:	d903      	bls.n	8005558 <prvAddNewTaskToReadyList+0x74>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005554:	4a18      	ldr	r2, [pc, #96]	; (80055b8 <prvAddNewTaskToReadyList+0xd4>)
 8005556:	6013      	str	r3, [r2, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800555c:	4613      	mov	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4a15      	ldr	r2, [pc, #84]	; (80055bc <prvAddNewTaskToReadyList+0xd8>)
 8005566:	441a      	add	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	3304      	adds	r3, #4
 800556c:	4619      	mov	r1, r3
 800556e:	4610      	mov	r0, r2
 8005570:	f7fe fee9 	bl	8004346 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005574:	f001 fb4e 	bl	8006c14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005578:	4b0d      	ldr	r3, [pc, #52]	; (80055b0 <prvAddNewTaskToReadyList+0xcc>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00e      	beq.n	800559e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005580:	4b0a      	ldr	r3, [pc, #40]	; (80055ac <prvAddNewTaskToReadyList+0xc8>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558a:	429a      	cmp	r2, r3
 800558c:	d207      	bcs.n	800559e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800558e:	4b0c      	ldr	r3, [pc, #48]	; (80055c0 <prvAddNewTaskToReadyList+0xdc>)
 8005590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005594:	601a      	str	r2, [r3, #0]
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800559e:	bf00      	nop
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20000e48 	.word	0x20000e48
 80055ac:	20000974 	.word	0x20000974
 80055b0:	20000e54 	.word	0x20000e54
 80055b4:	20000e64 	.word	0x20000e64
 80055b8:	20000e50 	.word	0x20000e50
 80055bc:	20000978 	.word	0x20000978
 80055c0:	e000ed04 	.word	0xe000ed04

080055c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80055cc:	2300      	movs	r3, #0
 80055ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d017      	beq.n	8005606 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80055d6:	4b13      	ldr	r3, [pc, #76]	; (8005624 <vTaskDelay+0x60>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00a      	beq.n	80055f4 <vTaskDelay+0x30>
	__asm volatile
 80055de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	60bb      	str	r3, [r7, #8]
}
 80055f0:	bf00      	nop
 80055f2:	e7fe      	b.n	80055f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80055f4:	f000 f88a 	bl	800570c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80055f8:	2100      	movs	r1, #0
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 fe0c 	bl	8006218 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005600:	f000 f892 	bl	8005728 <xTaskResumeAll>
 8005604:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d107      	bne.n	800561c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800560c:	4b06      	ldr	r3, [pc, #24]	; (8005628 <vTaskDelay+0x64>)
 800560e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800561c:	bf00      	nop
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	20000e70 	.word	0x20000e70
 8005628:	e000ed04 	.word	0xe000ed04

0800562c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b08a      	sub	sp, #40	; 0x28
 8005630:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005632:	2300      	movs	r3, #0
 8005634:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005636:	2300      	movs	r3, #0
 8005638:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800563a:	463a      	mov	r2, r7
 800563c:	1d39      	adds	r1, r7, #4
 800563e:	f107 0308 	add.w	r3, r7, #8
 8005642:	4618      	mov	r0, r3
 8005644:	f7fe fe1e 	bl	8004284 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005648:	6839      	ldr	r1, [r7, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	9202      	str	r2, [sp, #8]
 8005650:	9301      	str	r3, [sp, #4]
 8005652:	2300      	movs	r3, #0
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	2300      	movs	r3, #0
 8005658:	460a      	mov	r2, r1
 800565a:	4924      	ldr	r1, [pc, #144]	; (80056ec <vTaskStartScheduler+0xc0>)
 800565c:	4824      	ldr	r0, [pc, #144]	; (80056f0 <vTaskStartScheduler+0xc4>)
 800565e:	f7ff fdf9 	bl	8005254 <xTaskCreateStatic>
 8005662:	4603      	mov	r3, r0
 8005664:	4a23      	ldr	r2, [pc, #140]	; (80056f4 <vTaskStartScheduler+0xc8>)
 8005666:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005668:	4b22      	ldr	r3, [pc, #136]	; (80056f4 <vTaskStartScheduler+0xc8>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d002      	beq.n	8005676 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005670:	2301      	movs	r3, #1
 8005672:	617b      	str	r3, [r7, #20]
 8005674:	e001      	b.n	800567a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005676:	2300      	movs	r3, #0
 8005678:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d102      	bne.n	8005686 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005680:	f000 fe1e 	bl	80062c0 <xTimerCreateTimerTask>
 8005684:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d11b      	bne.n	80056c4 <vTaskStartScheduler+0x98>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	613b      	str	r3, [r7, #16]
}
 800569e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80056a0:	4b15      	ldr	r3, [pc, #84]	; (80056f8 <vTaskStartScheduler+0xcc>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	3354      	adds	r3, #84	; 0x54
 80056a6:	4a15      	ldr	r2, [pc, #84]	; (80056fc <vTaskStartScheduler+0xd0>)
 80056a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80056aa:	4b15      	ldr	r3, [pc, #84]	; (8005700 <vTaskStartScheduler+0xd4>)
 80056ac:	f04f 32ff 	mov.w	r2, #4294967295
 80056b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80056b2:	4b14      	ldr	r3, [pc, #80]	; (8005704 <vTaskStartScheduler+0xd8>)
 80056b4:	2201      	movs	r2, #1
 80056b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80056b8:	4b13      	ldr	r3, [pc, #76]	; (8005708 <vTaskStartScheduler+0xdc>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80056be:	f001 f9d7 	bl	8006a70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80056c2:	e00e      	b.n	80056e2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ca:	d10a      	bne.n	80056e2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80056cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d0:	f383 8811 	msr	BASEPRI, r3
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	60fb      	str	r3, [r7, #12]
}
 80056de:	bf00      	nop
 80056e0:	e7fe      	b.n	80056e0 <vTaskStartScheduler+0xb4>
}
 80056e2:	bf00      	nop
 80056e4:	3718      	adds	r7, #24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	08008494 	.word	0x08008494
 80056f0:	08005d31 	.word	0x08005d31
 80056f4:	20000e6c 	.word	0x20000e6c
 80056f8:	20000974 	.word	0x20000974
 80056fc:	20000010 	.word	0x20000010
 8005700:	20000e68 	.word	0x20000e68
 8005704:	20000e54 	.word	0x20000e54
 8005708:	20000e4c 	.word	0x20000e4c

0800570c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800570c:	b480      	push	{r7}
 800570e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005710:	4b04      	ldr	r3, [pc, #16]	; (8005724 <vTaskSuspendAll+0x18>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3301      	adds	r3, #1
 8005716:	4a03      	ldr	r2, [pc, #12]	; (8005724 <vTaskSuspendAll+0x18>)
 8005718:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800571a:	bf00      	nop
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	20000e70 	.word	0x20000e70

08005728 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800572e:	2300      	movs	r3, #0
 8005730:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005732:	2300      	movs	r3, #0
 8005734:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005736:	4b42      	ldr	r3, [pc, #264]	; (8005840 <xTaskResumeAll+0x118>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10a      	bne.n	8005754 <xTaskResumeAll+0x2c>
	__asm volatile
 800573e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	603b      	str	r3, [r7, #0]
}
 8005750:	bf00      	nop
 8005752:	e7fe      	b.n	8005752 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005754:	f001 fa2e 	bl	8006bb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005758:	4b39      	ldr	r3, [pc, #228]	; (8005840 <xTaskResumeAll+0x118>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	3b01      	subs	r3, #1
 800575e:	4a38      	ldr	r2, [pc, #224]	; (8005840 <xTaskResumeAll+0x118>)
 8005760:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005762:	4b37      	ldr	r3, [pc, #220]	; (8005840 <xTaskResumeAll+0x118>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d162      	bne.n	8005830 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800576a:	4b36      	ldr	r3, [pc, #216]	; (8005844 <xTaskResumeAll+0x11c>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d05e      	beq.n	8005830 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005772:	e02f      	b.n	80057d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005774:	4b34      	ldr	r3, [pc, #208]	; (8005848 <xTaskResumeAll+0x120>)
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	3318      	adds	r3, #24
 8005780:	4618      	mov	r0, r3
 8005782:	f7fe fe3d 	bl	8004400 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	3304      	adds	r3, #4
 800578a:	4618      	mov	r0, r3
 800578c:	f7fe fe38 	bl	8004400 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005794:	4b2d      	ldr	r3, [pc, #180]	; (800584c <xTaskResumeAll+0x124>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	429a      	cmp	r2, r3
 800579a:	d903      	bls.n	80057a4 <xTaskResumeAll+0x7c>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a0:	4a2a      	ldr	r2, [pc, #168]	; (800584c <xTaskResumeAll+0x124>)
 80057a2:	6013      	str	r3, [r2, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a8:	4613      	mov	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4a27      	ldr	r2, [pc, #156]	; (8005850 <xTaskResumeAll+0x128>)
 80057b2:	441a      	add	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	3304      	adds	r3, #4
 80057b8:	4619      	mov	r1, r3
 80057ba:	4610      	mov	r0, r2
 80057bc:	f7fe fdc3 	bl	8004346 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c4:	4b23      	ldr	r3, [pc, #140]	; (8005854 <xTaskResumeAll+0x12c>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d302      	bcc.n	80057d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80057ce:	4b22      	ldr	r3, [pc, #136]	; (8005858 <xTaskResumeAll+0x130>)
 80057d0:	2201      	movs	r2, #1
 80057d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057d4:	4b1c      	ldr	r3, [pc, #112]	; (8005848 <xTaskResumeAll+0x120>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1cb      	bne.n	8005774 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80057e2:	f000 fb5f 	bl	8005ea4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80057e6:	4b1d      	ldr	r3, [pc, #116]	; (800585c <xTaskResumeAll+0x134>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d010      	beq.n	8005814 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80057f2:	f000 f847 	bl	8005884 <xTaskIncrementTick>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80057fc:	4b16      	ldr	r3, [pc, #88]	; (8005858 <xTaskResumeAll+0x130>)
 80057fe:	2201      	movs	r2, #1
 8005800:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	3b01      	subs	r3, #1
 8005806:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1f1      	bne.n	80057f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800580e:	4b13      	ldr	r3, [pc, #76]	; (800585c <xTaskResumeAll+0x134>)
 8005810:	2200      	movs	r2, #0
 8005812:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005814:	4b10      	ldr	r3, [pc, #64]	; (8005858 <xTaskResumeAll+0x130>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d009      	beq.n	8005830 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800581c:	2301      	movs	r3, #1
 800581e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005820:	4b0f      	ldr	r3, [pc, #60]	; (8005860 <xTaskResumeAll+0x138>)
 8005822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005830:	f001 f9f0 	bl	8006c14 <vPortExitCritical>

	return xAlreadyYielded;
 8005834:	68bb      	ldr	r3, [r7, #8]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20000e70 	.word	0x20000e70
 8005844:	20000e48 	.word	0x20000e48
 8005848:	20000e08 	.word	0x20000e08
 800584c:	20000e50 	.word	0x20000e50
 8005850:	20000978 	.word	0x20000978
 8005854:	20000974 	.word	0x20000974
 8005858:	20000e5c 	.word	0x20000e5c
 800585c:	20000e58 	.word	0x20000e58
 8005860:	e000ed04 	.word	0xe000ed04

08005864 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800586a:	4b05      	ldr	r3, [pc, #20]	; (8005880 <xTaskGetTickCount+0x1c>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005870:	687b      	ldr	r3, [r7, #4]
}
 8005872:	4618      	mov	r0, r3
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	20000e4c 	.word	0x20000e4c

08005884 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800588a:	2300      	movs	r3, #0
 800588c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800588e:	4b4f      	ldr	r3, [pc, #316]	; (80059cc <xTaskIncrementTick+0x148>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	f040 808f 	bne.w	80059b6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005898:	4b4d      	ldr	r3, [pc, #308]	; (80059d0 <xTaskIncrementTick+0x14c>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	3301      	adds	r3, #1
 800589e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80058a0:	4a4b      	ldr	r2, [pc, #300]	; (80059d0 <xTaskIncrementTick+0x14c>)
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d120      	bne.n	80058ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80058ac:	4b49      	ldr	r3, [pc, #292]	; (80059d4 <xTaskIncrementTick+0x150>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00a      	beq.n	80058cc <xTaskIncrementTick+0x48>
	__asm volatile
 80058b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ba:	f383 8811 	msr	BASEPRI, r3
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	f3bf 8f4f 	dsb	sy
 80058c6:	603b      	str	r3, [r7, #0]
}
 80058c8:	bf00      	nop
 80058ca:	e7fe      	b.n	80058ca <xTaskIncrementTick+0x46>
 80058cc:	4b41      	ldr	r3, [pc, #260]	; (80059d4 <xTaskIncrementTick+0x150>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	60fb      	str	r3, [r7, #12]
 80058d2:	4b41      	ldr	r3, [pc, #260]	; (80059d8 <xTaskIncrementTick+0x154>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a3f      	ldr	r2, [pc, #252]	; (80059d4 <xTaskIncrementTick+0x150>)
 80058d8:	6013      	str	r3, [r2, #0]
 80058da:	4a3f      	ldr	r2, [pc, #252]	; (80059d8 <xTaskIncrementTick+0x154>)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6013      	str	r3, [r2, #0]
 80058e0:	4b3e      	ldr	r3, [pc, #248]	; (80059dc <xTaskIncrementTick+0x158>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	3301      	adds	r3, #1
 80058e6:	4a3d      	ldr	r2, [pc, #244]	; (80059dc <xTaskIncrementTick+0x158>)
 80058e8:	6013      	str	r3, [r2, #0]
 80058ea:	f000 fadb 	bl	8005ea4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80058ee:	4b3c      	ldr	r3, [pc, #240]	; (80059e0 <xTaskIncrementTick+0x15c>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d349      	bcc.n	800598c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058f8:	4b36      	ldr	r3, [pc, #216]	; (80059d4 <xTaskIncrementTick+0x150>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d104      	bne.n	800590c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005902:	4b37      	ldr	r3, [pc, #220]	; (80059e0 <xTaskIncrementTick+0x15c>)
 8005904:	f04f 32ff 	mov.w	r2, #4294967295
 8005908:	601a      	str	r2, [r3, #0]
					break;
 800590a:	e03f      	b.n	800598c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800590c:	4b31      	ldr	r3, [pc, #196]	; (80059d4 <xTaskIncrementTick+0x150>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	429a      	cmp	r2, r3
 8005922:	d203      	bcs.n	800592c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005924:	4a2e      	ldr	r2, [pc, #184]	; (80059e0 <xTaskIncrementTick+0x15c>)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800592a:	e02f      	b.n	800598c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	3304      	adds	r3, #4
 8005930:	4618      	mov	r0, r3
 8005932:	f7fe fd65 	bl	8004400 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593a:	2b00      	cmp	r3, #0
 800593c:	d004      	beq.n	8005948 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	3318      	adds	r3, #24
 8005942:	4618      	mov	r0, r3
 8005944:	f7fe fd5c 	bl	8004400 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800594c:	4b25      	ldr	r3, [pc, #148]	; (80059e4 <xTaskIncrementTick+0x160>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	429a      	cmp	r2, r3
 8005952:	d903      	bls.n	800595c <xTaskIncrementTick+0xd8>
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005958:	4a22      	ldr	r2, [pc, #136]	; (80059e4 <xTaskIncrementTick+0x160>)
 800595a:	6013      	str	r3, [r2, #0]
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005960:	4613      	mov	r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4413      	add	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4a1f      	ldr	r2, [pc, #124]	; (80059e8 <xTaskIncrementTick+0x164>)
 800596a:	441a      	add	r2, r3
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	3304      	adds	r3, #4
 8005970:	4619      	mov	r1, r3
 8005972:	4610      	mov	r0, r2
 8005974:	f7fe fce7 	bl	8004346 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800597c:	4b1b      	ldr	r3, [pc, #108]	; (80059ec <xTaskIncrementTick+0x168>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005982:	429a      	cmp	r2, r3
 8005984:	d3b8      	bcc.n	80058f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005986:	2301      	movs	r3, #1
 8005988:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800598a:	e7b5      	b.n	80058f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800598c:	4b17      	ldr	r3, [pc, #92]	; (80059ec <xTaskIncrementTick+0x168>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005992:	4915      	ldr	r1, [pc, #84]	; (80059e8 <xTaskIncrementTick+0x164>)
 8005994:	4613      	mov	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	440b      	add	r3, r1
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d901      	bls.n	80059a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80059a4:	2301      	movs	r3, #1
 80059a6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80059a8:	4b11      	ldr	r3, [pc, #68]	; (80059f0 <xTaskIncrementTick+0x16c>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d007      	beq.n	80059c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80059b0:	2301      	movs	r3, #1
 80059b2:	617b      	str	r3, [r7, #20]
 80059b4:	e004      	b.n	80059c0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80059b6:	4b0f      	ldr	r3, [pc, #60]	; (80059f4 <xTaskIncrementTick+0x170>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	3301      	adds	r3, #1
 80059bc:	4a0d      	ldr	r2, [pc, #52]	; (80059f4 <xTaskIncrementTick+0x170>)
 80059be:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80059c0:	697b      	ldr	r3, [r7, #20]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3718      	adds	r7, #24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	20000e70 	.word	0x20000e70
 80059d0:	20000e4c 	.word	0x20000e4c
 80059d4:	20000e00 	.word	0x20000e00
 80059d8:	20000e04 	.word	0x20000e04
 80059dc:	20000e60 	.word	0x20000e60
 80059e0:	20000e68 	.word	0x20000e68
 80059e4:	20000e50 	.word	0x20000e50
 80059e8:	20000978 	.word	0x20000978
 80059ec:	20000974 	.word	0x20000974
 80059f0:	20000e5c 	.word	0x20000e5c
 80059f4:	20000e58 	.word	0x20000e58

080059f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80059fe:	4b2a      	ldr	r3, [pc, #168]	; (8005aa8 <vTaskSwitchContext+0xb0>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a06:	4b29      	ldr	r3, [pc, #164]	; (8005aac <vTaskSwitchContext+0xb4>)
 8005a08:	2201      	movs	r2, #1
 8005a0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a0c:	e046      	b.n	8005a9c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005a0e:	4b27      	ldr	r3, [pc, #156]	; (8005aac <vTaskSwitchContext+0xb4>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a14:	4b26      	ldr	r3, [pc, #152]	; (8005ab0 <vTaskSwitchContext+0xb8>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	60fb      	str	r3, [r7, #12]
 8005a1a:	e010      	b.n	8005a3e <vTaskSwitchContext+0x46>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10a      	bne.n	8005a38 <vTaskSwitchContext+0x40>
	__asm volatile
 8005a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a26:	f383 8811 	msr	BASEPRI, r3
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	607b      	str	r3, [r7, #4]
}
 8005a34:	bf00      	nop
 8005a36:	e7fe      	b.n	8005a36 <vTaskSwitchContext+0x3e>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	60fb      	str	r3, [r7, #12]
 8005a3e:	491d      	ldr	r1, [pc, #116]	; (8005ab4 <vTaskSwitchContext+0xbc>)
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	4613      	mov	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4413      	add	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	440b      	add	r3, r1
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d0e4      	beq.n	8005a1c <vTaskSwitchContext+0x24>
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	4613      	mov	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4a15      	ldr	r2, [pc, #84]	; (8005ab4 <vTaskSwitchContext+0xbc>)
 8005a5e:	4413      	add	r3, r2
 8005a60:	60bb      	str	r3, [r7, #8]
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	605a      	str	r2, [r3, #4]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	3308      	adds	r3, #8
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d104      	bne.n	8005a82 <vTaskSwitchContext+0x8a>
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	605a      	str	r2, [r3, #4]
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	4a0b      	ldr	r2, [pc, #44]	; (8005ab8 <vTaskSwitchContext+0xc0>)
 8005a8a:	6013      	str	r3, [r2, #0]
 8005a8c:	4a08      	ldr	r2, [pc, #32]	; (8005ab0 <vTaskSwitchContext+0xb8>)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a92:	4b09      	ldr	r3, [pc, #36]	; (8005ab8 <vTaskSwitchContext+0xc0>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3354      	adds	r3, #84	; 0x54
 8005a98:	4a08      	ldr	r2, [pc, #32]	; (8005abc <vTaskSwitchContext+0xc4>)
 8005a9a:	6013      	str	r3, [r2, #0]
}
 8005a9c:	bf00      	nop
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	20000e70 	.word	0x20000e70
 8005aac:	20000e5c 	.word	0x20000e5c
 8005ab0:	20000e50 	.word	0x20000e50
 8005ab4:	20000978 	.word	0x20000978
 8005ab8:	20000974 	.word	0x20000974
 8005abc:	20000010 	.word	0x20000010

08005ac0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10a      	bne.n	8005ae6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad4:	f383 8811 	msr	BASEPRI, r3
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	60fb      	str	r3, [r7, #12]
}
 8005ae2:	bf00      	nop
 8005ae4:	e7fe      	b.n	8005ae4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ae6:	4b07      	ldr	r3, [pc, #28]	; (8005b04 <vTaskPlaceOnEventList+0x44>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	3318      	adds	r3, #24
 8005aec:	4619      	mov	r1, r3
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7fe fc4d 	bl	800438e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005af4:	2101      	movs	r1, #1
 8005af6:	6838      	ldr	r0, [r7, #0]
 8005af8:	f000 fb8e 	bl	8006218 <prvAddCurrentTaskToDelayedList>
}
 8005afc:	bf00      	nop
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	20000974 	.word	0x20000974

08005b08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10a      	bne.n	8005b30 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1e:	f383 8811 	msr	BASEPRI, r3
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	617b      	str	r3, [r7, #20]
}
 8005b2c:	bf00      	nop
 8005b2e:	e7fe      	b.n	8005b2e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b30:	4b0a      	ldr	r3, [pc, #40]	; (8005b5c <vTaskPlaceOnEventListRestricted+0x54>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	3318      	adds	r3, #24
 8005b36:	4619      	mov	r1, r3
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f7fe fc04 	bl	8004346 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d002      	beq.n	8005b4a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005b44:	f04f 33ff 	mov.w	r3, #4294967295
 8005b48:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b4a:	6879      	ldr	r1, [r7, #4]
 8005b4c:	68b8      	ldr	r0, [r7, #8]
 8005b4e:	f000 fb63 	bl	8006218 <prvAddCurrentTaskToDelayedList>
	}
 8005b52:	bf00      	nop
 8005b54:	3718      	adds	r7, #24
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	20000974 	.word	0x20000974

08005b60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10a      	bne.n	8005b8c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7a:	f383 8811 	msr	BASEPRI, r3
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	60fb      	str	r3, [r7, #12]
}
 8005b88:	bf00      	nop
 8005b8a:	e7fe      	b.n	8005b8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	3318      	adds	r3, #24
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7fe fc35 	bl	8004400 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b96:	4b1e      	ldr	r3, [pc, #120]	; (8005c10 <xTaskRemoveFromEventList+0xb0>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d11d      	bne.n	8005bda <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7fe fc2c 	bl	8004400 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bac:	4b19      	ldr	r3, [pc, #100]	; (8005c14 <xTaskRemoveFromEventList+0xb4>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d903      	bls.n	8005bbc <xTaskRemoveFromEventList+0x5c>
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb8:	4a16      	ldr	r2, [pc, #88]	; (8005c14 <xTaskRemoveFromEventList+0xb4>)
 8005bba:	6013      	str	r3, [r2, #0]
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4a13      	ldr	r2, [pc, #76]	; (8005c18 <xTaskRemoveFromEventList+0xb8>)
 8005bca:	441a      	add	r2, r3
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	3304      	adds	r3, #4
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	4610      	mov	r0, r2
 8005bd4:	f7fe fbb7 	bl	8004346 <vListInsertEnd>
 8005bd8:	e005      	b.n	8005be6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	3318      	adds	r3, #24
 8005bde:	4619      	mov	r1, r3
 8005be0:	480e      	ldr	r0, [pc, #56]	; (8005c1c <xTaskRemoveFromEventList+0xbc>)
 8005be2:	f7fe fbb0 	bl	8004346 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bea:	4b0d      	ldr	r3, [pc, #52]	; (8005c20 <xTaskRemoveFromEventList+0xc0>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d905      	bls.n	8005c00 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005bf8:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <xTaskRemoveFromEventList+0xc4>)
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	e001      	b.n	8005c04 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005c00:	2300      	movs	r3, #0
 8005c02:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c04:	697b      	ldr	r3, [r7, #20]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3718      	adds	r7, #24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	20000e70 	.word	0x20000e70
 8005c14:	20000e50 	.word	0x20000e50
 8005c18:	20000978 	.word	0x20000978
 8005c1c:	20000e08 	.word	0x20000e08
 8005c20:	20000974 	.word	0x20000974
 8005c24:	20000e5c 	.word	0x20000e5c

08005c28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c30:	4b06      	ldr	r3, [pc, #24]	; (8005c4c <vTaskInternalSetTimeOutState+0x24>)
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c38:	4b05      	ldr	r3, [pc, #20]	; (8005c50 <vTaskInternalSetTimeOutState+0x28>)
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	605a      	str	r2, [r3, #4]
}
 8005c40:	bf00      	nop
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr
 8005c4c:	20000e60 	.word	0x20000e60
 8005c50:	20000e4c 	.word	0x20000e4c

08005c54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b088      	sub	sp, #32
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10a      	bne.n	8005c7a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c68:	f383 8811 	msr	BASEPRI, r3
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	613b      	str	r3, [r7, #16]
}
 8005c76:	bf00      	nop
 8005c78:	e7fe      	b.n	8005c78 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10a      	bne.n	8005c96 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c84:	f383 8811 	msr	BASEPRI, r3
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	f3bf 8f4f 	dsb	sy
 8005c90:	60fb      	str	r3, [r7, #12]
}
 8005c92:	bf00      	nop
 8005c94:	e7fe      	b.n	8005c94 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005c96:	f000 ff8d 	bl	8006bb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c9a:	4b1d      	ldr	r3, [pc, #116]	; (8005d10 <xTaskCheckForTimeOut+0xbc>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb2:	d102      	bne.n	8005cba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	61fb      	str	r3, [r7, #28]
 8005cb8:	e023      	b.n	8005d02 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	4b15      	ldr	r3, [pc, #84]	; (8005d14 <xTaskCheckForTimeOut+0xc0>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d007      	beq.n	8005cd6 <xTaskCheckForTimeOut+0x82>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d302      	bcc.n	8005cd6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	61fb      	str	r3, [r7, #28]
 8005cd4:	e015      	b.n	8005d02 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d20b      	bcs.n	8005cf8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	1ad2      	subs	r2, r2, r3
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f7ff ff9b 	bl	8005c28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	61fb      	str	r3, [r7, #28]
 8005cf6:	e004      	b.n	8005d02 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d02:	f000 ff87 	bl	8006c14 <vPortExitCritical>

	return xReturn;
 8005d06:	69fb      	ldr	r3, [r7, #28]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3720      	adds	r7, #32
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	20000e4c 	.word	0x20000e4c
 8005d14:	20000e60 	.word	0x20000e60

08005d18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d18:	b480      	push	{r7}
 8005d1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d1c:	4b03      	ldr	r3, [pc, #12]	; (8005d2c <vTaskMissedYield+0x14>)
 8005d1e:	2201      	movs	r2, #1
 8005d20:	601a      	str	r2, [r3, #0]
}
 8005d22:	bf00      	nop
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	20000e5c 	.word	0x20000e5c

08005d30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d38:	f000 f852 	bl	8005de0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d3c:	4b06      	ldr	r3, [pc, #24]	; (8005d58 <prvIdleTask+0x28>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d9f9      	bls.n	8005d38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d44:	4b05      	ldr	r3, [pc, #20]	; (8005d5c <prvIdleTask+0x2c>)
 8005d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d54:	e7f0      	b.n	8005d38 <prvIdleTask+0x8>
 8005d56:	bf00      	nop
 8005d58:	20000978 	.word	0x20000978
 8005d5c:	e000ed04 	.word	0xe000ed04

08005d60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d66:	2300      	movs	r3, #0
 8005d68:	607b      	str	r3, [r7, #4]
 8005d6a:	e00c      	b.n	8005d86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4413      	add	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4a12      	ldr	r2, [pc, #72]	; (8005dc0 <prvInitialiseTaskLists+0x60>)
 8005d78:	4413      	add	r3, r2
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7fe fab6 	bl	80042ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	3301      	adds	r3, #1
 8005d84:	607b      	str	r3, [r7, #4]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b37      	cmp	r3, #55	; 0x37
 8005d8a:	d9ef      	bls.n	8005d6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d8c:	480d      	ldr	r0, [pc, #52]	; (8005dc4 <prvInitialiseTaskLists+0x64>)
 8005d8e:	f7fe faad 	bl	80042ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d92:	480d      	ldr	r0, [pc, #52]	; (8005dc8 <prvInitialiseTaskLists+0x68>)
 8005d94:	f7fe faaa 	bl	80042ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d98:	480c      	ldr	r0, [pc, #48]	; (8005dcc <prvInitialiseTaskLists+0x6c>)
 8005d9a:	f7fe faa7 	bl	80042ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d9e:	480c      	ldr	r0, [pc, #48]	; (8005dd0 <prvInitialiseTaskLists+0x70>)
 8005da0:	f7fe faa4 	bl	80042ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005da4:	480b      	ldr	r0, [pc, #44]	; (8005dd4 <prvInitialiseTaskLists+0x74>)
 8005da6:	f7fe faa1 	bl	80042ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005daa:	4b0b      	ldr	r3, [pc, #44]	; (8005dd8 <prvInitialiseTaskLists+0x78>)
 8005dac:	4a05      	ldr	r2, [pc, #20]	; (8005dc4 <prvInitialiseTaskLists+0x64>)
 8005dae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005db0:	4b0a      	ldr	r3, [pc, #40]	; (8005ddc <prvInitialiseTaskLists+0x7c>)
 8005db2:	4a05      	ldr	r2, [pc, #20]	; (8005dc8 <prvInitialiseTaskLists+0x68>)
 8005db4:	601a      	str	r2, [r3, #0]
}
 8005db6:	bf00      	nop
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	20000978 	.word	0x20000978
 8005dc4:	20000dd8 	.word	0x20000dd8
 8005dc8:	20000dec 	.word	0x20000dec
 8005dcc:	20000e08 	.word	0x20000e08
 8005dd0:	20000e1c 	.word	0x20000e1c
 8005dd4:	20000e34 	.word	0x20000e34
 8005dd8:	20000e00 	.word	0x20000e00
 8005ddc:	20000e04 	.word	0x20000e04

08005de0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005de6:	e019      	b.n	8005e1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005de8:	f000 fee4 	bl	8006bb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dec:	4b10      	ldr	r3, [pc, #64]	; (8005e30 <prvCheckTasksWaitingTermination+0x50>)
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	3304      	adds	r3, #4
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fe fb01 	bl	8004400 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005dfe:	4b0d      	ldr	r3, [pc, #52]	; (8005e34 <prvCheckTasksWaitingTermination+0x54>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3b01      	subs	r3, #1
 8005e04:	4a0b      	ldr	r2, [pc, #44]	; (8005e34 <prvCheckTasksWaitingTermination+0x54>)
 8005e06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e08:	4b0b      	ldr	r3, [pc, #44]	; (8005e38 <prvCheckTasksWaitingTermination+0x58>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	4a0a      	ldr	r2, [pc, #40]	; (8005e38 <prvCheckTasksWaitingTermination+0x58>)
 8005e10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e12:	f000 feff 	bl	8006c14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f810 	bl	8005e3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e1c:	4b06      	ldr	r3, [pc, #24]	; (8005e38 <prvCheckTasksWaitingTermination+0x58>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1e1      	bne.n	8005de8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e24:	bf00      	nop
 8005e26:	bf00      	nop
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	20000e1c 	.word	0x20000e1c
 8005e34:	20000e48 	.word	0x20000e48
 8005e38:	20000e30 	.word	0x20000e30

08005e3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	3354      	adds	r3, #84	; 0x54
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f001 fc63 	bl	8007714 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d108      	bne.n	8005e6a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f001 f897 	bl	8006f90 <vPortFree>
				vPortFree( pxTCB );
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f001 f894 	bl	8006f90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e68:	e018      	b.n	8005e9c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d103      	bne.n	8005e7c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f001 f88b 	bl	8006f90 <vPortFree>
	}
 8005e7a:	e00f      	b.n	8005e9c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d00a      	beq.n	8005e9c <prvDeleteTCB+0x60>
	__asm volatile
 8005e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8a:	f383 8811 	msr	BASEPRI, r3
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	60fb      	str	r3, [r7, #12]
}
 8005e98:	bf00      	nop
 8005e9a:	e7fe      	b.n	8005e9a <prvDeleteTCB+0x5e>
	}
 8005e9c:	bf00      	nop
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eaa:	4b0c      	ldr	r3, [pc, #48]	; (8005edc <prvResetNextTaskUnblockTime+0x38>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d104      	bne.n	8005ebe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005eb4:	4b0a      	ldr	r3, [pc, #40]	; (8005ee0 <prvResetNextTaskUnblockTime+0x3c>)
 8005eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ebc:	e008      	b.n	8005ed0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ebe:	4b07      	ldr	r3, [pc, #28]	; (8005edc <prvResetNextTaskUnblockTime+0x38>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	4a04      	ldr	r2, [pc, #16]	; (8005ee0 <prvResetNextTaskUnblockTime+0x3c>)
 8005ece:	6013      	str	r3, [r2, #0]
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	20000e00 	.word	0x20000e00
 8005ee0:	20000e68 	.word	0x20000e68

08005ee4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005eea:	4b05      	ldr	r3, [pc, #20]	; (8005f00 <xTaskGetCurrentTaskHandle+0x1c>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005ef0:	687b      	ldr	r3, [r7, #4]
	}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	20000974 	.word	0x20000974

08005f04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f0a:	4b0b      	ldr	r3, [pc, #44]	; (8005f38 <xTaskGetSchedulerState+0x34>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d102      	bne.n	8005f18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f12:	2301      	movs	r3, #1
 8005f14:	607b      	str	r3, [r7, #4]
 8005f16:	e008      	b.n	8005f2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f18:	4b08      	ldr	r3, [pc, #32]	; (8005f3c <xTaskGetSchedulerState+0x38>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d102      	bne.n	8005f26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f20:	2302      	movs	r3, #2
 8005f22:	607b      	str	r3, [r7, #4]
 8005f24:	e001      	b.n	8005f2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f26:	2300      	movs	r3, #0
 8005f28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f2a:	687b      	ldr	r3, [r7, #4]
	}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr
 8005f38:	20000e54 	.word	0x20000e54
 8005f3c:	20000e70 	.word	0x20000e70

08005f40 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d051      	beq.n	8005ffa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f5a:	4b2a      	ldr	r3, [pc, #168]	; (8006004 <xTaskPriorityInherit+0xc4>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d241      	bcs.n	8005fe8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	db06      	blt.n	8005f7a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f6c:	4b25      	ldr	r3, [pc, #148]	; (8006004 <xTaskPriorityInherit+0xc4>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	6959      	ldr	r1, [r3, #20]
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f82:	4613      	mov	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4a1f      	ldr	r2, [pc, #124]	; (8006008 <xTaskPriorityInherit+0xc8>)
 8005f8c:	4413      	add	r3, r2
 8005f8e:	4299      	cmp	r1, r3
 8005f90:	d122      	bne.n	8005fd8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	3304      	adds	r3, #4
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fe fa32 	bl	8004400 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005f9c:	4b19      	ldr	r3, [pc, #100]	; (8006004 <xTaskPriorityInherit+0xc4>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005faa:	4b18      	ldr	r3, [pc, #96]	; (800600c <xTaskPriorityInherit+0xcc>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d903      	bls.n	8005fba <xTaskPriorityInherit+0x7a>
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb6:	4a15      	ldr	r2, [pc, #84]	; (800600c <xTaskPriorityInherit+0xcc>)
 8005fb8:	6013      	str	r3, [r2, #0]
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4a10      	ldr	r2, [pc, #64]	; (8006008 <xTaskPriorityInherit+0xc8>)
 8005fc8:	441a      	add	r2, r3
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	3304      	adds	r3, #4
 8005fce:	4619      	mov	r1, r3
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	f7fe f9b8 	bl	8004346 <vListInsertEnd>
 8005fd6:	e004      	b.n	8005fe2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005fd8:	4b0a      	ldr	r3, [pc, #40]	; (8006004 <xTaskPriorityInherit+0xc4>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	60fb      	str	r3, [r7, #12]
 8005fe6:	e008      	b.n	8005ffa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fec:	4b05      	ldr	r3, [pc, #20]	; (8006004 <xTaskPriorityInherit+0xc4>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d201      	bcs.n	8005ffa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
	}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	20000974 	.word	0x20000974
 8006008:	20000978 	.word	0x20000978
 800600c:	20000e50 	.word	0x20000e50

08006010 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800601c:	2300      	movs	r3, #0
 800601e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d056      	beq.n	80060d4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006026:	4b2e      	ldr	r3, [pc, #184]	; (80060e0 <xTaskPriorityDisinherit+0xd0>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	429a      	cmp	r2, r3
 800602e:	d00a      	beq.n	8006046 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006034:	f383 8811 	msr	BASEPRI, r3
 8006038:	f3bf 8f6f 	isb	sy
 800603c:	f3bf 8f4f 	dsb	sy
 8006040:	60fb      	str	r3, [r7, #12]
}
 8006042:	bf00      	nop
 8006044:	e7fe      	b.n	8006044 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10a      	bne.n	8006064 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800604e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006052:	f383 8811 	msr	BASEPRI, r3
 8006056:	f3bf 8f6f 	isb	sy
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	60bb      	str	r3, [r7, #8]
}
 8006060:	bf00      	nop
 8006062:	e7fe      	b.n	8006062 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006068:	1e5a      	subs	r2, r3, #1
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006076:	429a      	cmp	r2, r3
 8006078:	d02c      	beq.n	80060d4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800607e:	2b00      	cmp	r3, #0
 8006080:	d128      	bne.n	80060d4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	3304      	adds	r3, #4
 8006086:	4618      	mov	r0, r3
 8006088:	f7fe f9ba 	bl	8004400 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006098:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a4:	4b0f      	ldr	r3, [pc, #60]	; (80060e4 <xTaskPriorityDisinherit+0xd4>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d903      	bls.n	80060b4 <xTaskPriorityDisinherit+0xa4>
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b0:	4a0c      	ldr	r2, [pc, #48]	; (80060e4 <xTaskPriorityDisinherit+0xd4>)
 80060b2:	6013      	str	r3, [r2, #0]
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b8:	4613      	mov	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4413      	add	r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4a09      	ldr	r2, [pc, #36]	; (80060e8 <xTaskPriorityDisinherit+0xd8>)
 80060c2:	441a      	add	r2, r3
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	3304      	adds	r3, #4
 80060c8:	4619      	mov	r1, r3
 80060ca:	4610      	mov	r0, r2
 80060cc:	f7fe f93b 	bl	8004346 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80060d0:	2301      	movs	r3, #1
 80060d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060d4:	697b      	ldr	r3, [r7, #20]
	}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3718      	adds	r7, #24
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	20000974 	.word	0x20000974
 80060e4:	20000e50 	.word	0x20000e50
 80060e8:	20000978 	.word	0x20000978

080060ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b088      	sub	sp, #32
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80060fa:	2301      	movs	r3, #1
 80060fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d06a      	beq.n	80061da <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10a      	bne.n	8006122 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800610c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	60fb      	str	r3, [r7, #12]
}
 800611e:	bf00      	nop
 8006120:	e7fe      	b.n	8006120 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	429a      	cmp	r2, r3
 800612a:	d902      	bls.n	8006132 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	61fb      	str	r3, [r7, #28]
 8006130:	e002      	b.n	8006138 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006136:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613c:	69fa      	ldr	r2, [r7, #28]
 800613e:	429a      	cmp	r2, r3
 8006140:	d04b      	beq.n	80061da <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	429a      	cmp	r2, r3
 800614a:	d146      	bne.n	80061da <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800614c:	4b25      	ldr	r3, [pc, #148]	; (80061e4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	429a      	cmp	r2, r3
 8006154:	d10a      	bne.n	800616c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615a:	f383 8811 	msr	BASEPRI, r3
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	f3bf 8f4f 	dsb	sy
 8006166:	60bb      	str	r3, [r7, #8]
}
 8006168:	bf00      	nop
 800616a:	e7fe      	b.n	800616a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006170:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	69fa      	ldr	r2, [r7, #28]
 8006176:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	2b00      	cmp	r3, #0
 800617e:	db04      	blt.n	800618a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	6959      	ldr	r1, [r3, #20]
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	4613      	mov	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4413      	add	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4a13      	ldr	r2, [pc, #76]	; (80061e8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800619a:	4413      	add	r3, r2
 800619c:	4299      	cmp	r1, r3
 800619e:	d11c      	bne.n	80061da <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	3304      	adds	r3, #4
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7fe f92b 	bl	8004400 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ae:	4b0f      	ldr	r3, [pc, #60]	; (80061ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d903      	bls.n	80061be <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ba:	4a0c      	ldr	r2, [pc, #48]	; (80061ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80061bc:	6013      	str	r3, [r2, #0]
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c2:	4613      	mov	r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4413      	add	r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4a07      	ldr	r2, [pc, #28]	; (80061e8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80061cc:	441a      	add	r2, r3
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	3304      	adds	r3, #4
 80061d2:	4619      	mov	r1, r3
 80061d4:	4610      	mov	r0, r2
 80061d6:	f7fe f8b6 	bl	8004346 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061da:	bf00      	nop
 80061dc:	3720      	adds	r7, #32
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20000974 	.word	0x20000974
 80061e8:	20000978 	.word	0x20000978
 80061ec:	20000e50 	.word	0x20000e50

080061f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80061f0:	b480      	push	{r7}
 80061f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80061f4:	4b07      	ldr	r3, [pc, #28]	; (8006214 <pvTaskIncrementMutexHeldCount+0x24>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d004      	beq.n	8006206 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80061fc:	4b05      	ldr	r3, [pc, #20]	; (8006214 <pvTaskIncrementMutexHeldCount+0x24>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006202:	3201      	adds	r2, #1
 8006204:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006206:	4b03      	ldr	r3, [pc, #12]	; (8006214 <pvTaskIncrementMutexHeldCount+0x24>)
 8006208:	681b      	ldr	r3, [r3, #0]
	}
 800620a:	4618      	mov	r0, r3
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	20000974 	.word	0x20000974

08006218 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006222:	4b21      	ldr	r3, [pc, #132]	; (80062a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006228:	4b20      	ldr	r3, [pc, #128]	; (80062ac <prvAddCurrentTaskToDelayedList+0x94>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3304      	adds	r3, #4
 800622e:	4618      	mov	r0, r3
 8006230:	f7fe f8e6 	bl	8004400 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800623a:	d10a      	bne.n	8006252 <prvAddCurrentTaskToDelayedList+0x3a>
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d007      	beq.n	8006252 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006242:	4b1a      	ldr	r3, [pc, #104]	; (80062ac <prvAddCurrentTaskToDelayedList+0x94>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	3304      	adds	r3, #4
 8006248:	4619      	mov	r1, r3
 800624a:	4819      	ldr	r0, [pc, #100]	; (80062b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800624c:	f7fe f87b 	bl	8004346 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006250:	e026      	b.n	80062a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4413      	add	r3, r2
 8006258:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800625a:	4b14      	ldr	r3, [pc, #80]	; (80062ac <prvAddCurrentTaskToDelayedList+0x94>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	429a      	cmp	r2, r3
 8006268:	d209      	bcs.n	800627e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800626a:	4b12      	ldr	r3, [pc, #72]	; (80062b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	4b0f      	ldr	r3, [pc, #60]	; (80062ac <prvAddCurrentTaskToDelayedList+0x94>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	3304      	adds	r3, #4
 8006274:	4619      	mov	r1, r3
 8006276:	4610      	mov	r0, r2
 8006278:	f7fe f889 	bl	800438e <vListInsert>
}
 800627c:	e010      	b.n	80062a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800627e:	4b0e      	ldr	r3, [pc, #56]	; (80062b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	4b0a      	ldr	r3, [pc, #40]	; (80062ac <prvAddCurrentTaskToDelayedList+0x94>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	3304      	adds	r3, #4
 8006288:	4619      	mov	r1, r3
 800628a:	4610      	mov	r0, r2
 800628c:	f7fe f87f 	bl	800438e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006290:	4b0a      	ldr	r3, [pc, #40]	; (80062bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	429a      	cmp	r2, r3
 8006298:	d202      	bcs.n	80062a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800629a:	4a08      	ldr	r2, [pc, #32]	; (80062bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	6013      	str	r3, [r2, #0]
}
 80062a0:	bf00      	nop
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	20000e4c 	.word	0x20000e4c
 80062ac:	20000974 	.word	0x20000974
 80062b0:	20000e34 	.word	0x20000e34
 80062b4:	20000e04 	.word	0x20000e04
 80062b8:	20000e00 	.word	0x20000e00
 80062bc:	20000e68 	.word	0x20000e68

080062c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b08a      	sub	sp, #40	; 0x28
 80062c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80062c6:	2300      	movs	r3, #0
 80062c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80062ca:	f000 fb07 	bl	80068dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80062ce:	4b1c      	ldr	r3, [pc, #112]	; (8006340 <xTimerCreateTimerTask+0x80>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d021      	beq.n	800631a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80062d6:	2300      	movs	r3, #0
 80062d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80062da:	2300      	movs	r3, #0
 80062dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80062de:	1d3a      	adds	r2, r7, #4
 80062e0:	f107 0108 	add.w	r1, r7, #8
 80062e4:	f107 030c 	add.w	r3, r7, #12
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7fd ffe5 	bl	80042b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80062ee:	6879      	ldr	r1, [r7, #4]
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	9202      	str	r2, [sp, #8]
 80062f6:	9301      	str	r3, [sp, #4]
 80062f8:	2302      	movs	r3, #2
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	2300      	movs	r3, #0
 80062fe:	460a      	mov	r2, r1
 8006300:	4910      	ldr	r1, [pc, #64]	; (8006344 <xTimerCreateTimerTask+0x84>)
 8006302:	4811      	ldr	r0, [pc, #68]	; (8006348 <xTimerCreateTimerTask+0x88>)
 8006304:	f7fe ffa6 	bl	8005254 <xTaskCreateStatic>
 8006308:	4603      	mov	r3, r0
 800630a:	4a10      	ldr	r2, [pc, #64]	; (800634c <xTimerCreateTimerTask+0x8c>)
 800630c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800630e:	4b0f      	ldr	r3, [pc, #60]	; (800634c <xTimerCreateTimerTask+0x8c>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d001      	beq.n	800631a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006316:	2301      	movs	r3, #1
 8006318:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10a      	bne.n	8006336 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	613b      	str	r3, [r7, #16]
}
 8006332:	bf00      	nop
 8006334:	e7fe      	b.n	8006334 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006336:	697b      	ldr	r3, [r7, #20]
}
 8006338:	4618      	mov	r0, r3
 800633a:	3718      	adds	r7, #24
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	20000ea4 	.word	0x20000ea4
 8006344:	0800849c 	.word	0x0800849c
 8006348:	08006485 	.word	0x08006485
 800634c:	20000ea8 	.word	0x20000ea8

08006350 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b08a      	sub	sp, #40	; 0x28
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
 800635c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800635e:	2300      	movs	r3, #0
 8006360:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10a      	bne.n	800637e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636c:	f383 8811 	msr	BASEPRI, r3
 8006370:	f3bf 8f6f 	isb	sy
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	623b      	str	r3, [r7, #32]
}
 800637a:	bf00      	nop
 800637c:	e7fe      	b.n	800637c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800637e:	4b1a      	ldr	r3, [pc, #104]	; (80063e8 <xTimerGenericCommand+0x98>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d02a      	beq.n	80063dc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	2b05      	cmp	r3, #5
 8006396:	dc18      	bgt.n	80063ca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006398:	f7ff fdb4 	bl	8005f04 <xTaskGetSchedulerState>
 800639c:	4603      	mov	r3, r0
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d109      	bne.n	80063b6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80063a2:	4b11      	ldr	r3, [pc, #68]	; (80063e8 <xTimerGenericCommand+0x98>)
 80063a4:	6818      	ldr	r0, [r3, #0]
 80063a6:	f107 0110 	add.w	r1, r7, #16
 80063aa:	2300      	movs	r3, #0
 80063ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ae:	f7fe fa45 	bl	800483c <xQueueGenericSend>
 80063b2:	6278      	str	r0, [r7, #36]	; 0x24
 80063b4:	e012      	b.n	80063dc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80063b6:	4b0c      	ldr	r3, [pc, #48]	; (80063e8 <xTimerGenericCommand+0x98>)
 80063b8:	6818      	ldr	r0, [r3, #0]
 80063ba:	f107 0110 	add.w	r1, r7, #16
 80063be:	2300      	movs	r3, #0
 80063c0:	2200      	movs	r2, #0
 80063c2:	f7fe fa3b 	bl	800483c <xQueueGenericSend>
 80063c6:	6278      	str	r0, [r7, #36]	; 0x24
 80063c8:	e008      	b.n	80063dc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80063ca:	4b07      	ldr	r3, [pc, #28]	; (80063e8 <xTimerGenericCommand+0x98>)
 80063cc:	6818      	ldr	r0, [r3, #0]
 80063ce:	f107 0110 	add.w	r1, r7, #16
 80063d2:	2300      	movs	r3, #0
 80063d4:	683a      	ldr	r2, [r7, #0]
 80063d6:	f7fe fb2f 	bl	8004a38 <xQueueGenericSendFromISR>
 80063da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3728      	adds	r7, #40	; 0x28
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	20000ea4 	.word	0x20000ea4

080063ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b088      	sub	sp, #32
 80063f0:	af02      	add	r7, sp, #8
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063f6:	4b22      	ldr	r3, [pc, #136]	; (8006480 <prvProcessExpiredTimer+0x94>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	3304      	adds	r3, #4
 8006404:	4618      	mov	r0, r3
 8006406:	f7fd fffb 	bl	8004400 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006410:	f003 0304 	and.w	r3, r3, #4
 8006414:	2b00      	cmp	r3, #0
 8006416:	d022      	beq.n	800645e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	699a      	ldr	r2, [r3, #24]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	18d1      	adds	r1, r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	6978      	ldr	r0, [r7, #20]
 8006426:	f000 f8d1 	bl	80065cc <prvInsertTimerInActiveList>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d01f      	beq.n	8006470 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006430:	2300      	movs	r3, #0
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	2300      	movs	r3, #0
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	2100      	movs	r1, #0
 800643a:	6978      	ldr	r0, [r7, #20]
 800643c:	f7ff ff88 	bl	8006350 <xTimerGenericCommand>
 8006440:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d113      	bne.n	8006470 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644c:	f383 8811 	msr	BASEPRI, r3
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	60fb      	str	r3, [r7, #12]
}
 800645a:	bf00      	nop
 800645c:	e7fe      	b.n	800645c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006464:	f023 0301 	bic.w	r3, r3, #1
 8006468:	b2da      	uxtb	r2, r3
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	6978      	ldr	r0, [r7, #20]
 8006476:	4798      	blx	r3
}
 8006478:	bf00      	nop
 800647a:	3718      	adds	r7, #24
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	20000e9c 	.word	0x20000e9c

08006484 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800648c:	f107 0308 	add.w	r3, r7, #8
 8006490:	4618      	mov	r0, r3
 8006492:	f000 f857 	bl	8006544 <prvGetNextExpireTime>
 8006496:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	4619      	mov	r1, r3
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f000 f803 	bl	80064a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80064a2:	f000 f8d5 	bl	8006650 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064a6:	e7f1      	b.n	800648c <prvTimerTask+0x8>

080064a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80064b2:	f7ff f92b 	bl	800570c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064b6:	f107 0308 	add.w	r3, r7, #8
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 f866 	bl	800658c <prvSampleTimeNow>
 80064c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d130      	bne.n	800652a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10a      	bne.n	80064e4 <prvProcessTimerOrBlockTask+0x3c>
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d806      	bhi.n	80064e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80064d6:	f7ff f927 	bl	8005728 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80064da:	68f9      	ldr	r1, [r7, #12]
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f7ff ff85 	bl	80063ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80064e2:	e024      	b.n	800652e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d008      	beq.n	80064fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80064ea:	4b13      	ldr	r3, [pc, #76]	; (8006538 <prvProcessTimerOrBlockTask+0x90>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d101      	bne.n	80064f8 <prvProcessTimerOrBlockTask+0x50>
 80064f4:	2301      	movs	r3, #1
 80064f6:	e000      	b.n	80064fa <prvProcessTimerOrBlockTask+0x52>
 80064f8:	2300      	movs	r3, #0
 80064fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80064fc:	4b0f      	ldr	r3, [pc, #60]	; (800653c <prvProcessTimerOrBlockTask+0x94>)
 80064fe:	6818      	ldr	r0, [r3, #0]
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	4619      	mov	r1, r3
 800650a:	f7fe fe6f 	bl	80051ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800650e:	f7ff f90b 	bl	8005728 <xTaskResumeAll>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d10a      	bne.n	800652e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006518:	4b09      	ldr	r3, [pc, #36]	; (8006540 <prvProcessTimerOrBlockTask+0x98>)
 800651a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800651e:	601a      	str	r2, [r3, #0]
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	f3bf 8f6f 	isb	sy
}
 8006528:	e001      	b.n	800652e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800652a:	f7ff f8fd 	bl	8005728 <xTaskResumeAll>
}
 800652e:	bf00      	nop
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	20000ea0 	.word	0x20000ea0
 800653c:	20000ea4 	.word	0x20000ea4
 8006540:	e000ed04 	.word	0xe000ed04

08006544 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800654c:	4b0e      	ldr	r3, [pc, #56]	; (8006588 <prvGetNextExpireTime+0x44>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <prvGetNextExpireTime+0x16>
 8006556:	2201      	movs	r2, #1
 8006558:	e000      	b.n	800655c <prvGetNextExpireTime+0x18>
 800655a:	2200      	movs	r2, #0
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d105      	bne.n	8006574 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006568:	4b07      	ldr	r3, [pc, #28]	; (8006588 <prvGetNextExpireTime+0x44>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	60fb      	str	r3, [r7, #12]
 8006572:	e001      	b.n	8006578 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006574:	2300      	movs	r3, #0
 8006576:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006578:	68fb      	ldr	r3, [r7, #12]
}
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	20000e9c 	.word	0x20000e9c

0800658c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006594:	f7ff f966 	bl	8005864 <xTaskGetTickCount>
 8006598:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800659a:	4b0b      	ldr	r3, [pc, #44]	; (80065c8 <prvSampleTimeNow+0x3c>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d205      	bcs.n	80065b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80065a4:	f000 f936 	bl	8006814 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	601a      	str	r2, [r3, #0]
 80065ae:	e002      	b.n	80065b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80065b6:	4a04      	ldr	r2, [pc, #16]	; (80065c8 <prvSampleTimeNow+0x3c>)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80065bc:	68fb      	ldr	r3, [r7, #12]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	20000eac 	.word	0x20000eac

080065cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
 80065d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80065da:	2300      	movs	r3, #0
 80065dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d812      	bhi.n	8006618 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	1ad2      	subs	r2, r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d302      	bcc.n	8006606 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006600:	2301      	movs	r3, #1
 8006602:	617b      	str	r3, [r7, #20]
 8006604:	e01b      	b.n	800663e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006606:	4b10      	ldr	r3, [pc, #64]	; (8006648 <prvInsertTimerInActiveList+0x7c>)
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	3304      	adds	r3, #4
 800660e:	4619      	mov	r1, r3
 8006610:	4610      	mov	r0, r2
 8006612:	f7fd febc 	bl	800438e <vListInsert>
 8006616:	e012      	b.n	800663e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	429a      	cmp	r2, r3
 800661e:	d206      	bcs.n	800662e <prvInsertTimerInActiveList+0x62>
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	429a      	cmp	r2, r3
 8006626:	d302      	bcc.n	800662e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006628:	2301      	movs	r3, #1
 800662a:	617b      	str	r3, [r7, #20]
 800662c:	e007      	b.n	800663e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800662e:	4b07      	ldr	r3, [pc, #28]	; (800664c <prvInsertTimerInActiveList+0x80>)
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	3304      	adds	r3, #4
 8006636:	4619      	mov	r1, r3
 8006638:	4610      	mov	r0, r2
 800663a:	f7fd fea8 	bl	800438e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800663e:	697b      	ldr	r3, [r7, #20]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3718      	adds	r7, #24
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	20000ea0 	.word	0x20000ea0
 800664c:	20000e9c 	.word	0x20000e9c

08006650 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b08e      	sub	sp, #56	; 0x38
 8006654:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006656:	e0ca      	b.n	80067ee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	da18      	bge.n	8006690 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800665e:	1d3b      	adds	r3, r7, #4
 8006660:	3304      	adds	r3, #4
 8006662:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10a      	bne.n	8006680 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800666a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666e:	f383 8811 	msr	BASEPRI, r3
 8006672:	f3bf 8f6f 	isb	sy
 8006676:	f3bf 8f4f 	dsb	sy
 800667a:	61fb      	str	r3, [r7, #28]
}
 800667c:	bf00      	nop
 800667e:	e7fe      	b.n	800667e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006686:	6850      	ldr	r0, [r2, #4]
 8006688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800668a:	6892      	ldr	r2, [r2, #8]
 800668c:	4611      	mov	r1, r2
 800668e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	f2c0 80aa 	blt.w	80067ec <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800669c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669e:	695b      	ldr	r3, [r3, #20]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d004      	beq.n	80066ae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a6:	3304      	adds	r3, #4
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7fd fea9 	bl	8004400 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80066ae:	463b      	mov	r3, r7
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7ff ff6b 	bl	800658c <prvSampleTimeNow>
 80066b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2b09      	cmp	r3, #9
 80066bc:	f200 8097 	bhi.w	80067ee <prvProcessReceivedCommands+0x19e>
 80066c0:	a201      	add	r2, pc, #4	; (adr r2, 80066c8 <prvProcessReceivedCommands+0x78>)
 80066c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c6:	bf00      	nop
 80066c8:	080066f1 	.word	0x080066f1
 80066cc:	080066f1 	.word	0x080066f1
 80066d0:	080066f1 	.word	0x080066f1
 80066d4:	08006765 	.word	0x08006765
 80066d8:	08006779 	.word	0x08006779
 80066dc:	080067c3 	.word	0x080067c3
 80066e0:	080066f1 	.word	0x080066f1
 80066e4:	080066f1 	.word	0x080066f1
 80066e8:	08006765 	.word	0x08006765
 80066ec:	08006779 	.word	0x08006779
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066f6:	f043 0301 	orr.w	r3, r3, #1
 80066fa:	b2da      	uxtb	r2, r3
 80066fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	18d1      	adds	r1, r2, r3
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800670e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006710:	f7ff ff5c 	bl	80065cc <prvInsertTimerInActiveList>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d069      	beq.n	80067ee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800671a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006720:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006724:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006728:	f003 0304 	and.w	r3, r3, #4
 800672c:	2b00      	cmp	r3, #0
 800672e:	d05e      	beq.n	80067ee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	441a      	add	r2, r3
 8006738:	2300      	movs	r3, #0
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	2300      	movs	r3, #0
 800673e:	2100      	movs	r1, #0
 8006740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006742:	f7ff fe05 	bl	8006350 <xTimerGenericCommand>
 8006746:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d14f      	bne.n	80067ee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800674e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006752:	f383 8811 	msr	BASEPRI, r3
 8006756:	f3bf 8f6f 	isb	sy
 800675a:	f3bf 8f4f 	dsb	sy
 800675e:	61bb      	str	r3, [r7, #24]
}
 8006760:	bf00      	nop
 8006762:	e7fe      	b.n	8006762 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006766:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800676a:	f023 0301 	bic.w	r3, r3, #1
 800676e:	b2da      	uxtb	r2, r3
 8006770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006772:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006776:	e03a      	b.n	80067ee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800677e:	f043 0301 	orr.w	r3, r3, #1
 8006782:	b2da      	uxtb	r2, r3
 8006784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006786:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10a      	bne.n	80067ae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679c:	f383 8811 	msr	BASEPRI, r3
 80067a0:	f3bf 8f6f 	isb	sy
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	617b      	str	r3, [r7, #20]
}
 80067aa:	bf00      	nop
 80067ac:	e7fe      	b.n	80067ac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80067ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b0:	699a      	ldr	r2, [r3, #24]
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b4:	18d1      	adds	r1, r2, r3
 80067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067bc:	f7ff ff06 	bl	80065cc <prvInsertTimerInActiveList>
					break;
 80067c0:	e015      	b.n	80067ee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80067c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d103      	bne.n	80067d8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80067d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067d2:	f000 fbdd 	bl	8006f90 <vPortFree>
 80067d6:	e00a      	b.n	80067ee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067de:	f023 0301 	bic.w	r3, r3, #1
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80067ea:	e000      	b.n	80067ee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80067ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067ee:	4b08      	ldr	r3, [pc, #32]	; (8006810 <prvProcessReceivedCommands+0x1c0>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	1d39      	adds	r1, r7, #4
 80067f4:	2200      	movs	r2, #0
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7fe f9ba 	bl	8004b70 <xQueueReceive>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	f47f af2a 	bne.w	8006658 <prvProcessReceivedCommands+0x8>
	}
}
 8006804:	bf00      	nop
 8006806:	bf00      	nop
 8006808:	3730      	adds	r7, #48	; 0x30
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	20000ea4 	.word	0x20000ea4

08006814 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b088      	sub	sp, #32
 8006818:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800681a:	e048      	b.n	80068ae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800681c:	4b2d      	ldr	r3, [pc, #180]	; (80068d4 <prvSwitchTimerLists+0xc0>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006826:	4b2b      	ldr	r3, [pc, #172]	; (80068d4 <prvSwitchTimerLists+0xc0>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	3304      	adds	r3, #4
 8006834:	4618      	mov	r0, r3
 8006836:	f7fd fde3 	bl	8004400 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006848:	f003 0304 	and.w	r3, r3, #4
 800684c:	2b00      	cmp	r3, #0
 800684e:	d02e      	beq.n	80068ae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	4413      	add	r3, r2
 8006858:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	429a      	cmp	r2, r3
 8006860:	d90e      	bls.n	8006880 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800686e:	4b19      	ldr	r3, [pc, #100]	; (80068d4 <prvSwitchTimerLists+0xc0>)
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	3304      	adds	r3, #4
 8006876:	4619      	mov	r1, r3
 8006878:	4610      	mov	r0, r2
 800687a:	f7fd fd88 	bl	800438e <vListInsert>
 800687e:	e016      	b.n	80068ae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006880:	2300      	movs	r3, #0
 8006882:	9300      	str	r3, [sp, #0]
 8006884:	2300      	movs	r3, #0
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	2100      	movs	r1, #0
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f7ff fd60 	bl	8006350 <xTimerGenericCommand>
 8006890:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10a      	bne.n	80068ae <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689c:	f383 8811 	msr	BASEPRI, r3
 80068a0:	f3bf 8f6f 	isb	sy
 80068a4:	f3bf 8f4f 	dsb	sy
 80068a8:	603b      	str	r3, [r7, #0]
}
 80068aa:	bf00      	nop
 80068ac:	e7fe      	b.n	80068ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80068ae:	4b09      	ldr	r3, [pc, #36]	; (80068d4 <prvSwitchTimerLists+0xc0>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1b1      	bne.n	800681c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80068b8:	4b06      	ldr	r3, [pc, #24]	; (80068d4 <prvSwitchTimerLists+0xc0>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80068be:	4b06      	ldr	r3, [pc, #24]	; (80068d8 <prvSwitchTimerLists+0xc4>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a04      	ldr	r2, [pc, #16]	; (80068d4 <prvSwitchTimerLists+0xc0>)
 80068c4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80068c6:	4a04      	ldr	r2, [pc, #16]	; (80068d8 <prvSwitchTimerLists+0xc4>)
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	6013      	str	r3, [r2, #0]
}
 80068cc:	bf00      	nop
 80068ce:	3718      	adds	r7, #24
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	20000e9c 	.word	0x20000e9c
 80068d8:	20000ea0 	.word	0x20000ea0

080068dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80068e2:	f000 f967 	bl	8006bb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80068e6:	4b15      	ldr	r3, [pc, #84]	; (800693c <prvCheckForValidListAndQueue+0x60>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d120      	bne.n	8006930 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80068ee:	4814      	ldr	r0, [pc, #80]	; (8006940 <prvCheckForValidListAndQueue+0x64>)
 80068f0:	f7fd fcfc 	bl	80042ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80068f4:	4813      	ldr	r0, [pc, #76]	; (8006944 <prvCheckForValidListAndQueue+0x68>)
 80068f6:	f7fd fcf9 	bl	80042ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80068fa:	4b13      	ldr	r3, [pc, #76]	; (8006948 <prvCheckForValidListAndQueue+0x6c>)
 80068fc:	4a10      	ldr	r2, [pc, #64]	; (8006940 <prvCheckForValidListAndQueue+0x64>)
 80068fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006900:	4b12      	ldr	r3, [pc, #72]	; (800694c <prvCheckForValidListAndQueue+0x70>)
 8006902:	4a10      	ldr	r2, [pc, #64]	; (8006944 <prvCheckForValidListAndQueue+0x68>)
 8006904:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006906:	2300      	movs	r3, #0
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	4b11      	ldr	r3, [pc, #68]	; (8006950 <prvCheckForValidListAndQueue+0x74>)
 800690c:	4a11      	ldr	r2, [pc, #68]	; (8006954 <prvCheckForValidListAndQueue+0x78>)
 800690e:	2110      	movs	r1, #16
 8006910:	200a      	movs	r0, #10
 8006912:	f7fd fe07 	bl	8004524 <xQueueGenericCreateStatic>
 8006916:	4603      	mov	r3, r0
 8006918:	4a08      	ldr	r2, [pc, #32]	; (800693c <prvCheckForValidListAndQueue+0x60>)
 800691a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800691c:	4b07      	ldr	r3, [pc, #28]	; (800693c <prvCheckForValidListAndQueue+0x60>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d005      	beq.n	8006930 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006924:	4b05      	ldr	r3, [pc, #20]	; (800693c <prvCheckForValidListAndQueue+0x60>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	490b      	ldr	r1, [pc, #44]	; (8006958 <prvCheckForValidListAndQueue+0x7c>)
 800692a:	4618      	mov	r0, r3
 800692c:	f7fe fc34 	bl	8005198 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006930:	f000 f970 	bl	8006c14 <vPortExitCritical>
}
 8006934:	bf00      	nop
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	20000ea4 	.word	0x20000ea4
 8006940:	20000e74 	.word	0x20000e74
 8006944:	20000e88 	.word	0x20000e88
 8006948:	20000e9c 	.word	0x20000e9c
 800694c:	20000ea0 	.word	0x20000ea0
 8006950:	20000f50 	.word	0x20000f50
 8006954:	20000eb0 	.word	0x20000eb0
 8006958:	080084a4 	.word	0x080084a4

0800695c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	3b04      	subs	r3, #4
 800696c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006974:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	3b04      	subs	r3, #4
 800697a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	f023 0201 	bic.w	r2, r3, #1
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3b04      	subs	r3, #4
 800698a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800698c:	4a0c      	ldr	r2, [pc, #48]	; (80069c0 <pxPortInitialiseStack+0x64>)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	3b14      	subs	r3, #20
 8006996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	3b04      	subs	r3, #4
 80069a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f06f 0202 	mvn.w	r2, #2
 80069aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	3b20      	subs	r3, #32
 80069b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80069b2:	68fb      	ldr	r3, [r7, #12]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	080069c5 	.word	0x080069c5

080069c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80069ca:	2300      	movs	r3, #0
 80069cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80069ce:	4b12      	ldr	r3, [pc, #72]	; (8006a18 <prvTaskExitError+0x54>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d6:	d00a      	beq.n	80069ee <prvTaskExitError+0x2a>
	__asm volatile
 80069d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069dc:	f383 8811 	msr	BASEPRI, r3
 80069e0:	f3bf 8f6f 	isb	sy
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	60fb      	str	r3, [r7, #12]
}
 80069ea:	bf00      	nop
 80069ec:	e7fe      	b.n	80069ec <prvTaskExitError+0x28>
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	60bb      	str	r3, [r7, #8]
}
 8006a00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a02:	bf00      	nop
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d0fc      	beq.n	8006a04 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a0a:	bf00      	nop
 8006a0c:	bf00      	nop
 8006a0e:	3714      	adds	r7, #20
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr
 8006a18:	2000000c 	.word	0x2000000c
 8006a1c:	00000000 	.word	0x00000000

08006a20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a20:	4b07      	ldr	r3, [pc, #28]	; (8006a40 <pxCurrentTCBConst2>)
 8006a22:	6819      	ldr	r1, [r3, #0]
 8006a24:	6808      	ldr	r0, [r1, #0]
 8006a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a2a:	f380 8809 	msr	PSP, r0
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f04f 0000 	mov.w	r0, #0
 8006a36:	f380 8811 	msr	BASEPRI, r0
 8006a3a:	4770      	bx	lr
 8006a3c:	f3af 8000 	nop.w

08006a40 <pxCurrentTCBConst2>:
 8006a40:	20000974 	.word	0x20000974
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a44:	bf00      	nop
 8006a46:	bf00      	nop

08006a48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a48:	4808      	ldr	r0, [pc, #32]	; (8006a6c <prvPortStartFirstTask+0x24>)
 8006a4a:	6800      	ldr	r0, [r0, #0]
 8006a4c:	6800      	ldr	r0, [r0, #0]
 8006a4e:	f380 8808 	msr	MSP, r0
 8006a52:	f04f 0000 	mov.w	r0, #0
 8006a56:	f380 8814 	msr	CONTROL, r0
 8006a5a:	b662      	cpsie	i
 8006a5c:	b661      	cpsie	f
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	f3bf 8f6f 	isb	sy
 8006a66:	df00      	svc	0
 8006a68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a6a:	bf00      	nop
 8006a6c:	e000ed08 	.word	0xe000ed08

08006a70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a76:	4b46      	ldr	r3, [pc, #280]	; (8006b90 <xPortStartScheduler+0x120>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a46      	ldr	r2, [pc, #280]	; (8006b94 <xPortStartScheduler+0x124>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d10a      	bne.n	8006a96 <xPortStartScheduler+0x26>
	__asm volatile
 8006a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	613b      	str	r3, [r7, #16]
}
 8006a92:	bf00      	nop
 8006a94:	e7fe      	b.n	8006a94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006a96:	4b3e      	ldr	r3, [pc, #248]	; (8006b90 <xPortStartScheduler+0x120>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a3f      	ldr	r2, [pc, #252]	; (8006b98 <xPortStartScheduler+0x128>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d10a      	bne.n	8006ab6 <xPortStartScheduler+0x46>
	__asm volatile
 8006aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	60fb      	str	r3, [r7, #12]
}
 8006ab2:	bf00      	nop
 8006ab4:	e7fe      	b.n	8006ab4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ab6:	4b39      	ldr	r3, [pc, #228]	; (8006b9c <xPortStartScheduler+0x12c>)
 8006ab8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	22ff      	movs	r2, #255	; 0xff
 8006ac6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ad0:	78fb      	ldrb	r3, [r7, #3]
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ad8:	b2da      	uxtb	r2, r3
 8006ada:	4b31      	ldr	r3, [pc, #196]	; (8006ba0 <xPortStartScheduler+0x130>)
 8006adc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ade:	4b31      	ldr	r3, [pc, #196]	; (8006ba4 <xPortStartScheduler+0x134>)
 8006ae0:	2207      	movs	r2, #7
 8006ae2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ae4:	e009      	b.n	8006afa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006ae6:	4b2f      	ldr	r3, [pc, #188]	; (8006ba4 <xPortStartScheduler+0x134>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	4a2d      	ldr	r2, [pc, #180]	; (8006ba4 <xPortStartScheduler+0x134>)
 8006aee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006af0:	78fb      	ldrb	r3, [r7, #3]
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	005b      	lsls	r3, r3, #1
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006afa:	78fb      	ldrb	r3, [r7, #3]
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b02:	2b80      	cmp	r3, #128	; 0x80
 8006b04:	d0ef      	beq.n	8006ae6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b06:	4b27      	ldr	r3, [pc, #156]	; (8006ba4 <xPortStartScheduler+0x134>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f1c3 0307 	rsb	r3, r3, #7
 8006b0e:	2b04      	cmp	r3, #4
 8006b10:	d00a      	beq.n	8006b28 <xPortStartScheduler+0xb8>
	__asm volatile
 8006b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b16:	f383 8811 	msr	BASEPRI, r3
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	60bb      	str	r3, [r7, #8]
}
 8006b24:	bf00      	nop
 8006b26:	e7fe      	b.n	8006b26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b28:	4b1e      	ldr	r3, [pc, #120]	; (8006ba4 <xPortStartScheduler+0x134>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	021b      	lsls	r3, r3, #8
 8006b2e:	4a1d      	ldr	r2, [pc, #116]	; (8006ba4 <xPortStartScheduler+0x134>)
 8006b30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b32:	4b1c      	ldr	r3, [pc, #112]	; (8006ba4 <xPortStartScheduler+0x134>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b3a:	4a1a      	ldr	r2, [pc, #104]	; (8006ba4 <xPortStartScheduler+0x134>)
 8006b3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b46:	4b18      	ldr	r3, [pc, #96]	; (8006ba8 <xPortStartScheduler+0x138>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a17      	ldr	r2, [pc, #92]	; (8006ba8 <xPortStartScheduler+0x138>)
 8006b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b52:	4b15      	ldr	r3, [pc, #84]	; (8006ba8 <xPortStartScheduler+0x138>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a14      	ldr	r2, [pc, #80]	; (8006ba8 <xPortStartScheduler+0x138>)
 8006b58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006b5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b5e:	f000 f8dd 	bl	8006d1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b62:	4b12      	ldr	r3, [pc, #72]	; (8006bac <xPortStartScheduler+0x13c>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b68:	f000 f8fc 	bl	8006d64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b6c:	4b10      	ldr	r3, [pc, #64]	; (8006bb0 <xPortStartScheduler+0x140>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a0f      	ldr	r2, [pc, #60]	; (8006bb0 <xPortStartScheduler+0x140>)
 8006b72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006b76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b78:	f7ff ff66 	bl	8006a48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b7c:	f7fe ff3c 	bl	80059f8 <vTaskSwitchContext>
	prvTaskExitError();
 8006b80:	f7ff ff20 	bl	80069c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3718      	adds	r7, #24
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	e000ed00 	.word	0xe000ed00
 8006b94:	410fc271 	.word	0x410fc271
 8006b98:	410fc270 	.word	0x410fc270
 8006b9c:	e000e400 	.word	0xe000e400
 8006ba0:	20000fa0 	.word	0x20000fa0
 8006ba4:	20000fa4 	.word	0x20000fa4
 8006ba8:	e000ed20 	.word	0xe000ed20
 8006bac:	2000000c 	.word	0x2000000c
 8006bb0:	e000ef34 	.word	0xe000ef34

08006bb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
	__asm volatile
 8006bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbe:	f383 8811 	msr	BASEPRI, r3
 8006bc2:	f3bf 8f6f 	isb	sy
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	607b      	str	r3, [r7, #4]
}
 8006bcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006bce:	4b0f      	ldr	r3, [pc, #60]	; (8006c0c <vPortEnterCritical+0x58>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	4a0d      	ldr	r2, [pc, #52]	; (8006c0c <vPortEnterCritical+0x58>)
 8006bd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006bd8:	4b0c      	ldr	r3, [pc, #48]	; (8006c0c <vPortEnterCritical+0x58>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d10f      	bne.n	8006c00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006be0:	4b0b      	ldr	r3, [pc, #44]	; (8006c10 <vPortEnterCritical+0x5c>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00a      	beq.n	8006c00 <vPortEnterCritical+0x4c>
	__asm volatile
 8006bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	603b      	str	r3, [r7, #0]
}
 8006bfc:	bf00      	nop
 8006bfe:	e7fe      	b.n	8006bfe <vPortEnterCritical+0x4a>
	}
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr
 8006c0c:	2000000c 	.word	0x2000000c
 8006c10:	e000ed04 	.word	0xe000ed04

08006c14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c1a:	4b12      	ldr	r3, [pc, #72]	; (8006c64 <vPortExitCritical+0x50>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10a      	bne.n	8006c38 <vPortExitCritical+0x24>
	__asm volatile
 8006c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	607b      	str	r3, [r7, #4]
}
 8006c34:	bf00      	nop
 8006c36:	e7fe      	b.n	8006c36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c38:	4b0a      	ldr	r3, [pc, #40]	; (8006c64 <vPortExitCritical+0x50>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	4a09      	ldr	r2, [pc, #36]	; (8006c64 <vPortExitCritical+0x50>)
 8006c40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c42:	4b08      	ldr	r3, [pc, #32]	; (8006c64 <vPortExitCritical+0x50>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d105      	bne.n	8006c56 <vPortExitCritical+0x42>
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	f383 8811 	msr	BASEPRI, r3
}
 8006c54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c56:	bf00      	nop
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	2000000c 	.word	0x2000000c
	...

08006c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c70:	f3ef 8009 	mrs	r0, PSP
 8006c74:	f3bf 8f6f 	isb	sy
 8006c78:	4b15      	ldr	r3, [pc, #84]	; (8006cd0 <pxCurrentTCBConst>)
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	f01e 0f10 	tst.w	lr, #16
 8006c80:	bf08      	it	eq
 8006c82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c8a:	6010      	str	r0, [r2, #0]
 8006c8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006c94:	f380 8811 	msr	BASEPRI, r0
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f7fe feaa 	bl	80059f8 <vTaskSwitchContext>
 8006ca4:	f04f 0000 	mov.w	r0, #0
 8006ca8:	f380 8811 	msr	BASEPRI, r0
 8006cac:	bc09      	pop	{r0, r3}
 8006cae:	6819      	ldr	r1, [r3, #0]
 8006cb0:	6808      	ldr	r0, [r1, #0]
 8006cb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb6:	f01e 0f10 	tst.w	lr, #16
 8006cba:	bf08      	it	eq
 8006cbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006cc0:	f380 8809 	msr	PSP, r0
 8006cc4:	f3bf 8f6f 	isb	sy
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	f3af 8000 	nop.w

08006cd0 <pxCurrentTCBConst>:
 8006cd0:	20000974 	.word	0x20000974
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006cd4:	bf00      	nop
 8006cd6:	bf00      	nop

08006cd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8006cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	607b      	str	r3, [r7, #4]
}
 8006cf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006cf2:	f7fe fdc7 	bl	8005884 <xTaskIncrementTick>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d003      	beq.n	8006d04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006cfc:	4b06      	ldr	r3, [pc, #24]	; (8006d18 <xPortSysTickHandler+0x40>)
 8006cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d02:	601a      	str	r2, [r3, #0]
 8006d04:	2300      	movs	r3, #0
 8006d06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	f383 8811 	msr	BASEPRI, r3
}
 8006d0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d10:	bf00      	nop
 8006d12:	3708      	adds	r7, #8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	e000ed04 	.word	0xe000ed04

08006d1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d20:	4b0b      	ldr	r3, [pc, #44]	; (8006d50 <vPortSetupTimerInterrupt+0x34>)
 8006d22:	2200      	movs	r2, #0
 8006d24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d26:	4b0b      	ldr	r3, [pc, #44]	; (8006d54 <vPortSetupTimerInterrupt+0x38>)
 8006d28:	2200      	movs	r2, #0
 8006d2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d2c:	4b0a      	ldr	r3, [pc, #40]	; (8006d58 <vPortSetupTimerInterrupt+0x3c>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a0a      	ldr	r2, [pc, #40]	; (8006d5c <vPortSetupTimerInterrupt+0x40>)
 8006d32:	fba2 2303 	umull	r2, r3, r2, r3
 8006d36:	099b      	lsrs	r3, r3, #6
 8006d38:	4a09      	ldr	r2, [pc, #36]	; (8006d60 <vPortSetupTimerInterrupt+0x44>)
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d3e:	4b04      	ldr	r3, [pc, #16]	; (8006d50 <vPortSetupTimerInterrupt+0x34>)
 8006d40:	2207      	movs	r2, #7
 8006d42:	601a      	str	r2, [r3, #0]
}
 8006d44:	bf00      	nop
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	e000e010 	.word	0xe000e010
 8006d54:	e000e018 	.word	0xe000e018
 8006d58:	20000000 	.word	0x20000000
 8006d5c:	10624dd3 	.word	0x10624dd3
 8006d60:	e000e014 	.word	0xe000e014

08006d64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006d74 <vPortEnableVFP+0x10>
 8006d68:	6801      	ldr	r1, [r0, #0]
 8006d6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006d6e:	6001      	str	r1, [r0, #0]
 8006d70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d72:	bf00      	nop
 8006d74:	e000ed88 	.word	0xe000ed88

08006d78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d7e:	f3ef 8305 	mrs	r3, IPSR
 8006d82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2b0f      	cmp	r3, #15
 8006d88:	d914      	bls.n	8006db4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d8a:	4a17      	ldr	r2, [pc, #92]	; (8006de8 <vPortValidateInterruptPriority+0x70>)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	4413      	add	r3, r2
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d94:	4b15      	ldr	r3, [pc, #84]	; (8006dec <vPortValidateInterruptPriority+0x74>)
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	7afa      	ldrb	r2, [r7, #11]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d20a      	bcs.n	8006db4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da2:	f383 8811 	msr	BASEPRI, r3
 8006da6:	f3bf 8f6f 	isb	sy
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	607b      	str	r3, [r7, #4]
}
 8006db0:	bf00      	nop
 8006db2:	e7fe      	b.n	8006db2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006db4:	4b0e      	ldr	r3, [pc, #56]	; (8006df0 <vPortValidateInterruptPriority+0x78>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006dbc:	4b0d      	ldr	r3, [pc, #52]	; (8006df4 <vPortValidateInterruptPriority+0x7c>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d90a      	bls.n	8006dda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	603b      	str	r3, [r7, #0]
}
 8006dd6:	bf00      	nop
 8006dd8:	e7fe      	b.n	8006dd8 <vPortValidateInterruptPriority+0x60>
	}
 8006dda:	bf00      	nop
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	e000e3f0 	.word	0xe000e3f0
 8006dec:	20000fa0 	.word	0x20000fa0
 8006df0:	e000ed0c 	.word	0xe000ed0c
 8006df4:	20000fa4 	.word	0x20000fa4

08006df8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b08a      	sub	sp, #40	; 0x28
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e00:	2300      	movs	r3, #0
 8006e02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e04:	f7fe fc82 	bl	800570c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e08:	4b5b      	ldr	r3, [pc, #364]	; (8006f78 <pvPortMalloc+0x180>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d101      	bne.n	8006e14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e10:	f000 f920 	bl	8007054 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e14:	4b59      	ldr	r3, [pc, #356]	; (8006f7c <pvPortMalloc+0x184>)
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f040 8093 	bne.w	8006f48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d01d      	beq.n	8006e64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006e28:	2208      	movs	r2, #8
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f003 0307 	and.w	r3, r3, #7
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d014      	beq.n	8006e64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f023 0307 	bic.w	r3, r3, #7
 8006e40:	3308      	adds	r3, #8
 8006e42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f003 0307 	and.w	r3, r3, #7
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00a      	beq.n	8006e64 <pvPortMalloc+0x6c>
	__asm volatile
 8006e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	617b      	str	r3, [r7, #20]
}
 8006e60:	bf00      	nop
 8006e62:	e7fe      	b.n	8006e62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d06e      	beq.n	8006f48 <pvPortMalloc+0x150>
 8006e6a:	4b45      	ldr	r3, [pc, #276]	; (8006f80 <pvPortMalloc+0x188>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d869      	bhi.n	8006f48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e74:	4b43      	ldr	r3, [pc, #268]	; (8006f84 <pvPortMalloc+0x18c>)
 8006e76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e78:	4b42      	ldr	r3, [pc, #264]	; (8006f84 <pvPortMalloc+0x18c>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e7e:	e004      	b.n	8006e8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d903      	bls.n	8006e9c <pvPortMalloc+0xa4>
 8006e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1f1      	bne.n	8006e80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e9c:	4b36      	ldr	r3, [pc, #216]	; (8006f78 <pvPortMalloc+0x180>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d050      	beq.n	8006f48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ea6:	6a3b      	ldr	r3, [r7, #32]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2208      	movs	r2, #8
 8006eac:	4413      	add	r3, r2
 8006eae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	6a3b      	ldr	r3, [r7, #32]
 8006eb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	1ad2      	subs	r2, r2, r3
 8006ec0:	2308      	movs	r3, #8
 8006ec2:	005b      	lsls	r3, r3, #1
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d91f      	bls.n	8006f08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4413      	add	r3, r2
 8006ece:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	f003 0307 	and.w	r3, r3, #7
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00a      	beq.n	8006ef0 <pvPortMalloc+0xf8>
	__asm volatile
 8006eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	613b      	str	r3, [r7, #16]
}
 8006eec:	bf00      	nop
 8006eee:	e7fe      	b.n	8006eee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef2:	685a      	ldr	r2, [r3, #4]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	1ad2      	subs	r2, r2, r3
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f02:	69b8      	ldr	r0, [r7, #24]
 8006f04:	f000 f908 	bl	8007118 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f08:	4b1d      	ldr	r3, [pc, #116]	; (8006f80 <pvPortMalloc+0x188>)
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	4a1b      	ldr	r2, [pc, #108]	; (8006f80 <pvPortMalloc+0x188>)
 8006f14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f16:	4b1a      	ldr	r3, [pc, #104]	; (8006f80 <pvPortMalloc+0x188>)
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	4b1b      	ldr	r3, [pc, #108]	; (8006f88 <pvPortMalloc+0x190>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d203      	bcs.n	8006f2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f22:	4b17      	ldr	r3, [pc, #92]	; (8006f80 <pvPortMalloc+0x188>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a18      	ldr	r2, [pc, #96]	; (8006f88 <pvPortMalloc+0x190>)
 8006f28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	4b13      	ldr	r3, [pc, #76]	; (8006f7c <pvPortMalloc+0x184>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	431a      	orrs	r2, r3
 8006f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006f3e:	4b13      	ldr	r3, [pc, #76]	; (8006f8c <pvPortMalloc+0x194>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3301      	adds	r3, #1
 8006f44:	4a11      	ldr	r2, [pc, #68]	; (8006f8c <pvPortMalloc+0x194>)
 8006f46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f48:	f7fe fbee 	bl	8005728 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	f003 0307 	and.w	r3, r3, #7
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00a      	beq.n	8006f6c <pvPortMalloc+0x174>
	__asm volatile
 8006f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5a:	f383 8811 	msr	BASEPRI, r3
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f3bf 8f4f 	dsb	sy
 8006f66:	60fb      	str	r3, [r7, #12]
}
 8006f68:	bf00      	nop
 8006f6a:	e7fe      	b.n	8006f6a <pvPortMalloc+0x172>
	return pvReturn;
 8006f6c:	69fb      	ldr	r3, [r7, #28]
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3728      	adds	r7, #40	; 0x28
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	20004bb0 	.word	0x20004bb0
 8006f7c:	20004bc4 	.word	0x20004bc4
 8006f80:	20004bb4 	.word	0x20004bb4
 8006f84:	20004ba8 	.word	0x20004ba8
 8006f88:	20004bb8 	.word	0x20004bb8
 8006f8c:	20004bbc 	.word	0x20004bbc

08006f90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d04d      	beq.n	800703e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006fa2:	2308      	movs	r3, #8
 8006fa4:	425b      	negs	r3, r3
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	4413      	add	r3, r2
 8006faa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	4b24      	ldr	r3, [pc, #144]	; (8007048 <vPortFree+0xb8>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4013      	ands	r3, r2
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10a      	bne.n	8006fd4 <vPortFree+0x44>
	__asm volatile
 8006fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	60fb      	str	r3, [r7, #12]
}
 8006fd0:	bf00      	nop
 8006fd2:	e7fe      	b.n	8006fd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00a      	beq.n	8006ff2 <vPortFree+0x62>
	__asm volatile
 8006fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe0:	f383 8811 	msr	BASEPRI, r3
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	60bb      	str	r3, [r7, #8]
}
 8006fee:	bf00      	nop
 8006ff0:	e7fe      	b.n	8006ff0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	685a      	ldr	r2, [r3, #4]
 8006ff6:	4b14      	ldr	r3, [pc, #80]	; (8007048 <vPortFree+0xb8>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d01e      	beq.n	800703e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d11a      	bne.n	800703e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	4b0e      	ldr	r3, [pc, #56]	; (8007048 <vPortFree+0xb8>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	43db      	mvns	r3, r3
 8007012:	401a      	ands	r2, r3
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007018:	f7fe fb78 	bl	800570c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	4b0a      	ldr	r3, [pc, #40]	; (800704c <vPortFree+0xbc>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4413      	add	r3, r2
 8007026:	4a09      	ldr	r2, [pc, #36]	; (800704c <vPortFree+0xbc>)
 8007028:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800702a:	6938      	ldr	r0, [r7, #16]
 800702c:	f000 f874 	bl	8007118 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007030:	4b07      	ldr	r3, [pc, #28]	; (8007050 <vPortFree+0xc0>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	3301      	adds	r3, #1
 8007036:	4a06      	ldr	r2, [pc, #24]	; (8007050 <vPortFree+0xc0>)
 8007038:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800703a:	f7fe fb75 	bl	8005728 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800703e:	bf00      	nop
 8007040:	3718      	adds	r7, #24
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	20004bc4 	.word	0x20004bc4
 800704c:	20004bb4 	.word	0x20004bb4
 8007050:	20004bc0 	.word	0x20004bc0

08007054 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800705a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800705e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007060:	4b27      	ldr	r3, [pc, #156]	; (8007100 <prvHeapInit+0xac>)
 8007062:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f003 0307 	and.w	r3, r3, #7
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00c      	beq.n	8007088 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	3307      	adds	r3, #7
 8007072:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f023 0307 	bic.w	r3, r3, #7
 800707a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	4a1f      	ldr	r2, [pc, #124]	; (8007100 <prvHeapInit+0xac>)
 8007084:	4413      	add	r3, r2
 8007086:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800708c:	4a1d      	ldr	r2, [pc, #116]	; (8007104 <prvHeapInit+0xb0>)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007092:	4b1c      	ldr	r3, [pc, #112]	; (8007104 <prvHeapInit+0xb0>)
 8007094:	2200      	movs	r2, #0
 8007096:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	4413      	add	r3, r2
 800709e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80070a0:	2208      	movs	r2, #8
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	1a9b      	subs	r3, r3, r2
 80070a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f023 0307 	bic.w	r3, r3, #7
 80070ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	4a15      	ldr	r2, [pc, #84]	; (8007108 <prvHeapInit+0xb4>)
 80070b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80070b6:	4b14      	ldr	r3, [pc, #80]	; (8007108 <prvHeapInit+0xb4>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2200      	movs	r2, #0
 80070bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80070be:	4b12      	ldr	r3, [pc, #72]	; (8007108 <prvHeapInit+0xb4>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2200      	movs	r2, #0
 80070c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	1ad2      	subs	r2, r2, r3
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80070d4:	4b0c      	ldr	r3, [pc, #48]	; (8007108 <prvHeapInit+0xb4>)
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	4a0a      	ldr	r2, [pc, #40]	; (800710c <prvHeapInit+0xb8>)
 80070e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	4a09      	ldr	r2, [pc, #36]	; (8007110 <prvHeapInit+0xbc>)
 80070ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80070ec:	4b09      	ldr	r3, [pc, #36]	; (8007114 <prvHeapInit+0xc0>)
 80070ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80070f2:	601a      	str	r2, [r3, #0]
}
 80070f4:	bf00      	nop
 80070f6:	3714      	adds	r7, #20
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	20000fa8 	.word	0x20000fa8
 8007104:	20004ba8 	.word	0x20004ba8
 8007108:	20004bb0 	.word	0x20004bb0
 800710c:	20004bb8 	.word	0x20004bb8
 8007110:	20004bb4 	.word	0x20004bb4
 8007114:	20004bc4 	.word	0x20004bc4

08007118 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007120:	4b28      	ldr	r3, [pc, #160]	; (80071c4 <prvInsertBlockIntoFreeList+0xac>)
 8007122:	60fb      	str	r3, [r7, #12]
 8007124:	e002      	b.n	800712c <prvInsertBlockIntoFreeList+0x14>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	60fb      	str	r3, [r7, #12]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	429a      	cmp	r2, r3
 8007134:	d8f7      	bhi.n	8007126 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	4413      	add	r3, r2
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	429a      	cmp	r2, r3
 8007146:	d108      	bne.n	800715a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	685a      	ldr	r2, [r3, #4]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	441a      	add	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	441a      	add	r2, r3
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	429a      	cmp	r2, r3
 800716c:	d118      	bne.n	80071a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	4b15      	ldr	r3, [pc, #84]	; (80071c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	429a      	cmp	r2, r3
 8007178:	d00d      	beq.n	8007196 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	685a      	ldr	r2, [r3, #4]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	441a      	add	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	601a      	str	r2, [r3, #0]
 8007194:	e008      	b.n	80071a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007196:	4b0c      	ldr	r3, [pc, #48]	; (80071c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	601a      	str	r2, [r3, #0]
 800719e:	e003      	b.n	80071a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d002      	beq.n	80071b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071b6:	bf00      	nop
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	20004ba8 	.word	0x20004ba8
 80071c8:	20004bb0 	.word	0x20004bb0

080071cc <__errno>:
 80071cc:	4b01      	ldr	r3, [pc, #4]	; (80071d4 <__errno+0x8>)
 80071ce:	6818      	ldr	r0, [r3, #0]
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	20000010 	.word	0x20000010

080071d8 <std>:
 80071d8:	2300      	movs	r3, #0
 80071da:	b510      	push	{r4, lr}
 80071dc:	4604      	mov	r4, r0
 80071de:	e9c0 3300 	strd	r3, r3, [r0]
 80071e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071e6:	6083      	str	r3, [r0, #8]
 80071e8:	8181      	strh	r1, [r0, #12]
 80071ea:	6643      	str	r3, [r0, #100]	; 0x64
 80071ec:	81c2      	strh	r2, [r0, #14]
 80071ee:	6183      	str	r3, [r0, #24]
 80071f0:	4619      	mov	r1, r3
 80071f2:	2208      	movs	r2, #8
 80071f4:	305c      	adds	r0, #92	; 0x5c
 80071f6:	f000 f92b 	bl	8007450 <memset>
 80071fa:	4b05      	ldr	r3, [pc, #20]	; (8007210 <std+0x38>)
 80071fc:	6263      	str	r3, [r4, #36]	; 0x24
 80071fe:	4b05      	ldr	r3, [pc, #20]	; (8007214 <std+0x3c>)
 8007200:	62a3      	str	r3, [r4, #40]	; 0x28
 8007202:	4b05      	ldr	r3, [pc, #20]	; (8007218 <std+0x40>)
 8007204:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007206:	4b05      	ldr	r3, [pc, #20]	; (800721c <std+0x44>)
 8007208:	6224      	str	r4, [r4, #32]
 800720a:	6323      	str	r3, [r4, #48]	; 0x30
 800720c:	bd10      	pop	{r4, pc}
 800720e:	bf00      	nop
 8007210:	080077ed 	.word	0x080077ed
 8007214:	0800780f 	.word	0x0800780f
 8007218:	08007847 	.word	0x08007847
 800721c:	0800786b 	.word	0x0800786b

08007220 <_cleanup_r>:
 8007220:	4901      	ldr	r1, [pc, #4]	; (8007228 <_cleanup_r+0x8>)
 8007222:	f000 b8af 	b.w	8007384 <_fwalk_reent>
 8007226:	bf00      	nop
 8007228:	08007a35 	.word	0x08007a35

0800722c <__sfmoreglue>:
 800722c:	b570      	push	{r4, r5, r6, lr}
 800722e:	2268      	movs	r2, #104	; 0x68
 8007230:	1e4d      	subs	r5, r1, #1
 8007232:	4355      	muls	r5, r2
 8007234:	460e      	mov	r6, r1
 8007236:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800723a:	f000 f97d 	bl	8007538 <_malloc_r>
 800723e:	4604      	mov	r4, r0
 8007240:	b140      	cbz	r0, 8007254 <__sfmoreglue+0x28>
 8007242:	2100      	movs	r1, #0
 8007244:	e9c0 1600 	strd	r1, r6, [r0]
 8007248:	300c      	adds	r0, #12
 800724a:	60a0      	str	r0, [r4, #8]
 800724c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007250:	f000 f8fe 	bl	8007450 <memset>
 8007254:	4620      	mov	r0, r4
 8007256:	bd70      	pop	{r4, r5, r6, pc}

08007258 <__sfp_lock_acquire>:
 8007258:	4801      	ldr	r0, [pc, #4]	; (8007260 <__sfp_lock_acquire+0x8>)
 800725a:	f000 b8d8 	b.w	800740e <__retarget_lock_acquire_recursive>
 800725e:	bf00      	nop
 8007260:	20004bc9 	.word	0x20004bc9

08007264 <__sfp_lock_release>:
 8007264:	4801      	ldr	r0, [pc, #4]	; (800726c <__sfp_lock_release+0x8>)
 8007266:	f000 b8d3 	b.w	8007410 <__retarget_lock_release_recursive>
 800726a:	bf00      	nop
 800726c:	20004bc9 	.word	0x20004bc9

08007270 <__sinit_lock_acquire>:
 8007270:	4801      	ldr	r0, [pc, #4]	; (8007278 <__sinit_lock_acquire+0x8>)
 8007272:	f000 b8cc 	b.w	800740e <__retarget_lock_acquire_recursive>
 8007276:	bf00      	nop
 8007278:	20004bca 	.word	0x20004bca

0800727c <__sinit_lock_release>:
 800727c:	4801      	ldr	r0, [pc, #4]	; (8007284 <__sinit_lock_release+0x8>)
 800727e:	f000 b8c7 	b.w	8007410 <__retarget_lock_release_recursive>
 8007282:	bf00      	nop
 8007284:	20004bca 	.word	0x20004bca

08007288 <__sinit>:
 8007288:	b510      	push	{r4, lr}
 800728a:	4604      	mov	r4, r0
 800728c:	f7ff fff0 	bl	8007270 <__sinit_lock_acquire>
 8007290:	69a3      	ldr	r3, [r4, #24]
 8007292:	b11b      	cbz	r3, 800729c <__sinit+0x14>
 8007294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007298:	f7ff bff0 	b.w	800727c <__sinit_lock_release>
 800729c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80072a0:	6523      	str	r3, [r4, #80]	; 0x50
 80072a2:	4b13      	ldr	r3, [pc, #76]	; (80072f0 <__sinit+0x68>)
 80072a4:	4a13      	ldr	r2, [pc, #76]	; (80072f4 <__sinit+0x6c>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80072aa:	42a3      	cmp	r3, r4
 80072ac:	bf04      	itt	eq
 80072ae:	2301      	moveq	r3, #1
 80072b0:	61a3      	streq	r3, [r4, #24]
 80072b2:	4620      	mov	r0, r4
 80072b4:	f000 f820 	bl	80072f8 <__sfp>
 80072b8:	6060      	str	r0, [r4, #4]
 80072ba:	4620      	mov	r0, r4
 80072bc:	f000 f81c 	bl	80072f8 <__sfp>
 80072c0:	60a0      	str	r0, [r4, #8]
 80072c2:	4620      	mov	r0, r4
 80072c4:	f000 f818 	bl	80072f8 <__sfp>
 80072c8:	2200      	movs	r2, #0
 80072ca:	60e0      	str	r0, [r4, #12]
 80072cc:	2104      	movs	r1, #4
 80072ce:	6860      	ldr	r0, [r4, #4]
 80072d0:	f7ff ff82 	bl	80071d8 <std>
 80072d4:	68a0      	ldr	r0, [r4, #8]
 80072d6:	2201      	movs	r2, #1
 80072d8:	2109      	movs	r1, #9
 80072da:	f7ff ff7d 	bl	80071d8 <std>
 80072de:	68e0      	ldr	r0, [r4, #12]
 80072e0:	2202      	movs	r2, #2
 80072e2:	2112      	movs	r1, #18
 80072e4:	f7ff ff78 	bl	80071d8 <std>
 80072e8:	2301      	movs	r3, #1
 80072ea:	61a3      	str	r3, [r4, #24]
 80072ec:	e7d2      	b.n	8007294 <__sinit+0xc>
 80072ee:	bf00      	nop
 80072f0:	080085e8 	.word	0x080085e8
 80072f4:	08007221 	.word	0x08007221

080072f8 <__sfp>:
 80072f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fa:	4607      	mov	r7, r0
 80072fc:	f7ff ffac 	bl	8007258 <__sfp_lock_acquire>
 8007300:	4b1e      	ldr	r3, [pc, #120]	; (800737c <__sfp+0x84>)
 8007302:	681e      	ldr	r6, [r3, #0]
 8007304:	69b3      	ldr	r3, [r6, #24]
 8007306:	b913      	cbnz	r3, 800730e <__sfp+0x16>
 8007308:	4630      	mov	r0, r6
 800730a:	f7ff ffbd 	bl	8007288 <__sinit>
 800730e:	3648      	adds	r6, #72	; 0x48
 8007310:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007314:	3b01      	subs	r3, #1
 8007316:	d503      	bpl.n	8007320 <__sfp+0x28>
 8007318:	6833      	ldr	r3, [r6, #0]
 800731a:	b30b      	cbz	r3, 8007360 <__sfp+0x68>
 800731c:	6836      	ldr	r6, [r6, #0]
 800731e:	e7f7      	b.n	8007310 <__sfp+0x18>
 8007320:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007324:	b9d5      	cbnz	r5, 800735c <__sfp+0x64>
 8007326:	4b16      	ldr	r3, [pc, #88]	; (8007380 <__sfp+0x88>)
 8007328:	60e3      	str	r3, [r4, #12]
 800732a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800732e:	6665      	str	r5, [r4, #100]	; 0x64
 8007330:	f000 f86c 	bl	800740c <__retarget_lock_init_recursive>
 8007334:	f7ff ff96 	bl	8007264 <__sfp_lock_release>
 8007338:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800733c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007340:	6025      	str	r5, [r4, #0]
 8007342:	61a5      	str	r5, [r4, #24]
 8007344:	2208      	movs	r2, #8
 8007346:	4629      	mov	r1, r5
 8007348:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800734c:	f000 f880 	bl	8007450 <memset>
 8007350:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007354:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007358:	4620      	mov	r0, r4
 800735a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800735c:	3468      	adds	r4, #104	; 0x68
 800735e:	e7d9      	b.n	8007314 <__sfp+0x1c>
 8007360:	2104      	movs	r1, #4
 8007362:	4638      	mov	r0, r7
 8007364:	f7ff ff62 	bl	800722c <__sfmoreglue>
 8007368:	4604      	mov	r4, r0
 800736a:	6030      	str	r0, [r6, #0]
 800736c:	2800      	cmp	r0, #0
 800736e:	d1d5      	bne.n	800731c <__sfp+0x24>
 8007370:	f7ff ff78 	bl	8007264 <__sfp_lock_release>
 8007374:	230c      	movs	r3, #12
 8007376:	603b      	str	r3, [r7, #0]
 8007378:	e7ee      	b.n	8007358 <__sfp+0x60>
 800737a:	bf00      	nop
 800737c:	080085e8 	.word	0x080085e8
 8007380:	ffff0001 	.word	0xffff0001

08007384 <_fwalk_reent>:
 8007384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007388:	4606      	mov	r6, r0
 800738a:	4688      	mov	r8, r1
 800738c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007390:	2700      	movs	r7, #0
 8007392:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007396:	f1b9 0901 	subs.w	r9, r9, #1
 800739a:	d505      	bpl.n	80073a8 <_fwalk_reent+0x24>
 800739c:	6824      	ldr	r4, [r4, #0]
 800739e:	2c00      	cmp	r4, #0
 80073a0:	d1f7      	bne.n	8007392 <_fwalk_reent+0xe>
 80073a2:	4638      	mov	r0, r7
 80073a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073a8:	89ab      	ldrh	r3, [r5, #12]
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d907      	bls.n	80073be <_fwalk_reent+0x3a>
 80073ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073b2:	3301      	adds	r3, #1
 80073b4:	d003      	beq.n	80073be <_fwalk_reent+0x3a>
 80073b6:	4629      	mov	r1, r5
 80073b8:	4630      	mov	r0, r6
 80073ba:	47c0      	blx	r8
 80073bc:	4307      	orrs	r7, r0
 80073be:	3568      	adds	r5, #104	; 0x68
 80073c0:	e7e9      	b.n	8007396 <_fwalk_reent+0x12>
	...

080073c4 <__libc_init_array>:
 80073c4:	b570      	push	{r4, r5, r6, lr}
 80073c6:	4d0d      	ldr	r5, [pc, #52]	; (80073fc <__libc_init_array+0x38>)
 80073c8:	4c0d      	ldr	r4, [pc, #52]	; (8007400 <__libc_init_array+0x3c>)
 80073ca:	1b64      	subs	r4, r4, r5
 80073cc:	10a4      	asrs	r4, r4, #2
 80073ce:	2600      	movs	r6, #0
 80073d0:	42a6      	cmp	r6, r4
 80073d2:	d109      	bne.n	80073e8 <__libc_init_array+0x24>
 80073d4:	4d0b      	ldr	r5, [pc, #44]	; (8007404 <__libc_init_array+0x40>)
 80073d6:	4c0c      	ldr	r4, [pc, #48]	; (8007408 <__libc_init_array+0x44>)
 80073d8:	f001 f844 	bl	8008464 <_init>
 80073dc:	1b64      	subs	r4, r4, r5
 80073de:	10a4      	asrs	r4, r4, #2
 80073e0:	2600      	movs	r6, #0
 80073e2:	42a6      	cmp	r6, r4
 80073e4:	d105      	bne.n	80073f2 <__libc_init_array+0x2e>
 80073e6:	bd70      	pop	{r4, r5, r6, pc}
 80073e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80073ec:	4798      	blx	r3
 80073ee:	3601      	adds	r6, #1
 80073f0:	e7ee      	b.n	80073d0 <__libc_init_array+0xc>
 80073f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80073f6:	4798      	blx	r3
 80073f8:	3601      	adds	r6, #1
 80073fa:	e7f2      	b.n	80073e2 <__libc_init_array+0x1e>
 80073fc:	080086d8 	.word	0x080086d8
 8007400:	080086d8 	.word	0x080086d8
 8007404:	080086d8 	.word	0x080086d8
 8007408:	080086dc 	.word	0x080086dc

0800740c <__retarget_lock_init_recursive>:
 800740c:	4770      	bx	lr

0800740e <__retarget_lock_acquire_recursive>:
 800740e:	4770      	bx	lr

08007410 <__retarget_lock_release_recursive>:
 8007410:	4770      	bx	lr
	...

08007414 <malloc>:
 8007414:	4b02      	ldr	r3, [pc, #8]	; (8007420 <malloc+0xc>)
 8007416:	4601      	mov	r1, r0
 8007418:	6818      	ldr	r0, [r3, #0]
 800741a:	f000 b88d 	b.w	8007538 <_malloc_r>
 800741e:	bf00      	nop
 8007420:	20000010 	.word	0x20000010

08007424 <free>:
 8007424:	4b02      	ldr	r3, [pc, #8]	; (8007430 <free+0xc>)
 8007426:	4601      	mov	r1, r0
 8007428:	6818      	ldr	r0, [r3, #0]
 800742a:	f000 b819 	b.w	8007460 <_free_r>
 800742e:	bf00      	nop
 8007430:	20000010 	.word	0x20000010

08007434 <memcpy>:
 8007434:	440a      	add	r2, r1
 8007436:	4291      	cmp	r1, r2
 8007438:	f100 33ff 	add.w	r3, r0, #4294967295
 800743c:	d100      	bne.n	8007440 <memcpy+0xc>
 800743e:	4770      	bx	lr
 8007440:	b510      	push	{r4, lr}
 8007442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007446:	f803 4f01 	strb.w	r4, [r3, #1]!
 800744a:	4291      	cmp	r1, r2
 800744c:	d1f9      	bne.n	8007442 <memcpy+0xe>
 800744e:	bd10      	pop	{r4, pc}

08007450 <memset>:
 8007450:	4402      	add	r2, r0
 8007452:	4603      	mov	r3, r0
 8007454:	4293      	cmp	r3, r2
 8007456:	d100      	bne.n	800745a <memset+0xa>
 8007458:	4770      	bx	lr
 800745a:	f803 1b01 	strb.w	r1, [r3], #1
 800745e:	e7f9      	b.n	8007454 <memset+0x4>

08007460 <_free_r>:
 8007460:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007462:	2900      	cmp	r1, #0
 8007464:	d044      	beq.n	80074f0 <_free_r+0x90>
 8007466:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800746a:	9001      	str	r0, [sp, #4]
 800746c:	2b00      	cmp	r3, #0
 800746e:	f1a1 0404 	sub.w	r4, r1, #4
 8007472:	bfb8      	it	lt
 8007474:	18e4      	addlt	r4, r4, r3
 8007476:	f000 fb4f 	bl	8007b18 <__malloc_lock>
 800747a:	4a1e      	ldr	r2, [pc, #120]	; (80074f4 <_free_r+0x94>)
 800747c:	9801      	ldr	r0, [sp, #4]
 800747e:	6813      	ldr	r3, [r2, #0]
 8007480:	b933      	cbnz	r3, 8007490 <_free_r+0x30>
 8007482:	6063      	str	r3, [r4, #4]
 8007484:	6014      	str	r4, [r2, #0]
 8007486:	b003      	add	sp, #12
 8007488:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800748c:	f000 bb4a 	b.w	8007b24 <__malloc_unlock>
 8007490:	42a3      	cmp	r3, r4
 8007492:	d908      	bls.n	80074a6 <_free_r+0x46>
 8007494:	6825      	ldr	r5, [r4, #0]
 8007496:	1961      	adds	r1, r4, r5
 8007498:	428b      	cmp	r3, r1
 800749a:	bf01      	itttt	eq
 800749c:	6819      	ldreq	r1, [r3, #0]
 800749e:	685b      	ldreq	r3, [r3, #4]
 80074a0:	1949      	addeq	r1, r1, r5
 80074a2:	6021      	streq	r1, [r4, #0]
 80074a4:	e7ed      	b.n	8007482 <_free_r+0x22>
 80074a6:	461a      	mov	r2, r3
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	b10b      	cbz	r3, 80074b0 <_free_r+0x50>
 80074ac:	42a3      	cmp	r3, r4
 80074ae:	d9fa      	bls.n	80074a6 <_free_r+0x46>
 80074b0:	6811      	ldr	r1, [r2, #0]
 80074b2:	1855      	adds	r5, r2, r1
 80074b4:	42a5      	cmp	r5, r4
 80074b6:	d10b      	bne.n	80074d0 <_free_r+0x70>
 80074b8:	6824      	ldr	r4, [r4, #0]
 80074ba:	4421      	add	r1, r4
 80074bc:	1854      	adds	r4, r2, r1
 80074be:	42a3      	cmp	r3, r4
 80074c0:	6011      	str	r1, [r2, #0]
 80074c2:	d1e0      	bne.n	8007486 <_free_r+0x26>
 80074c4:	681c      	ldr	r4, [r3, #0]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	6053      	str	r3, [r2, #4]
 80074ca:	4421      	add	r1, r4
 80074cc:	6011      	str	r1, [r2, #0]
 80074ce:	e7da      	b.n	8007486 <_free_r+0x26>
 80074d0:	d902      	bls.n	80074d8 <_free_r+0x78>
 80074d2:	230c      	movs	r3, #12
 80074d4:	6003      	str	r3, [r0, #0]
 80074d6:	e7d6      	b.n	8007486 <_free_r+0x26>
 80074d8:	6825      	ldr	r5, [r4, #0]
 80074da:	1961      	adds	r1, r4, r5
 80074dc:	428b      	cmp	r3, r1
 80074de:	bf04      	itt	eq
 80074e0:	6819      	ldreq	r1, [r3, #0]
 80074e2:	685b      	ldreq	r3, [r3, #4]
 80074e4:	6063      	str	r3, [r4, #4]
 80074e6:	bf04      	itt	eq
 80074e8:	1949      	addeq	r1, r1, r5
 80074ea:	6021      	streq	r1, [r4, #0]
 80074ec:	6054      	str	r4, [r2, #4]
 80074ee:	e7ca      	b.n	8007486 <_free_r+0x26>
 80074f0:	b003      	add	sp, #12
 80074f2:	bd30      	pop	{r4, r5, pc}
 80074f4:	20004bcc 	.word	0x20004bcc

080074f8 <sbrk_aligned>:
 80074f8:	b570      	push	{r4, r5, r6, lr}
 80074fa:	4e0e      	ldr	r6, [pc, #56]	; (8007534 <sbrk_aligned+0x3c>)
 80074fc:	460c      	mov	r4, r1
 80074fe:	6831      	ldr	r1, [r6, #0]
 8007500:	4605      	mov	r5, r0
 8007502:	b911      	cbnz	r1, 800750a <sbrk_aligned+0x12>
 8007504:	f000 f962 	bl	80077cc <_sbrk_r>
 8007508:	6030      	str	r0, [r6, #0]
 800750a:	4621      	mov	r1, r4
 800750c:	4628      	mov	r0, r5
 800750e:	f000 f95d 	bl	80077cc <_sbrk_r>
 8007512:	1c43      	adds	r3, r0, #1
 8007514:	d00a      	beq.n	800752c <sbrk_aligned+0x34>
 8007516:	1cc4      	adds	r4, r0, #3
 8007518:	f024 0403 	bic.w	r4, r4, #3
 800751c:	42a0      	cmp	r0, r4
 800751e:	d007      	beq.n	8007530 <sbrk_aligned+0x38>
 8007520:	1a21      	subs	r1, r4, r0
 8007522:	4628      	mov	r0, r5
 8007524:	f000 f952 	bl	80077cc <_sbrk_r>
 8007528:	3001      	adds	r0, #1
 800752a:	d101      	bne.n	8007530 <sbrk_aligned+0x38>
 800752c:	f04f 34ff 	mov.w	r4, #4294967295
 8007530:	4620      	mov	r0, r4
 8007532:	bd70      	pop	{r4, r5, r6, pc}
 8007534:	20004bd0 	.word	0x20004bd0

08007538 <_malloc_r>:
 8007538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800753c:	1ccd      	adds	r5, r1, #3
 800753e:	f025 0503 	bic.w	r5, r5, #3
 8007542:	3508      	adds	r5, #8
 8007544:	2d0c      	cmp	r5, #12
 8007546:	bf38      	it	cc
 8007548:	250c      	movcc	r5, #12
 800754a:	2d00      	cmp	r5, #0
 800754c:	4607      	mov	r7, r0
 800754e:	db01      	blt.n	8007554 <_malloc_r+0x1c>
 8007550:	42a9      	cmp	r1, r5
 8007552:	d905      	bls.n	8007560 <_malloc_r+0x28>
 8007554:	230c      	movs	r3, #12
 8007556:	603b      	str	r3, [r7, #0]
 8007558:	2600      	movs	r6, #0
 800755a:	4630      	mov	r0, r6
 800755c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007560:	4e2e      	ldr	r6, [pc, #184]	; (800761c <_malloc_r+0xe4>)
 8007562:	f000 fad9 	bl	8007b18 <__malloc_lock>
 8007566:	6833      	ldr	r3, [r6, #0]
 8007568:	461c      	mov	r4, r3
 800756a:	bb34      	cbnz	r4, 80075ba <_malloc_r+0x82>
 800756c:	4629      	mov	r1, r5
 800756e:	4638      	mov	r0, r7
 8007570:	f7ff ffc2 	bl	80074f8 <sbrk_aligned>
 8007574:	1c43      	adds	r3, r0, #1
 8007576:	4604      	mov	r4, r0
 8007578:	d14d      	bne.n	8007616 <_malloc_r+0xde>
 800757a:	6834      	ldr	r4, [r6, #0]
 800757c:	4626      	mov	r6, r4
 800757e:	2e00      	cmp	r6, #0
 8007580:	d140      	bne.n	8007604 <_malloc_r+0xcc>
 8007582:	6823      	ldr	r3, [r4, #0]
 8007584:	4631      	mov	r1, r6
 8007586:	4638      	mov	r0, r7
 8007588:	eb04 0803 	add.w	r8, r4, r3
 800758c:	f000 f91e 	bl	80077cc <_sbrk_r>
 8007590:	4580      	cmp	r8, r0
 8007592:	d13a      	bne.n	800760a <_malloc_r+0xd2>
 8007594:	6821      	ldr	r1, [r4, #0]
 8007596:	3503      	adds	r5, #3
 8007598:	1a6d      	subs	r5, r5, r1
 800759a:	f025 0503 	bic.w	r5, r5, #3
 800759e:	3508      	adds	r5, #8
 80075a0:	2d0c      	cmp	r5, #12
 80075a2:	bf38      	it	cc
 80075a4:	250c      	movcc	r5, #12
 80075a6:	4629      	mov	r1, r5
 80075a8:	4638      	mov	r0, r7
 80075aa:	f7ff ffa5 	bl	80074f8 <sbrk_aligned>
 80075ae:	3001      	adds	r0, #1
 80075b0:	d02b      	beq.n	800760a <_malloc_r+0xd2>
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	442b      	add	r3, r5
 80075b6:	6023      	str	r3, [r4, #0]
 80075b8:	e00e      	b.n	80075d8 <_malloc_r+0xa0>
 80075ba:	6822      	ldr	r2, [r4, #0]
 80075bc:	1b52      	subs	r2, r2, r5
 80075be:	d41e      	bmi.n	80075fe <_malloc_r+0xc6>
 80075c0:	2a0b      	cmp	r2, #11
 80075c2:	d916      	bls.n	80075f2 <_malloc_r+0xba>
 80075c4:	1961      	adds	r1, r4, r5
 80075c6:	42a3      	cmp	r3, r4
 80075c8:	6025      	str	r5, [r4, #0]
 80075ca:	bf18      	it	ne
 80075cc:	6059      	strne	r1, [r3, #4]
 80075ce:	6863      	ldr	r3, [r4, #4]
 80075d0:	bf08      	it	eq
 80075d2:	6031      	streq	r1, [r6, #0]
 80075d4:	5162      	str	r2, [r4, r5]
 80075d6:	604b      	str	r3, [r1, #4]
 80075d8:	4638      	mov	r0, r7
 80075da:	f104 060b 	add.w	r6, r4, #11
 80075de:	f000 faa1 	bl	8007b24 <__malloc_unlock>
 80075e2:	f026 0607 	bic.w	r6, r6, #7
 80075e6:	1d23      	adds	r3, r4, #4
 80075e8:	1af2      	subs	r2, r6, r3
 80075ea:	d0b6      	beq.n	800755a <_malloc_r+0x22>
 80075ec:	1b9b      	subs	r3, r3, r6
 80075ee:	50a3      	str	r3, [r4, r2]
 80075f0:	e7b3      	b.n	800755a <_malloc_r+0x22>
 80075f2:	6862      	ldr	r2, [r4, #4]
 80075f4:	42a3      	cmp	r3, r4
 80075f6:	bf0c      	ite	eq
 80075f8:	6032      	streq	r2, [r6, #0]
 80075fa:	605a      	strne	r2, [r3, #4]
 80075fc:	e7ec      	b.n	80075d8 <_malloc_r+0xa0>
 80075fe:	4623      	mov	r3, r4
 8007600:	6864      	ldr	r4, [r4, #4]
 8007602:	e7b2      	b.n	800756a <_malloc_r+0x32>
 8007604:	4634      	mov	r4, r6
 8007606:	6876      	ldr	r6, [r6, #4]
 8007608:	e7b9      	b.n	800757e <_malloc_r+0x46>
 800760a:	230c      	movs	r3, #12
 800760c:	603b      	str	r3, [r7, #0]
 800760e:	4638      	mov	r0, r7
 8007610:	f000 fa88 	bl	8007b24 <__malloc_unlock>
 8007614:	e7a1      	b.n	800755a <_malloc_r+0x22>
 8007616:	6025      	str	r5, [r4, #0]
 8007618:	e7de      	b.n	80075d8 <_malloc_r+0xa0>
 800761a:	bf00      	nop
 800761c:	20004bcc 	.word	0x20004bcc

08007620 <srand>:
 8007620:	b538      	push	{r3, r4, r5, lr}
 8007622:	4b10      	ldr	r3, [pc, #64]	; (8007664 <srand+0x44>)
 8007624:	681d      	ldr	r5, [r3, #0]
 8007626:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007628:	4604      	mov	r4, r0
 800762a:	b9b3      	cbnz	r3, 800765a <srand+0x3a>
 800762c:	2018      	movs	r0, #24
 800762e:	f7ff fef1 	bl	8007414 <malloc>
 8007632:	4602      	mov	r2, r0
 8007634:	63a8      	str	r0, [r5, #56]	; 0x38
 8007636:	b920      	cbnz	r0, 8007642 <srand+0x22>
 8007638:	4b0b      	ldr	r3, [pc, #44]	; (8007668 <srand+0x48>)
 800763a:	480c      	ldr	r0, [pc, #48]	; (800766c <srand+0x4c>)
 800763c:	2142      	movs	r1, #66	; 0x42
 800763e:	f000 f945 	bl	80078cc <__assert_func>
 8007642:	490b      	ldr	r1, [pc, #44]	; (8007670 <srand+0x50>)
 8007644:	4b0b      	ldr	r3, [pc, #44]	; (8007674 <srand+0x54>)
 8007646:	e9c0 1300 	strd	r1, r3, [r0]
 800764a:	4b0b      	ldr	r3, [pc, #44]	; (8007678 <srand+0x58>)
 800764c:	6083      	str	r3, [r0, #8]
 800764e:	230b      	movs	r3, #11
 8007650:	8183      	strh	r3, [r0, #12]
 8007652:	2100      	movs	r1, #0
 8007654:	2001      	movs	r0, #1
 8007656:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800765a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800765c:	2200      	movs	r2, #0
 800765e:	611c      	str	r4, [r3, #16]
 8007660:	615a      	str	r2, [r3, #20]
 8007662:	bd38      	pop	{r3, r4, r5, pc}
 8007664:	20000010 	.word	0x20000010
 8007668:	080085ec 	.word	0x080085ec
 800766c:	08008603 	.word	0x08008603
 8007670:	abcd330e 	.word	0xabcd330e
 8007674:	e66d1234 	.word	0xe66d1234
 8007678:	0005deec 	.word	0x0005deec

0800767c <rand>:
 800767c:	4b16      	ldr	r3, [pc, #88]	; (80076d8 <rand+0x5c>)
 800767e:	b510      	push	{r4, lr}
 8007680:	681c      	ldr	r4, [r3, #0]
 8007682:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007684:	b9b3      	cbnz	r3, 80076b4 <rand+0x38>
 8007686:	2018      	movs	r0, #24
 8007688:	f7ff fec4 	bl	8007414 <malloc>
 800768c:	63a0      	str	r0, [r4, #56]	; 0x38
 800768e:	b928      	cbnz	r0, 800769c <rand+0x20>
 8007690:	4602      	mov	r2, r0
 8007692:	4b12      	ldr	r3, [pc, #72]	; (80076dc <rand+0x60>)
 8007694:	4812      	ldr	r0, [pc, #72]	; (80076e0 <rand+0x64>)
 8007696:	214e      	movs	r1, #78	; 0x4e
 8007698:	f000 f918 	bl	80078cc <__assert_func>
 800769c:	4a11      	ldr	r2, [pc, #68]	; (80076e4 <rand+0x68>)
 800769e:	4b12      	ldr	r3, [pc, #72]	; (80076e8 <rand+0x6c>)
 80076a0:	e9c0 2300 	strd	r2, r3, [r0]
 80076a4:	4b11      	ldr	r3, [pc, #68]	; (80076ec <rand+0x70>)
 80076a6:	6083      	str	r3, [r0, #8]
 80076a8:	230b      	movs	r3, #11
 80076aa:	8183      	strh	r3, [r0, #12]
 80076ac:	2201      	movs	r2, #1
 80076ae:	2300      	movs	r3, #0
 80076b0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80076b4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80076b6:	4a0e      	ldr	r2, [pc, #56]	; (80076f0 <rand+0x74>)
 80076b8:	6920      	ldr	r0, [r4, #16]
 80076ba:	6963      	ldr	r3, [r4, #20]
 80076bc:	490d      	ldr	r1, [pc, #52]	; (80076f4 <rand+0x78>)
 80076be:	4342      	muls	r2, r0
 80076c0:	fb01 2203 	mla	r2, r1, r3, r2
 80076c4:	fba0 0101 	umull	r0, r1, r0, r1
 80076c8:	1c43      	adds	r3, r0, #1
 80076ca:	eb42 0001 	adc.w	r0, r2, r1
 80076ce:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80076d2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80076d6:	bd10      	pop	{r4, pc}
 80076d8:	20000010 	.word	0x20000010
 80076dc:	080085ec 	.word	0x080085ec
 80076e0:	08008603 	.word	0x08008603
 80076e4:	abcd330e 	.word	0xabcd330e
 80076e8:	e66d1234 	.word	0xe66d1234
 80076ec:	0005deec 	.word	0x0005deec
 80076f0:	5851f42d 	.word	0x5851f42d
 80076f4:	4c957f2d 	.word	0x4c957f2d

080076f8 <cleanup_glue>:
 80076f8:	b538      	push	{r3, r4, r5, lr}
 80076fa:	460c      	mov	r4, r1
 80076fc:	6809      	ldr	r1, [r1, #0]
 80076fe:	4605      	mov	r5, r0
 8007700:	b109      	cbz	r1, 8007706 <cleanup_glue+0xe>
 8007702:	f7ff fff9 	bl	80076f8 <cleanup_glue>
 8007706:	4621      	mov	r1, r4
 8007708:	4628      	mov	r0, r5
 800770a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800770e:	f7ff bea7 	b.w	8007460 <_free_r>
	...

08007714 <_reclaim_reent>:
 8007714:	4b2c      	ldr	r3, [pc, #176]	; (80077c8 <_reclaim_reent+0xb4>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4283      	cmp	r3, r0
 800771a:	b570      	push	{r4, r5, r6, lr}
 800771c:	4604      	mov	r4, r0
 800771e:	d051      	beq.n	80077c4 <_reclaim_reent+0xb0>
 8007720:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007722:	b143      	cbz	r3, 8007736 <_reclaim_reent+0x22>
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d14a      	bne.n	80077c0 <_reclaim_reent+0xac>
 800772a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800772c:	6819      	ldr	r1, [r3, #0]
 800772e:	b111      	cbz	r1, 8007736 <_reclaim_reent+0x22>
 8007730:	4620      	mov	r0, r4
 8007732:	f7ff fe95 	bl	8007460 <_free_r>
 8007736:	6961      	ldr	r1, [r4, #20]
 8007738:	b111      	cbz	r1, 8007740 <_reclaim_reent+0x2c>
 800773a:	4620      	mov	r0, r4
 800773c:	f7ff fe90 	bl	8007460 <_free_r>
 8007740:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007742:	b111      	cbz	r1, 800774a <_reclaim_reent+0x36>
 8007744:	4620      	mov	r0, r4
 8007746:	f7ff fe8b 	bl	8007460 <_free_r>
 800774a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800774c:	b111      	cbz	r1, 8007754 <_reclaim_reent+0x40>
 800774e:	4620      	mov	r0, r4
 8007750:	f7ff fe86 	bl	8007460 <_free_r>
 8007754:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007756:	b111      	cbz	r1, 800775e <_reclaim_reent+0x4a>
 8007758:	4620      	mov	r0, r4
 800775a:	f7ff fe81 	bl	8007460 <_free_r>
 800775e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007760:	b111      	cbz	r1, 8007768 <_reclaim_reent+0x54>
 8007762:	4620      	mov	r0, r4
 8007764:	f7ff fe7c 	bl	8007460 <_free_r>
 8007768:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800776a:	b111      	cbz	r1, 8007772 <_reclaim_reent+0x5e>
 800776c:	4620      	mov	r0, r4
 800776e:	f7ff fe77 	bl	8007460 <_free_r>
 8007772:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007774:	b111      	cbz	r1, 800777c <_reclaim_reent+0x68>
 8007776:	4620      	mov	r0, r4
 8007778:	f7ff fe72 	bl	8007460 <_free_r>
 800777c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800777e:	b111      	cbz	r1, 8007786 <_reclaim_reent+0x72>
 8007780:	4620      	mov	r0, r4
 8007782:	f7ff fe6d 	bl	8007460 <_free_r>
 8007786:	69a3      	ldr	r3, [r4, #24]
 8007788:	b1e3      	cbz	r3, 80077c4 <_reclaim_reent+0xb0>
 800778a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800778c:	4620      	mov	r0, r4
 800778e:	4798      	blx	r3
 8007790:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007792:	b1b9      	cbz	r1, 80077c4 <_reclaim_reent+0xb0>
 8007794:	4620      	mov	r0, r4
 8007796:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800779a:	f7ff bfad 	b.w	80076f8 <cleanup_glue>
 800779e:	5949      	ldr	r1, [r1, r5]
 80077a0:	b941      	cbnz	r1, 80077b4 <_reclaim_reent+0xa0>
 80077a2:	3504      	adds	r5, #4
 80077a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077a6:	2d80      	cmp	r5, #128	; 0x80
 80077a8:	68d9      	ldr	r1, [r3, #12]
 80077aa:	d1f8      	bne.n	800779e <_reclaim_reent+0x8a>
 80077ac:	4620      	mov	r0, r4
 80077ae:	f7ff fe57 	bl	8007460 <_free_r>
 80077b2:	e7ba      	b.n	800772a <_reclaim_reent+0x16>
 80077b4:	680e      	ldr	r6, [r1, #0]
 80077b6:	4620      	mov	r0, r4
 80077b8:	f7ff fe52 	bl	8007460 <_free_r>
 80077bc:	4631      	mov	r1, r6
 80077be:	e7ef      	b.n	80077a0 <_reclaim_reent+0x8c>
 80077c0:	2500      	movs	r5, #0
 80077c2:	e7ef      	b.n	80077a4 <_reclaim_reent+0x90>
 80077c4:	bd70      	pop	{r4, r5, r6, pc}
 80077c6:	bf00      	nop
 80077c8:	20000010 	.word	0x20000010

080077cc <_sbrk_r>:
 80077cc:	b538      	push	{r3, r4, r5, lr}
 80077ce:	4d06      	ldr	r5, [pc, #24]	; (80077e8 <_sbrk_r+0x1c>)
 80077d0:	2300      	movs	r3, #0
 80077d2:	4604      	mov	r4, r0
 80077d4:	4608      	mov	r0, r1
 80077d6:	602b      	str	r3, [r5, #0]
 80077d8:	f7fa f906 	bl	80019e8 <_sbrk>
 80077dc:	1c43      	adds	r3, r0, #1
 80077de:	d102      	bne.n	80077e6 <_sbrk_r+0x1a>
 80077e0:	682b      	ldr	r3, [r5, #0]
 80077e2:	b103      	cbz	r3, 80077e6 <_sbrk_r+0x1a>
 80077e4:	6023      	str	r3, [r4, #0]
 80077e6:	bd38      	pop	{r3, r4, r5, pc}
 80077e8:	20004bd4 	.word	0x20004bd4

080077ec <__sread>:
 80077ec:	b510      	push	{r4, lr}
 80077ee:	460c      	mov	r4, r1
 80077f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077f4:	f000 fc8a 	bl	800810c <_read_r>
 80077f8:	2800      	cmp	r0, #0
 80077fa:	bfab      	itete	ge
 80077fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80077fe:	89a3      	ldrhlt	r3, [r4, #12]
 8007800:	181b      	addge	r3, r3, r0
 8007802:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007806:	bfac      	ite	ge
 8007808:	6563      	strge	r3, [r4, #84]	; 0x54
 800780a:	81a3      	strhlt	r3, [r4, #12]
 800780c:	bd10      	pop	{r4, pc}

0800780e <__swrite>:
 800780e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007812:	461f      	mov	r7, r3
 8007814:	898b      	ldrh	r3, [r1, #12]
 8007816:	05db      	lsls	r3, r3, #23
 8007818:	4605      	mov	r5, r0
 800781a:	460c      	mov	r4, r1
 800781c:	4616      	mov	r6, r2
 800781e:	d505      	bpl.n	800782c <__swrite+0x1e>
 8007820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007824:	2302      	movs	r3, #2
 8007826:	2200      	movs	r2, #0
 8007828:	f000 f964 	bl	8007af4 <_lseek_r>
 800782c:	89a3      	ldrh	r3, [r4, #12]
 800782e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007836:	81a3      	strh	r3, [r4, #12]
 8007838:	4632      	mov	r2, r6
 800783a:	463b      	mov	r3, r7
 800783c:	4628      	mov	r0, r5
 800783e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007842:	f000 b831 	b.w	80078a8 <_write_r>

08007846 <__sseek>:
 8007846:	b510      	push	{r4, lr}
 8007848:	460c      	mov	r4, r1
 800784a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800784e:	f000 f951 	bl	8007af4 <_lseek_r>
 8007852:	1c43      	adds	r3, r0, #1
 8007854:	89a3      	ldrh	r3, [r4, #12]
 8007856:	bf15      	itete	ne
 8007858:	6560      	strne	r0, [r4, #84]	; 0x54
 800785a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800785e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007862:	81a3      	strheq	r3, [r4, #12]
 8007864:	bf18      	it	ne
 8007866:	81a3      	strhne	r3, [r4, #12]
 8007868:	bd10      	pop	{r4, pc}

0800786a <__sclose>:
 800786a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800786e:	f000 b84b 	b.w	8007908 <_close_r>
	...

08007874 <time>:
 8007874:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007876:	4b0b      	ldr	r3, [pc, #44]	; (80078a4 <time+0x30>)
 8007878:	2200      	movs	r2, #0
 800787a:	4669      	mov	r1, sp
 800787c:	4604      	mov	r4, r0
 800787e:	6818      	ldr	r0, [r3, #0]
 8007880:	f000 f926 	bl	8007ad0 <_gettimeofday_r>
 8007884:	2800      	cmp	r0, #0
 8007886:	bfbe      	ittt	lt
 8007888:	f04f 32ff 	movlt.w	r2, #4294967295
 800788c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007890:	e9cd 2300 	strdlt	r2, r3, [sp]
 8007894:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007898:	b10c      	cbz	r4, 800789e <time+0x2a>
 800789a:	e9c4 0100 	strd	r0, r1, [r4]
 800789e:	b004      	add	sp, #16
 80078a0:	bd10      	pop	{r4, pc}
 80078a2:	bf00      	nop
 80078a4:	20000010 	.word	0x20000010

080078a8 <_write_r>:
 80078a8:	b538      	push	{r3, r4, r5, lr}
 80078aa:	4d07      	ldr	r5, [pc, #28]	; (80078c8 <_write_r+0x20>)
 80078ac:	4604      	mov	r4, r0
 80078ae:	4608      	mov	r0, r1
 80078b0:	4611      	mov	r1, r2
 80078b2:	2200      	movs	r2, #0
 80078b4:	602a      	str	r2, [r5, #0]
 80078b6:	461a      	mov	r2, r3
 80078b8:	f7fa f845 	bl	8001946 <_write>
 80078bc:	1c43      	adds	r3, r0, #1
 80078be:	d102      	bne.n	80078c6 <_write_r+0x1e>
 80078c0:	682b      	ldr	r3, [r5, #0]
 80078c2:	b103      	cbz	r3, 80078c6 <_write_r+0x1e>
 80078c4:	6023      	str	r3, [r4, #0]
 80078c6:	bd38      	pop	{r3, r4, r5, pc}
 80078c8:	20004bd4 	.word	0x20004bd4

080078cc <__assert_func>:
 80078cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078ce:	4614      	mov	r4, r2
 80078d0:	461a      	mov	r2, r3
 80078d2:	4b09      	ldr	r3, [pc, #36]	; (80078f8 <__assert_func+0x2c>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4605      	mov	r5, r0
 80078d8:	68d8      	ldr	r0, [r3, #12]
 80078da:	b14c      	cbz	r4, 80078f0 <__assert_func+0x24>
 80078dc:	4b07      	ldr	r3, [pc, #28]	; (80078fc <__assert_func+0x30>)
 80078de:	9100      	str	r1, [sp, #0]
 80078e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80078e4:	4906      	ldr	r1, [pc, #24]	; (8007900 <__assert_func+0x34>)
 80078e6:	462b      	mov	r3, r5
 80078e8:	f000 f8e0 	bl	8007aac <fiprintf>
 80078ec:	f000 fce0 	bl	80082b0 <abort>
 80078f0:	4b04      	ldr	r3, [pc, #16]	; (8007904 <__assert_func+0x38>)
 80078f2:	461c      	mov	r4, r3
 80078f4:	e7f3      	b.n	80078de <__assert_func+0x12>
 80078f6:	bf00      	nop
 80078f8:	20000010 	.word	0x20000010
 80078fc:	0800865e 	.word	0x0800865e
 8007900:	0800866b 	.word	0x0800866b
 8007904:	08008699 	.word	0x08008699

08007908 <_close_r>:
 8007908:	b538      	push	{r3, r4, r5, lr}
 800790a:	4d06      	ldr	r5, [pc, #24]	; (8007924 <_close_r+0x1c>)
 800790c:	2300      	movs	r3, #0
 800790e:	4604      	mov	r4, r0
 8007910:	4608      	mov	r0, r1
 8007912:	602b      	str	r3, [r5, #0]
 8007914:	f7fa f833 	bl	800197e <_close>
 8007918:	1c43      	adds	r3, r0, #1
 800791a:	d102      	bne.n	8007922 <_close_r+0x1a>
 800791c:	682b      	ldr	r3, [r5, #0]
 800791e:	b103      	cbz	r3, 8007922 <_close_r+0x1a>
 8007920:	6023      	str	r3, [r4, #0]
 8007922:	bd38      	pop	{r3, r4, r5, pc}
 8007924:	20004bd4 	.word	0x20004bd4

08007928 <__sflush_r>:
 8007928:	898a      	ldrh	r2, [r1, #12]
 800792a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800792e:	4605      	mov	r5, r0
 8007930:	0710      	lsls	r0, r2, #28
 8007932:	460c      	mov	r4, r1
 8007934:	d458      	bmi.n	80079e8 <__sflush_r+0xc0>
 8007936:	684b      	ldr	r3, [r1, #4]
 8007938:	2b00      	cmp	r3, #0
 800793a:	dc05      	bgt.n	8007948 <__sflush_r+0x20>
 800793c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800793e:	2b00      	cmp	r3, #0
 8007940:	dc02      	bgt.n	8007948 <__sflush_r+0x20>
 8007942:	2000      	movs	r0, #0
 8007944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007948:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800794a:	2e00      	cmp	r6, #0
 800794c:	d0f9      	beq.n	8007942 <__sflush_r+0x1a>
 800794e:	2300      	movs	r3, #0
 8007950:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007954:	682f      	ldr	r7, [r5, #0]
 8007956:	602b      	str	r3, [r5, #0]
 8007958:	d032      	beq.n	80079c0 <__sflush_r+0x98>
 800795a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800795c:	89a3      	ldrh	r3, [r4, #12]
 800795e:	075a      	lsls	r2, r3, #29
 8007960:	d505      	bpl.n	800796e <__sflush_r+0x46>
 8007962:	6863      	ldr	r3, [r4, #4]
 8007964:	1ac0      	subs	r0, r0, r3
 8007966:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007968:	b10b      	cbz	r3, 800796e <__sflush_r+0x46>
 800796a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800796c:	1ac0      	subs	r0, r0, r3
 800796e:	2300      	movs	r3, #0
 8007970:	4602      	mov	r2, r0
 8007972:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007974:	6a21      	ldr	r1, [r4, #32]
 8007976:	4628      	mov	r0, r5
 8007978:	47b0      	blx	r6
 800797a:	1c43      	adds	r3, r0, #1
 800797c:	89a3      	ldrh	r3, [r4, #12]
 800797e:	d106      	bne.n	800798e <__sflush_r+0x66>
 8007980:	6829      	ldr	r1, [r5, #0]
 8007982:	291d      	cmp	r1, #29
 8007984:	d82c      	bhi.n	80079e0 <__sflush_r+0xb8>
 8007986:	4a2a      	ldr	r2, [pc, #168]	; (8007a30 <__sflush_r+0x108>)
 8007988:	40ca      	lsrs	r2, r1
 800798a:	07d6      	lsls	r6, r2, #31
 800798c:	d528      	bpl.n	80079e0 <__sflush_r+0xb8>
 800798e:	2200      	movs	r2, #0
 8007990:	6062      	str	r2, [r4, #4]
 8007992:	04d9      	lsls	r1, r3, #19
 8007994:	6922      	ldr	r2, [r4, #16]
 8007996:	6022      	str	r2, [r4, #0]
 8007998:	d504      	bpl.n	80079a4 <__sflush_r+0x7c>
 800799a:	1c42      	adds	r2, r0, #1
 800799c:	d101      	bne.n	80079a2 <__sflush_r+0x7a>
 800799e:	682b      	ldr	r3, [r5, #0]
 80079a0:	b903      	cbnz	r3, 80079a4 <__sflush_r+0x7c>
 80079a2:	6560      	str	r0, [r4, #84]	; 0x54
 80079a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079a6:	602f      	str	r7, [r5, #0]
 80079a8:	2900      	cmp	r1, #0
 80079aa:	d0ca      	beq.n	8007942 <__sflush_r+0x1a>
 80079ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079b0:	4299      	cmp	r1, r3
 80079b2:	d002      	beq.n	80079ba <__sflush_r+0x92>
 80079b4:	4628      	mov	r0, r5
 80079b6:	f7ff fd53 	bl	8007460 <_free_r>
 80079ba:	2000      	movs	r0, #0
 80079bc:	6360      	str	r0, [r4, #52]	; 0x34
 80079be:	e7c1      	b.n	8007944 <__sflush_r+0x1c>
 80079c0:	6a21      	ldr	r1, [r4, #32]
 80079c2:	2301      	movs	r3, #1
 80079c4:	4628      	mov	r0, r5
 80079c6:	47b0      	blx	r6
 80079c8:	1c41      	adds	r1, r0, #1
 80079ca:	d1c7      	bne.n	800795c <__sflush_r+0x34>
 80079cc:	682b      	ldr	r3, [r5, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d0c4      	beq.n	800795c <__sflush_r+0x34>
 80079d2:	2b1d      	cmp	r3, #29
 80079d4:	d001      	beq.n	80079da <__sflush_r+0xb2>
 80079d6:	2b16      	cmp	r3, #22
 80079d8:	d101      	bne.n	80079de <__sflush_r+0xb6>
 80079da:	602f      	str	r7, [r5, #0]
 80079dc:	e7b1      	b.n	8007942 <__sflush_r+0x1a>
 80079de:	89a3      	ldrh	r3, [r4, #12]
 80079e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079e4:	81a3      	strh	r3, [r4, #12]
 80079e6:	e7ad      	b.n	8007944 <__sflush_r+0x1c>
 80079e8:	690f      	ldr	r7, [r1, #16]
 80079ea:	2f00      	cmp	r7, #0
 80079ec:	d0a9      	beq.n	8007942 <__sflush_r+0x1a>
 80079ee:	0793      	lsls	r3, r2, #30
 80079f0:	680e      	ldr	r6, [r1, #0]
 80079f2:	bf08      	it	eq
 80079f4:	694b      	ldreq	r3, [r1, #20]
 80079f6:	600f      	str	r7, [r1, #0]
 80079f8:	bf18      	it	ne
 80079fa:	2300      	movne	r3, #0
 80079fc:	eba6 0807 	sub.w	r8, r6, r7
 8007a00:	608b      	str	r3, [r1, #8]
 8007a02:	f1b8 0f00 	cmp.w	r8, #0
 8007a06:	dd9c      	ble.n	8007942 <__sflush_r+0x1a>
 8007a08:	6a21      	ldr	r1, [r4, #32]
 8007a0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a0c:	4643      	mov	r3, r8
 8007a0e:	463a      	mov	r2, r7
 8007a10:	4628      	mov	r0, r5
 8007a12:	47b0      	blx	r6
 8007a14:	2800      	cmp	r0, #0
 8007a16:	dc06      	bgt.n	8007a26 <__sflush_r+0xfe>
 8007a18:	89a3      	ldrh	r3, [r4, #12]
 8007a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a1e:	81a3      	strh	r3, [r4, #12]
 8007a20:	f04f 30ff 	mov.w	r0, #4294967295
 8007a24:	e78e      	b.n	8007944 <__sflush_r+0x1c>
 8007a26:	4407      	add	r7, r0
 8007a28:	eba8 0800 	sub.w	r8, r8, r0
 8007a2c:	e7e9      	b.n	8007a02 <__sflush_r+0xda>
 8007a2e:	bf00      	nop
 8007a30:	20400001 	.word	0x20400001

08007a34 <_fflush_r>:
 8007a34:	b538      	push	{r3, r4, r5, lr}
 8007a36:	690b      	ldr	r3, [r1, #16]
 8007a38:	4605      	mov	r5, r0
 8007a3a:	460c      	mov	r4, r1
 8007a3c:	b913      	cbnz	r3, 8007a44 <_fflush_r+0x10>
 8007a3e:	2500      	movs	r5, #0
 8007a40:	4628      	mov	r0, r5
 8007a42:	bd38      	pop	{r3, r4, r5, pc}
 8007a44:	b118      	cbz	r0, 8007a4e <_fflush_r+0x1a>
 8007a46:	6983      	ldr	r3, [r0, #24]
 8007a48:	b90b      	cbnz	r3, 8007a4e <_fflush_r+0x1a>
 8007a4a:	f7ff fc1d 	bl	8007288 <__sinit>
 8007a4e:	4b14      	ldr	r3, [pc, #80]	; (8007aa0 <_fflush_r+0x6c>)
 8007a50:	429c      	cmp	r4, r3
 8007a52:	d11b      	bne.n	8007a8c <_fflush_r+0x58>
 8007a54:	686c      	ldr	r4, [r5, #4]
 8007a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d0ef      	beq.n	8007a3e <_fflush_r+0xa>
 8007a5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a60:	07d0      	lsls	r0, r2, #31
 8007a62:	d404      	bmi.n	8007a6e <_fflush_r+0x3a>
 8007a64:	0599      	lsls	r1, r3, #22
 8007a66:	d402      	bmi.n	8007a6e <_fflush_r+0x3a>
 8007a68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a6a:	f7ff fcd0 	bl	800740e <__retarget_lock_acquire_recursive>
 8007a6e:	4628      	mov	r0, r5
 8007a70:	4621      	mov	r1, r4
 8007a72:	f7ff ff59 	bl	8007928 <__sflush_r>
 8007a76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a78:	07da      	lsls	r2, r3, #31
 8007a7a:	4605      	mov	r5, r0
 8007a7c:	d4e0      	bmi.n	8007a40 <_fflush_r+0xc>
 8007a7e:	89a3      	ldrh	r3, [r4, #12]
 8007a80:	059b      	lsls	r3, r3, #22
 8007a82:	d4dd      	bmi.n	8007a40 <_fflush_r+0xc>
 8007a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a86:	f7ff fcc3 	bl	8007410 <__retarget_lock_release_recursive>
 8007a8a:	e7d9      	b.n	8007a40 <_fflush_r+0xc>
 8007a8c:	4b05      	ldr	r3, [pc, #20]	; (8007aa4 <_fflush_r+0x70>)
 8007a8e:	429c      	cmp	r4, r3
 8007a90:	d101      	bne.n	8007a96 <_fflush_r+0x62>
 8007a92:	68ac      	ldr	r4, [r5, #8]
 8007a94:	e7df      	b.n	8007a56 <_fflush_r+0x22>
 8007a96:	4b04      	ldr	r3, [pc, #16]	; (8007aa8 <_fflush_r+0x74>)
 8007a98:	429c      	cmp	r4, r3
 8007a9a:	bf08      	it	eq
 8007a9c:	68ec      	ldreq	r4, [r5, #12]
 8007a9e:	e7da      	b.n	8007a56 <_fflush_r+0x22>
 8007aa0:	080085a8 	.word	0x080085a8
 8007aa4:	080085c8 	.word	0x080085c8
 8007aa8:	08008588 	.word	0x08008588

08007aac <fiprintf>:
 8007aac:	b40e      	push	{r1, r2, r3}
 8007aae:	b503      	push	{r0, r1, lr}
 8007ab0:	4601      	mov	r1, r0
 8007ab2:	ab03      	add	r3, sp, #12
 8007ab4:	4805      	ldr	r0, [pc, #20]	; (8007acc <fiprintf+0x20>)
 8007ab6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007aba:	6800      	ldr	r0, [r0, #0]
 8007abc:	9301      	str	r3, [sp, #4]
 8007abe:	f000 f861 	bl	8007b84 <_vfiprintf_r>
 8007ac2:	b002      	add	sp, #8
 8007ac4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ac8:	b003      	add	sp, #12
 8007aca:	4770      	bx	lr
 8007acc:	20000010 	.word	0x20000010

08007ad0 <_gettimeofday_r>:
 8007ad0:	b538      	push	{r3, r4, r5, lr}
 8007ad2:	4d07      	ldr	r5, [pc, #28]	; (8007af0 <_gettimeofday_r+0x20>)
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	4604      	mov	r4, r0
 8007ad8:	4608      	mov	r0, r1
 8007ada:	4611      	mov	r1, r2
 8007adc:	602b      	str	r3, [r5, #0]
 8007ade:	f000 fcb9 	bl	8008454 <_gettimeofday>
 8007ae2:	1c43      	adds	r3, r0, #1
 8007ae4:	d102      	bne.n	8007aec <_gettimeofday_r+0x1c>
 8007ae6:	682b      	ldr	r3, [r5, #0]
 8007ae8:	b103      	cbz	r3, 8007aec <_gettimeofday_r+0x1c>
 8007aea:	6023      	str	r3, [r4, #0]
 8007aec:	bd38      	pop	{r3, r4, r5, pc}
 8007aee:	bf00      	nop
 8007af0:	20004bd4 	.word	0x20004bd4

08007af4 <_lseek_r>:
 8007af4:	b538      	push	{r3, r4, r5, lr}
 8007af6:	4d07      	ldr	r5, [pc, #28]	; (8007b14 <_lseek_r+0x20>)
 8007af8:	4604      	mov	r4, r0
 8007afa:	4608      	mov	r0, r1
 8007afc:	4611      	mov	r1, r2
 8007afe:	2200      	movs	r2, #0
 8007b00:	602a      	str	r2, [r5, #0]
 8007b02:	461a      	mov	r2, r3
 8007b04:	f7f9 ff62 	bl	80019cc <_lseek>
 8007b08:	1c43      	adds	r3, r0, #1
 8007b0a:	d102      	bne.n	8007b12 <_lseek_r+0x1e>
 8007b0c:	682b      	ldr	r3, [r5, #0]
 8007b0e:	b103      	cbz	r3, 8007b12 <_lseek_r+0x1e>
 8007b10:	6023      	str	r3, [r4, #0]
 8007b12:	bd38      	pop	{r3, r4, r5, pc}
 8007b14:	20004bd4 	.word	0x20004bd4

08007b18 <__malloc_lock>:
 8007b18:	4801      	ldr	r0, [pc, #4]	; (8007b20 <__malloc_lock+0x8>)
 8007b1a:	f7ff bc78 	b.w	800740e <__retarget_lock_acquire_recursive>
 8007b1e:	bf00      	nop
 8007b20:	20004bc8 	.word	0x20004bc8

08007b24 <__malloc_unlock>:
 8007b24:	4801      	ldr	r0, [pc, #4]	; (8007b2c <__malloc_unlock+0x8>)
 8007b26:	f7ff bc73 	b.w	8007410 <__retarget_lock_release_recursive>
 8007b2a:	bf00      	nop
 8007b2c:	20004bc8 	.word	0x20004bc8

08007b30 <__sfputc_r>:
 8007b30:	6893      	ldr	r3, [r2, #8]
 8007b32:	3b01      	subs	r3, #1
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	b410      	push	{r4}
 8007b38:	6093      	str	r3, [r2, #8]
 8007b3a:	da08      	bge.n	8007b4e <__sfputc_r+0x1e>
 8007b3c:	6994      	ldr	r4, [r2, #24]
 8007b3e:	42a3      	cmp	r3, r4
 8007b40:	db01      	blt.n	8007b46 <__sfputc_r+0x16>
 8007b42:	290a      	cmp	r1, #10
 8007b44:	d103      	bne.n	8007b4e <__sfputc_r+0x1e>
 8007b46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b4a:	f000 baf1 	b.w	8008130 <__swbuf_r>
 8007b4e:	6813      	ldr	r3, [r2, #0]
 8007b50:	1c58      	adds	r0, r3, #1
 8007b52:	6010      	str	r0, [r2, #0]
 8007b54:	7019      	strb	r1, [r3, #0]
 8007b56:	4608      	mov	r0, r1
 8007b58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b5c:	4770      	bx	lr

08007b5e <__sfputs_r>:
 8007b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b60:	4606      	mov	r6, r0
 8007b62:	460f      	mov	r7, r1
 8007b64:	4614      	mov	r4, r2
 8007b66:	18d5      	adds	r5, r2, r3
 8007b68:	42ac      	cmp	r4, r5
 8007b6a:	d101      	bne.n	8007b70 <__sfputs_r+0x12>
 8007b6c:	2000      	movs	r0, #0
 8007b6e:	e007      	b.n	8007b80 <__sfputs_r+0x22>
 8007b70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b74:	463a      	mov	r2, r7
 8007b76:	4630      	mov	r0, r6
 8007b78:	f7ff ffda 	bl	8007b30 <__sfputc_r>
 8007b7c:	1c43      	adds	r3, r0, #1
 8007b7e:	d1f3      	bne.n	8007b68 <__sfputs_r+0xa>
 8007b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b84 <_vfiprintf_r>:
 8007b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b88:	460d      	mov	r5, r1
 8007b8a:	b09d      	sub	sp, #116	; 0x74
 8007b8c:	4614      	mov	r4, r2
 8007b8e:	4698      	mov	r8, r3
 8007b90:	4606      	mov	r6, r0
 8007b92:	b118      	cbz	r0, 8007b9c <_vfiprintf_r+0x18>
 8007b94:	6983      	ldr	r3, [r0, #24]
 8007b96:	b90b      	cbnz	r3, 8007b9c <_vfiprintf_r+0x18>
 8007b98:	f7ff fb76 	bl	8007288 <__sinit>
 8007b9c:	4b89      	ldr	r3, [pc, #548]	; (8007dc4 <_vfiprintf_r+0x240>)
 8007b9e:	429d      	cmp	r5, r3
 8007ba0:	d11b      	bne.n	8007bda <_vfiprintf_r+0x56>
 8007ba2:	6875      	ldr	r5, [r6, #4]
 8007ba4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ba6:	07d9      	lsls	r1, r3, #31
 8007ba8:	d405      	bmi.n	8007bb6 <_vfiprintf_r+0x32>
 8007baa:	89ab      	ldrh	r3, [r5, #12]
 8007bac:	059a      	lsls	r2, r3, #22
 8007bae:	d402      	bmi.n	8007bb6 <_vfiprintf_r+0x32>
 8007bb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bb2:	f7ff fc2c 	bl	800740e <__retarget_lock_acquire_recursive>
 8007bb6:	89ab      	ldrh	r3, [r5, #12]
 8007bb8:	071b      	lsls	r3, r3, #28
 8007bba:	d501      	bpl.n	8007bc0 <_vfiprintf_r+0x3c>
 8007bbc:	692b      	ldr	r3, [r5, #16]
 8007bbe:	b9eb      	cbnz	r3, 8007bfc <_vfiprintf_r+0x78>
 8007bc0:	4629      	mov	r1, r5
 8007bc2:	4630      	mov	r0, r6
 8007bc4:	f000 fb06 	bl	80081d4 <__swsetup_r>
 8007bc8:	b1c0      	cbz	r0, 8007bfc <_vfiprintf_r+0x78>
 8007bca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bcc:	07dc      	lsls	r4, r3, #31
 8007bce:	d50e      	bpl.n	8007bee <_vfiprintf_r+0x6a>
 8007bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd4:	b01d      	add	sp, #116	; 0x74
 8007bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bda:	4b7b      	ldr	r3, [pc, #492]	; (8007dc8 <_vfiprintf_r+0x244>)
 8007bdc:	429d      	cmp	r5, r3
 8007bde:	d101      	bne.n	8007be4 <_vfiprintf_r+0x60>
 8007be0:	68b5      	ldr	r5, [r6, #8]
 8007be2:	e7df      	b.n	8007ba4 <_vfiprintf_r+0x20>
 8007be4:	4b79      	ldr	r3, [pc, #484]	; (8007dcc <_vfiprintf_r+0x248>)
 8007be6:	429d      	cmp	r5, r3
 8007be8:	bf08      	it	eq
 8007bea:	68f5      	ldreq	r5, [r6, #12]
 8007bec:	e7da      	b.n	8007ba4 <_vfiprintf_r+0x20>
 8007bee:	89ab      	ldrh	r3, [r5, #12]
 8007bf0:	0598      	lsls	r0, r3, #22
 8007bf2:	d4ed      	bmi.n	8007bd0 <_vfiprintf_r+0x4c>
 8007bf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bf6:	f7ff fc0b 	bl	8007410 <__retarget_lock_release_recursive>
 8007bfa:	e7e9      	b.n	8007bd0 <_vfiprintf_r+0x4c>
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8007c00:	2320      	movs	r3, #32
 8007c02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c06:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c0a:	2330      	movs	r3, #48	; 0x30
 8007c0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007dd0 <_vfiprintf_r+0x24c>
 8007c10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c14:	f04f 0901 	mov.w	r9, #1
 8007c18:	4623      	mov	r3, r4
 8007c1a:	469a      	mov	sl, r3
 8007c1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c20:	b10a      	cbz	r2, 8007c26 <_vfiprintf_r+0xa2>
 8007c22:	2a25      	cmp	r2, #37	; 0x25
 8007c24:	d1f9      	bne.n	8007c1a <_vfiprintf_r+0x96>
 8007c26:	ebba 0b04 	subs.w	fp, sl, r4
 8007c2a:	d00b      	beq.n	8007c44 <_vfiprintf_r+0xc0>
 8007c2c:	465b      	mov	r3, fp
 8007c2e:	4622      	mov	r2, r4
 8007c30:	4629      	mov	r1, r5
 8007c32:	4630      	mov	r0, r6
 8007c34:	f7ff ff93 	bl	8007b5e <__sfputs_r>
 8007c38:	3001      	adds	r0, #1
 8007c3a:	f000 80aa 	beq.w	8007d92 <_vfiprintf_r+0x20e>
 8007c3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c40:	445a      	add	r2, fp
 8007c42:	9209      	str	r2, [sp, #36]	; 0x24
 8007c44:	f89a 3000 	ldrb.w	r3, [sl]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f000 80a2 	beq.w	8007d92 <_vfiprintf_r+0x20e>
 8007c4e:	2300      	movs	r3, #0
 8007c50:	f04f 32ff 	mov.w	r2, #4294967295
 8007c54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c58:	f10a 0a01 	add.w	sl, sl, #1
 8007c5c:	9304      	str	r3, [sp, #16]
 8007c5e:	9307      	str	r3, [sp, #28]
 8007c60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c64:	931a      	str	r3, [sp, #104]	; 0x68
 8007c66:	4654      	mov	r4, sl
 8007c68:	2205      	movs	r2, #5
 8007c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c6e:	4858      	ldr	r0, [pc, #352]	; (8007dd0 <_vfiprintf_r+0x24c>)
 8007c70:	f7f8 fab6 	bl	80001e0 <memchr>
 8007c74:	9a04      	ldr	r2, [sp, #16]
 8007c76:	b9d8      	cbnz	r0, 8007cb0 <_vfiprintf_r+0x12c>
 8007c78:	06d1      	lsls	r1, r2, #27
 8007c7a:	bf44      	itt	mi
 8007c7c:	2320      	movmi	r3, #32
 8007c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c82:	0713      	lsls	r3, r2, #28
 8007c84:	bf44      	itt	mi
 8007c86:	232b      	movmi	r3, #43	; 0x2b
 8007c88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8007c90:	2b2a      	cmp	r3, #42	; 0x2a
 8007c92:	d015      	beq.n	8007cc0 <_vfiprintf_r+0x13c>
 8007c94:	9a07      	ldr	r2, [sp, #28]
 8007c96:	4654      	mov	r4, sl
 8007c98:	2000      	movs	r0, #0
 8007c9a:	f04f 0c0a 	mov.w	ip, #10
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ca4:	3b30      	subs	r3, #48	; 0x30
 8007ca6:	2b09      	cmp	r3, #9
 8007ca8:	d94e      	bls.n	8007d48 <_vfiprintf_r+0x1c4>
 8007caa:	b1b0      	cbz	r0, 8007cda <_vfiprintf_r+0x156>
 8007cac:	9207      	str	r2, [sp, #28]
 8007cae:	e014      	b.n	8007cda <_vfiprintf_r+0x156>
 8007cb0:	eba0 0308 	sub.w	r3, r0, r8
 8007cb4:	fa09 f303 	lsl.w	r3, r9, r3
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	9304      	str	r3, [sp, #16]
 8007cbc:	46a2      	mov	sl, r4
 8007cbe:	e7d2      	b.n	8007c66 <_vfiprintf_r+0xe2>
 8007cc0:	9b03      	ldr	r3, [sp, #12]
 8007cc2:	1d19      	adds	r1, r3, #4
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	9103      	str	r1, [sp, #12]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	bfbb      	ittet	lt
 8007ccc:	425b      	neglt	r3, r3
 8007cce:	f042 0202 	orrlt.w	r2, r2, #2
 8007cd2:	9307      	strge	r3, [sp, #28]
 8007cd4:	9307      	strlt	r3, [sp, #28]
 8007cd6:	bfb8      	it	lt
 8007cd8:	9204      	strlt	r2, [sp, #16]
 8007cda:	7823      	ldrb	r3, [r4, #0]
 8007cdc:	2b2e      	cmp	r3, #46	; 0x2e
 8007cde:	d10c      	bne.n	8007cfa <_vfiprintf_r+0x176>
 8007ce0:	7863      	ldrb	r3, [r4, #1]
 8007ce2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ce4:	d135      	bne.n	8007d52 <_vfiprintf_r+0x1ce>
 8007ce6:	9b03      	ldr	r3, [sp, #12]
 8007ce8:	1d1a      	adds	r2, r3, #4
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	9203      	str	r2, [sp, #12]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	bfb8      	it	lt
 8007cf2:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cf6:	3402      	adds	r4, #2
 8007cf8:	9305      	str	r3, [sp, #20]
 8007cfa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007de0 <_vfiprintf_r+0x25c>
 8007cfe:	7821      	ldrb	r1, [r4, #0]
 8007d00:	2203      	movs	r2, #3
 8007d02:	4650      	mov	r0, sl
 8007d04:	f7f8 fa6c 	bl	80001e0 <memchr>
 8007d08:	b140      	cbz	r0, 8007d1c <_vfiprintf_r+0x198>
 8007d0a:	2340      	movs	r3, #64	; 0x40
 8007d0c:	eba0 000a 	sub.w	r0, r0, sl
 8007d10:	fa03 f000 	lsl.w	r0, r3, r0
 8007d14:	9b04      	ldr	r3, [sp, #16]
 8007d16:	4303      	orrs	r3, r0
 8007d18:	3401      	adds	r4, #1
 8007d1a:	9304      	str	r3, [sp, #16]
 8007d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d20:	482c      	ldr	r0, [pc, #176]	; (8007dd4 <_vfiprintf_r+0x250>)
 8007d22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d26:	2206      	movs	r2, #6
 8007d28:	f7f8 fa5a 	bl	80001e0 <memchr>
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d03f      	beq.n	8007db0 <_vfiprintf_r+0x22c>
 8007d30:	4b29      	ldr	r3, [pc, #164]	; (8007dd8 <_vfiprintf_r+0x254>)
 8007d32:	bb1b      	cbnz	r3, 8007d7c <_vfiprintf_r+0x1f8>
 8007d34:	9b03      	ldr	r3, [sp, #12]
 8007d36:	3307      	adds	r3, #7
 8007d38:	f023 0307 	bic.w	r3, r3, #7
 8007d3c:	3308      	adds	r3, #8
 8007d3e:	9303      	str	r3, [sp, #12]
 8007d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d42:	443b      	add	r3, r7
 8007d44:	9309      	str	r3, [sp, #36]	; 0x24
 8007d46:	e767      	b.n	8007c18 <_vfiprintf_r+0x94>
 8007d48:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d4c:	460c      	mov	r4, r1
 8007d4e:	2001      	movs	r0, #1
 8007d50:	e7a5      	b.n	8007c9e <_vfiprintf_r+0x11a>
 8007d52:	2300      	movs	r3, #0
 8007d54:	3401      	adds	r4, #1
 8007d56:	9305      	str	r3, [sp, #20]
 8007d58:	4619      	mov	r1, r3
 8007d5a:	f04f 0c0a 	mov.w	ip, #10
 8007d5e:	4620      	mov	r0, r4
 8007d60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d64:	3a30      	subs	r2, #48	; 0x30
 8007d66:	2a09      	cmp	r2, #9
 8007d68:	d903      	bls.n	8007d72 <_vfiprintf_r+0x1ee>
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d0c5      	beq.n	8007cfa <_vfiprintf_r+0x176>
 8007d6e:	9105      	str	r1, [sp, #20]
 8007d70:	e7c3      	b.n	8007cfa <_vfiprintf_r+0x176>
 8007d72:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d76:	4604      	mov	r4, r0
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e7f0      	b.n	8007d5e <_vfiprintf_r+0x1da>
 8007d7c:	ab03      	add	r3, sp, #12
 8007d7e:	9300      	str	r3, [sp, #0]
 8007d80:	462a      	mov	r2, r5
 8007d82:	4b16      	ldr	r3, [pc, #88]	; (8007ddc <_vfiprintf_r+0x258>)
 8007d84:	a904      	add	r1, sp, #16
 8007d86:	4630      	mov	r0, r6
 8007d88:	f3af 8000 	nop.w
 8007d8c:	4607      	mov	r7, r0
 8007d8e:	1c78      	adds	r0, r7, #1
 8007d90:	d1d6      	bne.n	8007d40 <_vfiprintf_r+0x1bc>
 8007d92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d94:	07d9      	lsls	r1, r3, #31
 8007d96:	d405      	bmi.n	8007da4 <_vfiprintf_r+0x220>
 8007d98:	89ab      	ldrh	r3, [r5, #12]
 8007d9a:	059a      	lsls	r2, r3, #22
 8007d9c:	d402      	bmi.n	8007da4 <_vfiprintf_r+0x220>
 8007d9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007da0:	f7ff fb36 	bl	8007410 <__retarget_lock_release_recursive>
 8007da4:	89ab      	ldrh	r3, [r5, #12]
 8007da6:	065b      	lsls	r3, r3, #25
 8007da8:	f53f af12 	bmi.w	8007bd0 <_vfiprintf_r+0x4c>
 8007dac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dae:	e711      	b.n	8007bd4 <_vfiprintf_r+0x50>
 8007db0:	ab03      	add	r3, sp, #12
 8007db2:	9300      	str	r3, [sp, #0]
 8007db4:	462a      	mov	r2, r5
 8007db6:	4b09      	ldr	r3, [pc, #36]	; (8007ddc <_vfiprintf_r+0x258>)
 8007db8:	a904      	add	r1, sp, #16
 8007dba:	4630      	mov	r0, r6
 8007dbc:	f000 f880 	bl	8007ec0 <_printf_i>
 8007dc0:	e7e4      	b.n	8007d8c <_vfiprintf_r+0x208>
 8007dc2:	bf00      	nop
 8007dc4:	080085a8 	.word	0x080085a8
 8007dc8:	080085c8 	.word	0x080085c8
 8007dcc:	08008588 	.word	0x08008588
 8007dd0:	0800869a 	.word	0x0800869a
 8007dd4:	080086a4 	.word	0x080086a4
 8007dd8:	00000000 	.word	0x00000000
 8007ddc:	08007b5f 	.word	0x08007b5f
 8007de0:	080086a0 	.word	0x080086a0

08007de4 <_printf_common>:
 8007de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007de8:	4616      	mov	r6, r2
 8007dea:	4699      	mov	r9, r3
 8007dec:	688a      	ldr	r2, [r1, #8]
 8007dee:	690b      	ldr	r3, [r1, #16]
 8007df0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007df4:	4293      	cmp	r3, r2
 8007df6:	bfb8      	it	lt
 8007df8:	4613      	movlt	r3, r2
 8007dfa:	6033      	str	r3, [r6, #0]
 8007dfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e00:	4607      	mov	r7, r0
 8007e02:	460c      	mov	r4, r1
 8007e04:	b10a      	cbz	r2, 8007e0a <_printf_common+0x26>
 8007e06:	3301      	adds	r3, #1
 8007e08:	6033      	str	r3, [r6, #0]
 8007e0a:	6823      	ldr	r3, [r4, #0]
 8007e0c:	0699      	lsls	r1, r3, #26
 8007e0e:	bf42      	ittt	mi
 8007e10:	6833      	ldrmi	r3, [r6, #0]
 8007e12:	3302      	addmi	r3, #2
 8007e14:	6033      	strmi	r3, [r6, #0]
 8007e16:	6825      	ldr	r5, [r4, #0]
 8007e18:	f015 0506 	ands.w	r5, r5, #6
 8007e1c:	d106      	bne.n	8007e2c <_printf_common+0x48>
 8007e1e:	f104 0a19 	add.w	sl, r4, #25
 8007e22:	68e3      	ldr	r3, [r4, #12]
 8007e24:	6832      	ldr	r2, [r6, #0]
 8007e26:	1a9b      	subs	r3, r3, r2
 8007e28:	42ab      	cmp	r3, r5
 8007e2a:	dc26      	bgt.n	8007e7a <_printf_common+0x96>
 8007e2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e30:	1e13      	subs	r3, r2, #0
 8007e32:	6822      	ldr	r2, [r4, #0]
 8007e34:	bf18      	it	ne
 8007e36:	2301      	movne	r3, #1
 8007e38:	0692      	lsls	r2, r2, #26
 8007e3a:	d42b      	bmi.n	8007e94 <_printf_common+0xb0>
 8007e3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e40:	4649      	mov	r1, r9
 8007e42:	4638      	mov	r0, r7
 8007e44:	47c0      	blx	r8
 8007e46:	3001      	adds	r0, #1
 8007e48:	d01e      	beq.n	8007e88 <_printf_common+0xa4>
 8007e4a:	6823      	ldr	r3, [r4, #0]
 8007e4c:	68e5      	ldr	r5, [r4, #12]
 8007e4e:	6832      	ldr	r2, [r6, #0]
 8007e50:	f003 0306 	and.w	r3, r3, #6
 8007e54:	2b04      	cmp	r3, #4
 8007e56:	bf08      	it	eq
 8007e58:	1aad      	subeq	r5, r5, r2
 8007e5a:	68a3      	ldr	r3, [r4, #8]
 8007e5c:	6922      	ldr	r2, [r4, #16]
 8007e5e:	bf0c      	ite	eq
 8007e60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e64:	2500      	movne	r5, #0
 8007e66:	4293      	cmp	r3, r2
 8007e68:	bfc4      	itt	gt
 8007e6a:	1a9b      	subgt	r3, r3, r2
 8007e6c:	18ed      	addgt	r5, r5, r3
 8007e6e:	2600      	movs	r6, #0
 8007e70:	341a      	adds	r4, #26
 8007e72:	42b5      	cmp	r5, r6
 8007e74:	d11a      	bne.n	8007eac <_printf_common+0xc8>
 8007e76:	2000      	movs	r0, #0
 8007e78:	e008      	b.n	8007e8c <_printf_common+0xa8>
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	4652      	mov	r2, sl
 8007e7e:	4649      	mov	r1, r9
 8007e80:	4638      	mov	r0, r7
 8007e82:	47c0      	blx	r8
 8007e84:	3001      	adds	r0, #1
 8007e86:	d103      	bne.n	8007e90 <_printf_common+0xac>
 8007e88:	f04f 30ff 	mov.w	r0, #4294967295
 8007e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e90:	3501      	adds	r5, #1
 8007e92:	e7c6      	b.n	8007e22 <_printf_common+0x3e>
 8007e94:	18e1      	adds	r1, r4, r3
 8007e96:	1c5a      	adds	r2, r3, #1
 8007e98:	2030      	movs	r0, #48	; 0x30
 8007e9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e9e:	4422      	add	r2, r4
 8007ea0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ea4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ea8:	3302      	adds	r3, #2
 8007eaa:	e7c7      	b.n	8007e3c <_printf_common+0x58>
 8007eac:	2301      	movs	r3, #1
 8007eae:	4622      	mov	r2, r4
 8007eb0:	4649      	mov	r1, r9
 8007eb2:	4638      	mov	r0, r7
 8007eb4:	47c0      	blx	r8
 8007eb6:	3001      	adds	r0, #1
 8007eb8:	d0e6      	beq.n	8007e88 <_printf_common+0xa4>
 8007eba:	3601      	adds	r6, #1
 8007ebc:	e7d9      	b.n	8007e72 <_printf_common+0x8e>
	...

08007ec0 <_printf_i>:
 8007ec0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ec4:	7e0f      	ldrb	r7, [r1, #24]
 8007ec6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ec8:	2f78      	cmp	r7, #120	; 0x78
 8007eca:	4691      	mov	r9, r2
 8007ecc:	4680      	mov	r8, r0
 8007ece:	460c      	mov	r4, r1
 8007ed0:	469a      	mov	sl, r3
 8007ed2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007ed6:	d807      	bhi.n	8007ee8 <_printf_i+0x28>
 8007ed8:	2f62      	cmp	r7, #98	; 0x62
 8007eda:	d80a      	bhi.n	8007ef2 <_printf_i+0x32>
 8007edc:	2f00      	cmp	r7, #0
 8007ede:	f000 80d8 	beq.w	8008092 <_printf_i+0x1d2>
 8007ee2:	2f58      	cmp	r7, #88	; 0x58
 8007ee4:	f000 80a3 	beq.w	800802e <_printf_i+0x16e>
 8007ee8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007eec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ef0:	e03a      	b.n	8007f68 <_printf_i+0xa8>
 8007ef2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ef6:	2b15      	cmp	r3, #21
 8007ef8:	d8f6      	bhi.n	8007ee8 <_printf_i+0x28>
 8007efa:	a101      	add	r1, pc, #4	; (adr r1, 8007f00 <_printf_i+0x40>)
 8007efc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f00:	08007f59 	.word	0x08007f59
 8007f04:	08007f6d 	.word	0x08007f6d
 8007f08:	08007ee9 	.word	0x08007ee9
 8007f0c:	08007ee9 	.word	0x08007ee9
 8007f10:	08007ee9 	.word	0x08007ee9
 8007f14:	08007ee9 	.word	0x08007ee9
 8007f18:	08007f6d 	.word	0x08007f6d
 8007f1c:	08007ee9 	.word	0x08007ee9
 8007f20:	08007ee9 	.word	0x08007ee9
 8007f24:	08007ee9 	.word	0x08007ee9
 8007f28:	08007ee9 	.word	0x08007ee9
 8007f2c:	08008079 	.word	0x08008079
 8007f30:	08007f9d 	.word	0x08007f9d
 8007f34:	0800805b 	.word	0x0800805b
 8007f38:	08007ee9 	.word	0x08007ee9
 8007f3c:	08007ee9 	.word	0x08007ee9
 8007f40:	0800809b 	.word	0x0800809b
 8007f44:	08007ee9 	.word	0x08007ee9
 8007f48:	08007f9d 	.word	0x08007f9d
 8007f4c:	08007ee9 	.word	0x08007ee9
 8007f50:	08007ee9 	.word	0x08007ee9
 8007f54:	08008063 	.word	0x08008063
 8007f58:	682b      	ldr	r3, [r5, #0]
 8007f5a:	1d1a      	adds	r2, r3, #4
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	602a      	str	r2, [r5, #0]
 8007f60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e0a3      	b.n	80080b4 <_printf_i+0x1f4>
 8007f6c:	6820      	ldr	r0, [r4, #0]
 8007f6e:	6829      	ldr	r1, [r5, #0]
 8007f70:	0606      	lsls	r6, r0, #24
 8007f72:	f101 0304 	add.w	r3, r1, #4
 8007f76:	d50a      	bpl.n	8007f8e <_printf_i+0xce>
 8007f78:	680e      	ldr	r6, [r1, #0]
 8007f7a:	602b      	str	r3, [r5, #0]
 8007f7c:	2e00      	cmp	r6, #0
 8007f7e:	da03      	bge.n	8007f88 <_printf_i+0xc8>
 8007f80:	232d      	movs	r3, #45	; 0x2d
 8007f82:	4276      	negs	r6, r6
 8007f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f88:	485e      	ldr	r0, [pc, #376]	; (8008104 <_printf_i+0x244>)
 8007f8a:	230a      	movs	r3, #10
 8007f8c:	e019      	b.n	8007fc2 <_printf_i+0x102>
 8007f8e:	680e      	ldr	r6, [r1, #0]
 8007f90:	602b      	str	r3, [r5, #0]
 8007f92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f96:	bf18      	it	ne
 8007f98:	b236      	sxthne	r6, r6
 8007f9a:	e7ef      	b.n	8007f7c <_printf_i+0xbc>
 8007f9c:	682b      	ldr	r3, [r5, #0]
 8007f9e:	6820      	ldr	r0, [r4, #0]
 8007fa0:	1d19      	adds	r1, r3, #4
 8007fa2:	6029      	str	r1, [r5, #0]
 8007fa4:	0601      	lsls	r1, r0, #24
 8007fa6:	d501      	bpl.n	8007fac <_printf_i+0xec>
 8007fa8:	681e      	ldr	r6, [r3, #0]
 8007faa:	e002      	b.n	8007fb2 <_printf_i+0xf2>
 8007fac:	0646      	lsls	r6, r0, #25
 8007fae:	d5fb      	bpl.n	8007fa8 <_printf_i+0xe8>
 8007fb0:	881e      	ldrh	r6, [r3, #0]
 8007fb2:	4854      	ldr	r0, [pc, #336]	; (8008104 <_printf_i+0x244>)
 8007fb4:	2f6f      	cmp	r7, #111	; 0x6f
 8007fb6:	bf0c      	ite	eq
 8007fb8:	2308      	moveq	r3, #8
 8007fba:	230a      	movne	r3, #10
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fc2:	6865      	ldr	r5, [r4, #4]
 8007fc4:	60a5      	str	r5, [r4, #8]
 8007fc6:	2d00      	cmp	r5, #0
 8007fc8:	bfa2      	ittt	ge
 8007fca:	6821      	ldrge	r1, [r4, #0]
 8007fcc:	f021 0104 	bicge.w	r1, r1, #4
 8007fd0:	6021      	strge	r1, [r4, #0]
 8007fd2:	b90e      	cbnz	r6, 8007fd8 <_printf_i+0x118>
 8007fd4:	2d00      	cmp	r5, #0
 8007fd6:	d04d      	beq.n	8008074 <_printf_i+0x1b4>
 8007fd8:	4615      	mov	r5, r2
 8007fda:	fbb6 f1f3 	udiv	r1, r6, r3
 8007fde:	fb03 6711 	mls	r7, r3, r1, r6
 8007fe2:	5dc7      	ldrb	r7, [r0, r7]
 8007fe4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007fe8:	4637      	mov	r7, r6
 8007fea:	42bb      	cmp	r3, r7
 8007fec:	460e      	mov	r6, r1
 8007fee:	d9f4      	bls.n	8007fda <_printf_i+0x11a>
 8007ff0:	2b08      	cmp	r3, #8
 8007ff2:	d10b      	bne.n	800800c <_printf_i+0x14c>
 8007ff4:	6823      	ldr	r3, [r4, #0]
 8007ff6:	07de      	lsls	r6, r3, #31
 8007ff8:	d508      	bpl.n	800800c <_printf_i+0x14c>
 8007ffa:	6923      	ldr	r3, [r4, #16]
 8007ffc:	6861      	ldr	r1, [r4, #4]
 8007ffe:	4299      	cmp	r1, r3
 8008000:	bfde      	ittt	le
 8008002:	2330      	movle	r3, #48	; 0x30
 8008004:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008008:	f105 35ff 	addle.w	r5, r5, #4294967295
 800800c:	1b52      	subs	r2, r2, r5
 800800e:	6122      	str	r2, [r4, #16]
 8008010:	f8cd a000 	str.w	sl, [sp]
 8008014:	464b      	mov	r3, r9
 8008016:	aa03      	add	r2, sp, #12
 8008018:	4621      	mov	r1, r4
 800801a:	4640      	mov	r0, r8
 800801c:	f7ff fee2 	bl	8007de4 <_printf_common>
 8008020:	3001      	adds	r0, #1
 8008022:	d14c      	bne.n	80080be <_printf_i+0x1fe>
 8008024:	f04f 30ff 	mov.w	r0, #4294967295
 8008028:	b004      	add	sp, #16
 800802a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800802e:	4835      	ldr	r0, [pc, #212]	; (8008104 <_printf_i+0x244>)
 8008030:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008034:	6829      	ldr	r1, [r5, #0]
 8008036:	6823      	ldr	r3, [r4, #0]
 8008038:	f851 6b04 	ldr.w	r6, [r1], #4
 800803c:	6029      	str	r1, [r5, #0]
 800803e:	061d      	lsls	r5, r3, #24
 8008040:	d514      	bpl.n	800806c <_printf_i+0x1ac>
 8008042:	07df      	lsls	r7, r3, #31
 8008044:	bf44      	itt	mi
 8008046:	f043 0320 	orrmi.w	r3, r3, #32
 800804a:	6023      	strmi	r3, [r4, #0]
 800804c:	b91e      	cbnz	r6, 8008056 <_printf_i+0x196>
 800804e:	6823      	ldr	r3, [r4, #0]
 8008050:	f023 0320 	bic.w	r3, r3, #32
 8008054:	6023      	str	r3, [r4, #0]
 8008056:	2310      	movs	r3, #16
 8008058:	e7b0      	b.n	8007fbc <_printf_i+0xfc>
 800805a:	6823      	ldr	r3, [r4, #0]
 800805c:	f043 0320 	orr.w	r3, r3, #32
 8008060:	6023      	str	r3, [r4, #0]
 8008062:	2378      	movs	r3, #120	; 0x78
 8008064:	4828      	ldr	r0, [pc, #160]	; (8008108 <_printf_i+0x248>)
 8008066:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800806a:	e7e3      	b.n	8008034 <_printf_i+0x174>
 800806c:	0659      	lsls	r1, r3, #25
 800806e:	bf48      	it	mi
 8008070:	b2b6      	uxthmi	r6, r6
 8008072:	e7e6      	b.n	8008042 <_printf_i+0x182>
 8008074:	4615      	mov	r5, r2
 8008076:	e7bb      	b.n	8007ff0 <_printf_i+0x130>
 8008078:	682b      	ldr	r3, [r5, #0]
 800807a:	6826      	ldr	r6, [r4, #0]
 800807c:	6961      	ldr	r1, [r4, #20]
 800807e:	1d18      	adds	r0, r3, #4
 8008080:	6028      	str	r0, [r5, #0]
 8008082:	0635      	lsls	r5, r6, #24
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	d501      	bpl.n	800808c <_printf_i+0x1cc>
 8008088:	6019      	str	r1, [r3, #0]
 800808a:	e002      	b.n	8008092 <_printf_i+0x1d2>
 800808c:	0670      	lsls	r0, r6, #25
 800808e:	d5fb      	bpl.n	8008088 <_printf_i+0x1c8>
 8008090:	8019      	strh	r1, [r3, #0]
 8008092:	2300      	movs	r3, #0
 8008094:	6123      	str	r3, [r4, #16]
 8008096:	4615      	mov	r5, r2
 8008098:	e7ba      	b.n	8008010 <_printf_i+0x150>
 800809a:	682b      	ldr	r3, [r5, #0]
 800809c:	1d1a      	adds	r2, r3, #4
 800809e:	602a      	str	r2, [r5, #0]
 80080a0:	681d      	ldr	r5, [r3, #0]
 80080a2:	6862      	ldr	r2, [r4, #4]
 80080a4:	2100      	movs	r1, #0
 80080a6:	4628      	mov	r0, r5
 80080a8:	f7f8 f89a 	bl	80001e0 <memchr>
 80080ac:	b108      	cbz	r0, 80080b2 <_printf_i+0x1f2>
 80080ae:	1b40      	subs	r0, r0, r5
 80080b0:	6060      	str	r0, [r4, #4]
 80080b2:	6863      	ldr	r3, [r4, #4]
 80080b4:	6123      	str	r3, [r4, #16]
 80080b6:	2300      	movs	r3, #0
 80080b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080bc:	e7a8      	b.n	8008010 <_printf_i+0x150>
 80080be:	6923      	ldr	r3, [r4, #16]
 80080c0:	462a      	mov	r2, r5
 80080c2:	4649      	mov	r1, r9
 80080c4:	4640      	mov	r0, r8
 80080c6:	47d0      	blx	sl
 80080c8:	3001      	adds	r0, #1
 80080ca:	d0ab      	beq.n	8008024 <_printf_i+0x164>
 80080cc:	6823      	ldr	r3, [r4, #0]
 80080ce:	079b      	lsls	r3, r3, #30
 80080d0:	d413      	bmi.n	80080fa <_printf_i+0x23a>
 80080d2:	68e0      	ldr	r0, [r4, #12]
 80080d4:	9b03      	ldr	r3, [sp, #12]
 80080d6:	4298      	cmp	r0, r3
 80080d8:	bfb8      	it	lt
 80080da:	4618      	movlt	r0, r3
 80080dc:	e7a4      	b.n	8008028 <_printf_i+0x168>
 80080de:	2301      	movs	r3, #1
 80080e0:	4632      	mov	r2, r6
 80080e2:	4649      	mov	r1, r9
 80080e4:	4640      	mov	r0, r8
 80080e6:	47d0      	blx	sl
 80080e8:	3001      	adds	r0, #1
 80080ea:	d09b      	beq.n	8008024 <_printf_i+0x164>
 80080ec:	3501      	adds	r5, #1
 80080ee:	68e3      	ldr	r3, [r4, #12]
 80080f0:	9903      	ldr	r1, [sp, #12]
 80080f2:	1a5b      	subs	r3, r3, r1
 80080f4:	42ab      	cmp	r3, r5
 80080f6:	dcf2      	bgt.n	80080de <_printf_i+0x21e>
 80080f8:	e7eb      	b.n	80080d2 <_printf_i+0x212>
 80080fa:	2500      	movs	r5, #0
 80080fc:	f104 0619 	add.w	r6, r4, #25
 8008100:	e7f5      	b.n	80080ee <_printf_i+0x22e>
 8008102:	bf00      	nop
 8008104:	080086ab 	.word	0x080086ab
 8008108:	080086bc 	.word	0x080086bc

0800810c <_read_r>:
 800810c:	b538      	push	{r3, r4, r5, lr}
 800810e:	4d07      	ldr	r5, [pc, #28]	; (800812c <_read_r+0x20>)
 8008110:	4604      	mov	r4, r0
 8008112:	4608      	mov	r0, r1
 8008114:	4611      	mov	r1, r2
 8008116:	2200      	movs	r2, #0
 8008118:	602a      	str	r2, [r5, #0]
 800811a:	461a      	mov	r2, r3
 800811c:	f7f9 fbf6 	bl	800190c <_read>
 8008120:	1c43      	adds	r3, r0, #1
 8008122:	d102      	bne.n	800812a <_read_r+0x1e>
 8008124:	682b      	ldr	r3, [r5, #0]
 8008126:	b103      	cbz	r3, 800812a <_read_r+0x1e>
 8008128:	6023      	str	r3, [r4, #0]
 800812a:	bd38      	pop	{r3, r4, r5, pc}
 800812c:	20004bd4 	.word	0x20004bd4

08008130 <__swbuf_r>:
 8008130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008132:	460e      	mov	r6, r1
 8008134:	4614      	mov	r4, r2
 8008136:	4605      	mov	r5, r0
 8008138:	b118      	cbz	r0, 8008142 <__swbuf_r+0x12>
 800813a:	6983      	ldr	r3, [r0, #24]
 800813c:	b90b      	cbnz	r3, 8008142 <__swbuf_r+0x12>
 800813e:	f7ff f8a3 	bl	8007288 <__sinit>
 8008142:	4b21      	ldr	r3, [pc, #132]	; (80081c8 <__swbuf_r+0x98>)
 8008144:	429c      	cmp	r4, r3
 8008146:	d12b      	bne.n	80081a0 <__swbuf_r+0x70>
 8008148:	686c      	ldr	r4, [r5, #4]
 800814a:	69a3      	ldr	r3, [r4, #24]
 800814c:	60a3      	str	r3, [r4, #8]
 800814e:	89a3      	ldrh	r3, [r4, #12]
 8008150:	071a      	lsls	r2, r3, #28
 8008152:	d52f      	bpl.n	80081b4 <__swbuf_r+0x84>
 8008154:	6923      	ldr	r3, [r4, #16]
 8008156:	b36b      	cbz	r3, 80081b4 <__swbuf_r+0x84>
 8008158:	6923      	ldr	r3, [r4, #16]
 800815a:	6820      	ldr	r0, [r4, #0]
 800815c:	1ac0      	subs	r0, r0, r3
 800815e:	6963      	ldr	r3, [r4, #20]
 8008160:	b2f6      	uxtb	r6, r6
 8008162:	4283      	cmp	r3, r0
 8008164:	4637      	mov	r7, r6
 8008166:	dc04      	bgt.n	8008172 <__swbuf_r+0x42>
 8008168:	4621      	mov	r1, r4
 800816a:	4628      	mov	r0, r5
 800816c:	f7ff fc62 	bl	8007a34 <_fflush_r>
 8008170:	bb30      	cbnz	r0, 80081c0 <__swbuf_r+0x90>
 8008172:	68a3      	ldr	r3, [r4, #8]
 8008174:	3b01      	subs	r3, #1
 8008176:	60a3      	str	r3, [r4, #8]
 8008178:	6823      	ldr	r3, [r4, #0]
 800817a:	1c5a      	adds	r2, r3, #1
 800817c:	6022      	str	r2, [r4, #0]
 800817e:	701e      	strb	r6, [r3, #0]
 8008180:	6963      	ldr	r3, [r4, #20]
 8008182:	3001      	adds	r0, #1
 8008184:	4283      	cmp	r3, r0
 8008186:	d004      	beq.n	8008192 <__swbuf_r+0x62>
 8008188:	89a3      	ldrh	r3, [r4, #12]
 800818a:	07db      	lsls	r3, r3, #31
 800818c:	d506      	bpl.n	800819c <__swbuf_r+0x6c>
 800818e:	2e0a      	cmp	r6, #10
 8008190:	d104      	bne.n	800819c <__swbuf_r+0x6c>
 8008192:	4621      	mov	r1, r4
 8008194:	4628      	mov	r0, r5
 8008196:	f7ff fc4d 	bl	8007a34 <_fflush_r>
 800819a:	b988      	cbnz	r0, 80081c0 <__swbuf_r+0x90>
 800819c:	4638      	mov	r0, r7
 800819e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081a0:	4b0a      	ldr	r3, [pc, #40]	; (80081cc <__swbuf_r+0x9c>)
 80081a2:	429c      	cmp	r4, r3
 80081a4:	d101      	bne.n	80081aa <__swbuf_r+0x7a>
 80081a6:	68ac      	ldr	r4, [r5, #8]
 80081a8:	e7cf      	b.n	800814a <__swbuf_r+0x1a>
 80081aa:	4b09      	ldr	r3, [pc, #36]	; (80081d0 <__swbuf_r+0xa0>)
 80081ac:	429c      	cmp	r4, r3
 80081ae:	bf08      	it	eq
 80081b0:	68ec      	ldreq	r4, [r5, #12]
 80081b2:	e7ca      	b.n	800814a <__swbuf_r+0x1a>
 80081b4:	4621      	mov	r1, r4
 80081b6:	4628      	mov	r0, r5
 80081b8:	f000 f80c 	bl	80081d4 <__swsetup_r>
 80081bc:	2800      	cmp	r0, #0
 80081be:	d0cb      	beq.n	8008158 <__swbuf_r+0x28>
 80081c0:	f04f 37ff 	mov.w	r7, #4294967295
 80081c4:	e7ea      	b.n	800819c <__swbuf_r+0x6c>
 80081c6:	bf00      	nop
 80081c8:	080085a8 	.word	0x080085a8
 80081cc:	080085c8 	.word	0x080085c8
 80081d0:	08008588 	.word	0x08008588

080081d4 <__swsetup_r>:
 80081d4:	4b32      	ldr	r3, [pc, #200]	; (80082a0 <__swsetup_r+0xcc>)
 80081d6:	b570      	push	{r4, r5, r6, lr}
 80081d8:	681d      	ldr	r5, [r3, #0]
 80081da:	4606      	mov	r6, r0
 80081dc:	460c      	mov	r4, r1
 80081de:	b125      	cbz	r5, 80081ea <__swsetup_r+0x16>
 80081e0:	69ab      	ldr	r3, [r5, #24]
 80081e2:	b913      	cbnz	r3, 80081ea <__swsetup_r+0x16>
 80081e4:	4628      	mov	r0, r5
 80081e6:	f7ff f84f 	bl	8007288 <__sinit>
 80081ea:	4b2e      	ldr	r3, [pc, #184]	; (80082a4 <__swsetup_r+0xd0>)
 80081ec:	429c      	cmp	r4, r3
 80081ee:	d10f      	bne.n	8008210 <__swsetup_r+0x3c>
 80081f0:	686c      	ldr	r4, [r5, #4]
 80081f2:	89a3      	ldrh	r3, [r4, #12]
 80081f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081f8:	0719      	lsls	r1, r3, #28
 80081fa:	d42c      	bmi.n	8008256 <__swsetup_r+0x82>
 80081fc:	06dd      	lsls	r5, r3, #27
 80081fe:	d411      	bmi.n	8008224 <__swsetup_r+0x50>
 8008200:	2309      	movs	r3, #9
 8008202:	6033      	str	r3, [r6, #0]
 8008204:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008208:	81a3      	strh	r3, [r4, #12]
 800820a:	f04f 30ff 	mov.w	r0, #4294967295
 800820e:	e03e      	b.n	800828e <__swsetup_r+0xba>
 8008210:	4b25      	ldr	r3, [pc, #148]	; (80082a8 <__swsetup_r+0xd4>)
 8008212:	429c      	cmp	r4, r3
 8008214:	d101      	bne.n	800821a <__swsetup_r+0x46>
 8008216:	68ac      	ldr	r4, [r5, #8]
 8008218:	e7eb      	b.n	80081f2 <__swsetup_r+0x1e>
 800821a:	4b24      	ldr	r3, [pc, #144]	; (80082ac <__swsetup_r+0xd8>)
 800821c:	429c      	cmp	r4, r3
 800821e:	bf08      	it	eq
 8008220:	68ec      	ldreq	r4, [r5, #12]
 8008222:	e7e6      	b.n	80081f2 <__swsetup_r+0x1e>
 8008224:	0758      	lsls	r0, r3, #29
 8008226:	d512      	bpl.n	800824e <__swsetup_r+0x7a>
 8008228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800822a:	b141      	cbz	r1, 800823e <__swsetup_r+0x6a>
 800822c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008230:	4299      	cmp	r1, r3
 8008232:	d002      	beq.n	800823a <__swsetup_r+0x66>
 8008234:	4630      	mov	r0, r6
 8008236:	f7ff f913 	bl	8007460 <_free_r>
 800823a:	2300      	movs	r3, #0
 800823c:	6363      	str	r3, [r4, #52]	; 0x34
 800823e:	89a3      	ldrh	r3, [r4, #12]
 8008240:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008244:	81a3      	strh	r3, [r4, #12]
 8008246:	2300      	movs	r3, #0
 8008248:	6063      	str	r3, [r4, #4]
 800824a:	6923      	ldr	r3, [r4, #16]
 800824c:	6023      	str	r3, [r4, #0]
 800824e:	89a3      	ldrh	r3, [r4, #12]
 8008250:	f043 0308 	orr.w	r3, r3, #8
 8008254:	81a3      	strh	r3, [r4, #12]
 8008256:	6923      	ldr	r3, [r4, #16]
 8008258:	b94b      	cbnz	r3, 800826e <__swsetup_r+0x9a>
 800825a:	89a3      	ldrh	r3, [r4, #12]
 800825c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008264:	d003      	beq.n	800826e <__swsetup_r+0x9a>
 8008266:	4621      	mov	r1, r4
 8008268:	4630      	mov	r0, r6
 800826a:	f000 f84d 	bl	8008308 <__smakebuf_r>
 800826e:	89a0      	ldrh	r0, [r4, #12]
 8008270:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008274:	f010 0301 	ands.w	r3, r0, #1
 8008278:	d00a      	beq.n	8008290 <__swsetup_r+0xbc>
 800827a:	2300      	movs	r3, #0
 800827c:	60a3      	str	r3, [r4, #8]
 800827e:	6963      	ldr	r3, [r4, #20]
 8008280:	425b      	negs	r3, r3
 8008282:	61a3      	str	r3, [r4, #24]
 8008284:	6923      	ldr	r3, [r4, #16]
 8008286:	b943      	cbnz	r3, 800829a <__swsetup_r+0xc6>
 8008288:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800828c:	d1ba      	bne.n	8008204 <__swsetup_r+0x30>
 800828e:	bd70      	pop	{r4, r5, r6, pc}
 8008290:	0781      	lsls	r1, r0, #30
 8008292:	bf58      	it	pl
 8008294:	6963      	ldrpl	r3, [r4, #20]
 8008296:	60a3      	str	r3, [r4, #8]
 8008298:	e7f4      	b.n	8008284 <__swsetup_r+0xb0>
 800829a:	2000      	movs	r0, #0
 800829c:	e7f7      	b.n	800828e <__swsetup_r+0xba>
 800829e:	bf00      	nop
 80082a0:	20000010 	.word	0x20000010
 80082a4:	080085a8 	.word	0x080085a8
 80082a8:	080085c8 	.word	0x080085c8
 80082ac:	08008588 	.word	0x08008588

080082b0 <abort>:
 80082b0:	b508      	push	{r3, lr}
 80082b2:	2006      	movs	r0, #6
 80082b4:	f000 f890 	bl	80083d8 <raise>
 80082b8:	2001      	movs	r0, #1
 80082ba:	f7f9 fb1d 	bl	80018f8 <_exit>

080082be <__swhatbuf_r>:
 80082be:	b570      	push	{r4, r5, r6, lr}
 80082c0:	460e      	mov	r6, r1
 80082c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082c6:	2900      	cmp	r1, #0
 80082c8:	b096      	sub	sp, #88	; 0x58
 80082ca:	4614      	mov	r4, r2
 80082cc:	461d      	mov	r5, r3
 80082ce:	da08      	bge.n	80082e2 <__swhatbuf_r+0x24>
 80082d0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80082d4:	2200      	movs	r2, #0
 80082d6:	602a      	str	r2, [r5, #0]
 80082d8:	061a      	lsls	r2, r3, #24
 80082da:	d410      	bmi.n	80082fe <__swhatbuf_r+0x40>
 80082dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082e0:	e00e      	b.n	8008300 <__swhatbuf_r+0x42>
 80082e2:	466a      	mov	r2, sp
 80082e4:	f000 f894 	bl	8008410 <_fstat_r>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	dbf1      	blt.n	80082d0 <__swhatbuf_r+0x12>
 80082ec:	9a01      	ldr	r2, [sp, #4]
 80082ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80082f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80082f6:	425a      	negs	r2, r3
 80082f8:	415a      	adcs	r2, r3
 80082fa:	602a      	str	r2, [r5, #0]
 80082fc:	e7ee      	b.n	80082dc <__swhatbuf_r+0x1e>
 80082fe:	2340      	movs	r3, #64	; 0x40
 8008300:	2000      	movs	r0, #0
 8008302:	6023      	str	r3, [r4, #0]
 8008304:	b016      	add	sp, #88	; 0x58
 8008306:	bd70      	pop	{r4, r5, r6, pc}

08008308 <__smakebuf_r>:
 8008308:	898b      	ldrh	r3, [r1, #12]
 800830a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800830c:	079d      	lsls	r5, r3, #30
 800830e:	4606      	mov	r6, r0
 8008310:	460c      	mov	r4, r1
 8008312:	d507      	bpl.n	8008324 <__smakebuf_r+0x1c>
 8008314:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008318:	6023      	str	r3, [r4, #0]
 800831a:	6123      	str	r3, [r4, #16]
 800831c:	2301      	movs	r3, #1
 800831e:	6163      	str	r3, [r4, #20]
 8008320:	b002      	add	sp, #8
 8008322:	bd70      	pop	{r4, r5, r6, pc}
 8008324:	ab01      	add	r3, sp, #4
 8008326:	466a      	mov	r2, sp
 8008328:	f7ff ffc9 	bl	80082be <__swhatbuf_r>
 800832c:	9900      	ldr	r1, [sp, #0]
 800832e:	4605      	mov	r5, r0
 8008330:	4630      	mov	r0, r6
 8008332:	f7ff f901 	bl	8007538 <_malloc_r>
 8008336:	b948      	cbnz	r0, 800834c <__smakebuf_r+0x44>
 8008338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800833c:	059a      	lsls	r2, r3, #22
 800833e:	d4ef      	bmi.n	8008320 <__smakebuf_r+0x18>
 8008340:	f023 0303 	bic.w	r3, r3, #3
 8008344:	f043 0302 	orr.w	r3, r3, #2
 8008348:	81a3      	strh	r3, [r4, #12]
 800834a:	e7e3      	b.n	8008314 <__smakebuf_r+0xc>
 800834c:	4b0d      	ldr	r3, [pc, #52]	; (8008384 <__smakebuf_r+0x7c>)
 800834e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008350:	89a3      	ldrh	r3, [r4, #12]
 8008352:	6020      	str	r0, [r4, #0]
 8008354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008358:	81a3      	strh	r3, [r4, #12]
 800835a:	9b00      	ldr	r3, [sp, #0]
 800835c:	6163      	str	r3, [r4, #20]
 800835e:	9b01      	ldr	r3, [sp, #4]
 8008360:	6120      	str	r0, [r4, #16]
 8008362:	b15b      	cbz	r3, 800837c <__smakebuf_r+0x74>
 8008364:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008368:	4630      	mov	r0, r6
 800836a:	f000 f863 	bl	8008434 <_isatty_r>
 800836e:	b128      	cbz	r0, 800837c <__smakebuf_r+0x74>
 8008370:	89a3      	ldrh	r3, [r4, #12]
 8008372:	f023 0303 	bic.w	r3, r3, #3
 8008376:	f043 0301 	orr.w	r3, r3, #1
 800837a:	81a3      	strh	r3, [r4, #12]
 800837c:	89a0      	ldrh	r0, [r4, #12]
 800837e:	4305      	orrs	r5, r0
 8008380:	81a5      	strh	r5, [r4, #12]
 8008382:	e7cd      	b.n	8008320 <__smakebuf_r+0x18>
 8008384:	08007221 	.word	0x08007221

08008388 <_raise_r>:
 8008388:	291f      	cmp	r1, #31
 800838a:	b538      	push	{r3, r4, r5, lr}
 800838c:	4604      	mov	r4, r0
 800838e:	460d      	mov	r5, r1
 8008390:	d904      	bls.n	800839c <_raise_r+0x14>
 8008392:	2316      	movs	r3, #22
 8008394:	6003      	str	r3, [r0, #0]
 8008396:	f04f 30ff 	mov.w	r0, #4294967295
 800839a:	bd38      	pop	{r3, r4, r5, pc}
 800839c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800839e:	b112      	cbz	r2, 80083a6 <_raise_r+0x1e>
 80083a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80083a4:	b94b      	cbnz	r3, 80083ba <_raise_r+0x32>
 80083a6:	4620      	mov	r0, r4
 80083a8:	f000 f830 	bl	800840c <_getpid_r>
 80083ac:	462a      	mov	r2, r5
 80083ae:	4601      	mov	r1, r0
 80083b0:	4620      	mov	r0, r4
 80083b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083b6:	f000 b817 	b.w	80083e8 <_kill_r>
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d00a      	beq.n	80083d4 <_raise_r+0x4c>
 80083be:	1c59      	adds	r1, r3, #1
 80083c0:	d103      	bne.n	80083ca <_raise_r+0x42>
 80083c2:	2316      	movs	r3, #22
 80083c4:	6003      	str	r3, [r0, #0]
 80083c6:	2001      	movs	r0, #1
 80083c8:	e7e7      	b.n	800839a <_raise_r+0x12>
 80083ca:	2400      	movs	r4, #0
 80083cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80083d0:	4628      	mov	r0, r5
 80083d2:	4798      	blx	r3
 80083d4:	2000      	movs	r0, #0
 80083d6:	e7e0      	b.n	800839a <_raise_r+0x12>

080083d8 <raise>:
 80083d8:	4b02      	ldr	r3, [pc, #8]	; (80083e4 <raise+0xc>)
 80083da:	4601      	mov	r1, r0
 80083dc:	6818      	ldr	r0, [r3, #0]
 80083de:	f7ff bfd3 	b.w	8008388 <_raise_r>
 80083e2:	bf00      	nop
 80083e4:	20000010 	.word	0x20000010

080083e8 <_kill_r>:
 80083e8:	b538      	push	{r3, r4, r5, lr}
 80083ea:	4d07      	ldr	r5, [pc, #28]	; (8008408 <_kill_r+0x20>)
 80083ec:	2300      	movs	r3, #0
 80083ee:	4604      	mov	r4, r0
 80083f0:	4608      	mov	r0, r1
 80083f2:	4611      	mov	r1, r2
 80083f4:	602b      	str	r3, [r5, #0]
 80083f6:	f7f9 fa6f 	bl	80018d8 <_kill>
 80083fa:	1c43      	adds	r3, r0, #1
 80083fc:	d102      	bne.n	8008404 <_kill_r+0x1c>
 80083fe:	682b      	ldr	r3, [r5, #0]
 8008400:	b103      	cbz	r3, 8008404 <_kill_r+0x1c>
 8008402:	6023      	str	r3, [r4, #0]
 8008404:	bd38      	pop	{r3, r4, r5, pc}
 8008406:	bf00      	nop
 8008408:	20004bd4 	.word	0x20004bd4

0800840c <_getpid_r>:
 800840c:	f7f9 ba5c 	b.w	80018c8 <_getpid>

08008410 <_fstat_r>:
 8008410:	b538      	push	{r3, r4, r5, lr}
 8008412:	4d07      	ldr	r5, [pc, #28]	; (8008430 <_fstat_r+0x20>)
 8008414:	2300      	movs	r3, #0
 8008416:	4604      	mov	r4, r0
 8008418:	4608      	mov	r0, r1
 800841a:	4611      	mov	r1, r2
 800841c:	602b      	str	r3, [r5, #0]
 800841e:	f7f9 faba 	bl	8001996 <_fstat>
 8008422:	1c43      	adds	r3, r0, #1
 8008424:	d102      	bne.n	800842c <_fstat_r+0x1c>
 8008426:	682b      	ldr	r3, [r5, #0]
 8008428:	b103      	cbz	r3, 800842c <_fstat_r+0x1c>
 800842a:	6023      	str	r3, [r4, #0]
 800842c:	bd38      	pop	{r3, r4, r5, pc}
 800842e:	bf00      	nop
 8008430:	20004bd4 	.word	0x20004bd4

08008434 <_isatty_r>:
 8008434:	b538      	push	{r3, r4, r5, lr}
 8008436:	4d06      	ldr	r5, [pc, #24]	; (8008450 <_isatty_r+0x1c>)
 8008438:	2300      	movs	r3, #0
 800843a:	4604      	mov	r4, r0
 800843c:	4608      	mov	r0, r1
 800843e:	602b      	str	r3, [r5, #0]
 8008440:	f7f9 fab9 	bl	80019b6 <_isatty>
 8008444:	1c43      	adds	r3, r0, #1
 8008446:	d102      	bne.n	800844e <_isatty_r+0x1a>
 8008448:	682b      	ldr	r3, [r5, #0]
 800844a:	b103      	cbz	r3, 800844e <_isatty_r+0x1a>
 800844c:	6023      	str	r3, [r4, #0]
 800844e:	bd38      	pop	{r3, r4, r5, pc}
 8008450:	20004bd4 	.word	0x20004bd4

08008454 <_gettimeofday>:
 8008454:	4b02      	ldr	r3, [pc, #8]	; (8008460 <_gettimeofday+0xc>)
 8008456:	2258      	movs	r2, #88	; 0x58
 8008458:	601a      	str	r2, [r3, #0]
 800845a:	f04f 30ff 	mov.w	r0, #4294967295
 800845e:	4770      	bx	lr
 8008460:	20004bd4 	.word	0x20004bd4

08008464 <_init>:
 8008464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008466:	bf00      	nop
 8008468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800846a:	bc08      	pop	{r3}
 800846c:	469e      	mov	lr, r3
 800846e:	4770      	bx	lr

08008470 <_fini>:
 8008470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008472:	bf00      	nop
 8008474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008476:	bc08      	pop	{r3}
 8008478:	469e      	mov	lr, r3
 800847a:	4770      	bx	lr
