
SpaceImpact.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006414  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  080065b4  080065b4  000165b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006720  08006720  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006720  08006720  00016720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006728  08006728  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006728  08006728  00016728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800672c  0800672c  0001672c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b10  20000074  080067a4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b84  080067a4  00024b84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013fdd  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dc7  00000000  00000000  00034081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  00036e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee8  00000000  00000000  00037e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003d03  00000000  00000000  00038d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113a3  00000000  00000000  0003ca3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b12f  00000000  00000000  0004ddde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8f0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000456c  00000000  00000000  000e8f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800659c 	.word	0x0800659c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800659c 	.word	0x0800659c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <lcd_start_write>:
static uint16_t textsize_x = 1, textsize_y = 1;
static uint16_t textcolor = ST77XX_WHITE;
static uint16_t textbgcolor = ST77XX_BLACK;
static uint8_t wrap = 1;

static void lcd_start_write(void) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2110      	movs	r1, #16
 80004ec:	4802      	ldr	r0, [pc, #8]	; (80004f8 <lcd_start_write+0x14>)
 80004ee:	f001 fddb 	bl	80020a8 <HAL_GPIO_WritePin>
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40020000 	.word	0x40020000

080004fc <lcd_end_write>:

static void lcd_end_write(void) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000500:	2201      	movs	r2, #1
 8000502:	2110      	movs	r1, #16
 8000504:	4802      	ldr	r0, [pc, #8]	; (8000510 <lcd_end_write+0x14>)
 8000506:	f001 fdcf 	bl	80020a8 <HAL_GPIO_WritePin>
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40020000 	.word	0x40020000

08000514 <lcd_start_command>:

static void lcd_start_command(void) {
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, GPIO_PIN_RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	2140      	movs	r1, #64	; 0x40
 800051c:	4802      	ldr	r0, [pc, #8]	; (8000528 <lcd_start_command+0x14>)
 800051e:	f001 fdc3 	bl	80020a8 <HAL_GPIO_WritePin>
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40020000 	.word	0x40020000

0800052c <lcd_start_data>:

static void lcd_start_data(void) {
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, GPIO_PIN_SET);
 8000530:	2201      	movs	r2, #1
 8000532:	2140      	movs	r1, #64	; 0x40
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <lcd_start_data+0x14>)
 8000536:	f001 fdb7 	bl	80020a8 <HAL_GPIO_WritePin>
}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40020000 	.word	0x40020000

08000544 <lcd_spi_send_com>:

static void lcd_spi_send_com(uint8_t com) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef stat;
	lcd_start_command();
 800054e:	f7ff ffe1 	bl	8000514 <lcd_start_command>
	stat = HAL_SPI_Transmit(&hspi1, &com, 1, 1000);
 8000552:	1df9      	adds	r1, r7, #7
 8000554:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000558:	2201      	movs	r2, #1
 800055a:	4806      	ldr	r0, [pc, #24]	; (8000574 <lcd_spi_send_com+0x30>)
 800055c:	f002 fa83 	bl	8002a66 <HAL_SPI_Transmit>
 8000560:	4603      	mov	r3, r0
 8000562:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 8000564:	7bfb      	ldrb	r3, [r7, #15]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d000      	beq.n	800056c <lcd_spi_send_com+0x28>
		while (1) {}
 800056a:	e7fe      	b.n	800056a <lcd_spi_send_com+0x26>
	}
}
 800056c:	bf00      	nop
 800056e:	3710      	adds	r7, #16
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	200000e4 	.word	0x200000e4

08000578 <lcd_spi_send_data>:

static void lcd_spi_send_data(uint8_t *data, size_t size) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef stat;
	if (size) {
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d00f      	beq.n	80005a8 <lcd_spi_send_data+0x30>
		lcd_start_data();
 8000588:	f7ff ffd0 	bl	800052c <lcd_start_data>
		stat = HAL_SPI_Transmit(&hspi1, data, size, 1000);
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	b29a      	uxth	r2, r3
 8000590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000594:	6879      	ldr	r1, [r7, #4]
 8000596:	4806      	ldr	r0, [pc, #24]	; (80005b0 <lcd_spi_send_data+0x38>)
 8000598:	f002 fa65 	bl	8002a66 <HAL_SPI_Transmit>
 800059c:	4603      	mov	r3, r0
 800059e:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 80005a0:	7bfb      	ldrb	r3, [r7, #15]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d000      	beq.n	80005a8 <lcd_spi_send_data+0x30>
			while (1) {}
 80005a6:	e7fe      	b.n	80005a6 <lcd_spi_send_data+0x2e>
		}
	}
}
 80005a8:	bf00      	nop
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	200000e4 	.word	0x200000e4

080005b4 <lcd_set_window>:

static void lcd_set_window(uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4604      	mov	r4, r0
 80005bc:	4608      	mov	r0, r1
 80005be:	4611      	mov	r1, r2
 80005c0:	461a      	mov	r2, r3
 80005c2:	4623      	mov	r3, r4
 80005c4:	80fb      	strh	r3, [r7, #6]
 80005c6:	4603      	mov	r3, r0
 80005c8:	80bb      	strh	r3, [r7, #4]
 80005ca:	460b      	mov	r3, r1
 80005cc:	807b      	strh	r3, [r7, #2]
 80005ce:	4613      	mov	r3, r2
 80005d0:	803b      	strh	r3, [r7, #0]
	x += _xstart;
 80005d2:	4b29      	ldr	r3, [pc, #164]	; (8000678 <lcd_set_window+0xc4>)
 80005d4:	881a      	ldrh	r2, [r3, #0]
 80005d6:	88fb      	ldrh	r3, [r7, #6]
 80005d8:	4413      	add	r3, r2
 80005da:	80fb      	strh	r3, [r7, #6]
	y += _ystart;
 80005dc:	4b27      	ldr	r3, [pc, #156]	; (800067c <lcd_set_window+0xc8>)
 80005de:	881a      	ldrh	r2, [r3, #0]
 80005e0:	88bb      	ldrh	r3, [r7, #4]
 80005e2:	4413      	add	r3, r2
 80005e4:	80bb      	strh	r3, [r7, #4]

	uint8_t xa[4] = {x >> 8, x, (x+w-1)>>8, (x+w-1) };
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	0a1b      	lsrs	r3, r3, #8
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	733b      	strb	r3, [r7, #12]
 80005f0:	88fb      	ldrh	r3, [r7, #6]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	737b      	strb	r3, [r7, #13]
 80005f6:	88fa      	ldrh	r2, [r7, #6]
 80005f8:	887b      	ldrh	r3, [r7, #2]
 80005fa:	4413      	add	r3, r2
 80005fc:	3b01      	subs	r3, #1
 80005fe:	121b      	asrs	r3, r3, #8
 8000600:	b2db      	uxtb	r3, r3
 8000602:	73bb      	strb	r3, [r7, #14]
 8000604:	88fb      	ldrh	r3, [r7, #6]
 8000606:	b2da      	uxtb	r2, r3
 8000608:	887b      	ldrh	r3, [r7, #2]
 800060a:	b2db      	uxtb	r3, r3
 800060c:	4413      	add	r3, r2
 800060e:	b2db      	uxtb	r3, r3
 8000610:	3b01      	subs	r3, #1
 8000612:	b2db      	uxtb	r3, r3
 8000614:	73fb      	strb	r3, [r7, #15]
	uint8_t ya[4] = {y >> 8, y, (y+h-1)>>8, (y+h-1) };
 8000616:	88bb      	ldrh	r3, [r7, #4]
 8000618:	0a1b      	lsrs	r3, r3, #8
 800061a:	b29b      	uxth	r3, r3
 800061c:	b2db      	uxtb	r3, r3
 800061e:	723b      	strb	r3, [r7, #8]
 8000620:	88bb      	ldrh	r3, [r7, #4]
 8000622:	b2db      	uxtb	r3, r3
 8000624:	727b      	strb	r3, [r7, #9]
 8000626:	88ba      	ldrh	r2, [r7, #4]
 8000628:	883b      	ldrh	r3, [r7, #0]
 800062a:	4413      	add	r3, r2
 800062c:	3b01      	subs	r3, #1
 800062e:	121b      	asrs	r3, r3, #8
 8000630:	b2db      	uxtb	r3, r3
 8000632:	72bb      	strb	r3, [r7, #10]
 8000634:	88bb      	ldrh	r3, [r7, #4]
 8000636:	b2da      	uxtb	r2, r3
 8000638:	883b      	ldrh	r3, [r7, #0]
 800063a:	b2db      	uxtb	r3, r3
 800063c:	4413      	add	r3, r2
 800063e:	b2db      	uxtb	r3, r3
 8000640:	3b01      	subs	r3, #1
 8000642:	b2db      	uxtb	r3, r3
 8000644:	72fb      	strb	r3, [r7, #11]

	lcd_spi_send_com(ST77XX_CASET);
 8000646:	202a      	movs	r0, #42	; 0x2a
 8000648:	f7ff ff7c 	bl	8000544 <lcd_spi_send_com>
	lcd_spi_send_data(xa, 4);
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2104      	movs	r1, #4
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ff90 	bl	8000578 <lcd_spi_send_data>
	lcd_spi_send_com(ST77XX_RASET);
 8000658:	202b      	movs	r0, #43	; 0x2b
 800065a:	f7ff ff73 	bl	8000544 <lcd_spi_send_com>
	lcd_spi_send_data(ya, 4);
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	2104      	movs	r1, #4
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff ff87 	bl	8000578 <lcd_spi_send_data>
	lcd_spi_send_com(ST77XX_RAMWR);
 800066a:	202c      	movs	r0, #44	; 0x2c
 800066c:	f7ff ff6a 	bl	8000544 <lcd_spi_send_com>
}
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	bd90      	pop	{r4, r7, pc}
 8000678:	20000092 	.word	0x20000092
 800067c:	20000094 	.word	0x20000094

08000680 <lcd_init>:

/**
 * -------------------------------------------------------------------
 */
int lcd_init(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
	uint8_t numCommands, cmd, numArgs;
	uint16_t ms;

	const uint8_t *ptr = Rcmd;
 8000686:	4b33      	ldr	r3, [pc, #204]	; (8000754 <lcd_init+0xd4>)
 8000688:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 800068a:	2201      	movs	r2, #1
 800068c:	2108      	movs	r1, #8
 800068e:	4832      	ldr	r0, [pc, #200]	; (8000758 <lcd_init+0xd8>)
 8000690:	f001 fd0a 	bl	80020a8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000694:	2064      	movs	r0, #100	; 0x64
 8000696:	f000 fe95 	bl	80013c4 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	2108      	movs	r1, #8
 800069e:	482e      	ldr	r0, [pc, #184]	; (8000758 <lcd_init+0xd8>)
 80006a0:	f001 fd02 	bl	80020a8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80006a4:	2064      	movs	r0, #100	; 0x64
 80006a6:	f000 fe8d 	bl	80013c4 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 80006aa:	2201      	movs	r2, #1
 80006ac:	2108      	movs	r1, #8
 80006ae:	482a      	ldr	r0, [pc, #168]	; (8000758 <lcd_init+0xd8>)
 80006b0:	f001 fcfa 	bl	80020a8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80006b4:	2064      	movs	r0, #100	; 0x64
 80006b6:	f000 fe85 	bl	80013c4 <HAL_Delay>

	numCommands = *ptr++;
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	1c5a      	adds	r2, r3, #1
 80006be:	60ba      	str	r2, [r7, #8]
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	73fb      	strb	r3, [r7, #15]
	while (numCommands--) {
 80006c4:	e035      	b.n	8000732 <lcd_init+0xb2>
		cmd = *ptr++;
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	1c5a      	adds	r2, r3, #1
 80006ca:	60ba      	str	r2, [r7, #8]
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	71fb      	strb	r3, [r7, #7]
		numArgs = *ptr++;
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	1c5a      	adds	r2, r3, #1
 80006d4:	60ba      	str	r2, [r7, #8]
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	71bb      	strb	r3, [r7, #6]
		ms = numArgs & ST_CMD_DELAY;
 80006da:	79bb      	ldrb	r3, [r7, #6]
 80006dc:	b29b      	uxth	r3, r3
 80006de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006e2:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~ST_CMD_DELAY;
 80006e4:	79bb      	ldrb	r3, [r7, #6]
 80006e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006ea:	71bb      	strb	r3, [r7, #6]
		lcd_start_write();
 80006ec:	f7ff fefa 	bl	80004e4 <lcd_start_write>
		lcd_spi_send_com(cmd);
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ff26 	bl	8000544 <lcd_spi_send_com>
		lcd_spi_send_data((uint8_t*)ptr, numArgs);
 80006f8:	79bb      	ldrb	r3, [r7, #6]
 80006fa:	4619      	mov	r1, r3
 80006fc:	68b8      	ldr	r0, [r7, #8]
 80006fe:	f7ff ff3b 	bl	8000578 <lcd_spi_send_data>
		lcd_end_write();
 8000702:	f7ff fefb 	bl	80004fc <lcd_end_write>
		ptr += numArgs;
 8000706:	79bb      	ldrb	r3, [r7, #6]
 8000708:	68ba      	ldr	r2, [r7, #8]
 800070a:	4413      	add	r3, r2
 800070c:	60bb      	str	r3, [r7, #8]

		if (ms) {
 800070e:	89bb      	ldrh	r3, [r7, #12]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d00e      	beq.n	8000732 <lcd_init+0xb2>
			ms = *ptr++;
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	1c5a      	adds	r2, r3, #1
 8000718:	60ba      	str	r2, [r7, #8]
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	81bb      	strh	r3, [r7, #12]
			if (ms == 255)
 800071e:	89bb      	ldrh	r3, [r7, #12]
 8000720:	2bff      	cmp	r3, #255	; 0xff
 8000722:	d102      	bne.n	800072a <lcd_init+0xaa>
				ms = 500;
 8000724:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000728:	81bb      	strh	r3, [r7, #12]
			HAL_Delay(ms);
 800072a:	89bb      	ldrh	r3, [r7, #12]
 800072c:	4618      	mov	r0, r3
 800072e:	f000 fe49 	bl	80013c4 <HAL_Delay>
	while (numCommands--) {
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	1e5a      	subs	r2, r3, #1
 8000736:	73fa      	strb	r2, [r7, #15]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d1c4      	bne.n	80006c6 <lcd_init+0x46>
		}
	}

	lcd_start_write();
 800073c:	f7ff fed2 	bl	80004e4 <lcd_start_write>
	lcd_set_rotation(2);
 8000740:	2002      	movs	r0, #2
 8000742:	f000 f80b 	bl	800075c <lcd_set_rotation>
	lcd_end_write();
 8000746:	f7ff fed9 	bl	80004fc <lcd_end_write>

	return 0;
 800074a:	2300      	movs	r3, #0
}
 800074c:	4618      	mov	r0, r3
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	080065e4 	.word	0x080065e4
 8000758:	40020000 	.word	0x40020000

0800075c <lcd_set_rotation>:

int lcd_set_rotation(int m) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	uint8_t madctl = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	73fb      	strb	r3, [r7, #15]

	rotation = m & 3; // can't be higher than 3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	f003 0303 	and.w	r3, r3, #3
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4b35      	ldr	r3, [pc, #212]	; (8000848 <lcd_set_rotation+0xec>)
 8000774:	701a      	strb	r2, [r3, #0]

	switch (rotation) {
 8000776:	4b34      	ldr	r3, [pc, #208]	; (8000848 <lcd_set_rotation+0xec>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b03      	cmp	r3, #3
 800077c:	d856      	bhi.n	800082c <lcd_set_rotation+0xd0>
 800077e:	a201      	add	r2, pc, #4	; (adr r2, 8000784 <lcd_set_rotation+0x28>)
 8000780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000784:	08000795 	.word	0x08000795
 8000788:	080007bb 	.word	0x080007bb
 800078c:	080007e1 	.word	0x080007e1
 8000790:	08000807 	.word	0x08000807
	case 0:
		madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 8000794:	23c0      	movs	r3, #192	; 0xc0
 8000796:	73fb      	strb	r3, [r7, #15]
		_height = ST7735_TFTHEIGHT_160;
 8000798:	4b2c      	ldr	r3, [pc, #176]	; (800084c <lcd_set_rotation+0xf0>)
 800079a:	22a0      	movs	r2, #160	; 0xa0
 800079c:	801a      	strh	r2, [r3, #0]
		_width = ST7735_TFTWIDTH_128;
 800079e:	4b2c      	ldr	r3, [pc, #176]	; (8000850 <lcd_set_rotation+0xf4>)
 80007a0:	2280      	movs	r2, #128	; 0x80
 80007a2:	801a      	strh	r2, [r3, #0]
		_xstart = _colstart;
 80007a4:	4b2b      	ldr	r3, [pc, #172]	; (8000854 <lcd_set_rotation+0xf8>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	4b2b      	ldr	r3, [pc, #172]	; (8000858 <lcd_set_rotation+0xfc>)
 80007ac:	801a      	strh	r2, [r3, #0]
		_ystart = _rowstart;
 80007ae:	4b2b      	ldr	r3, [pc, #172]	; (800085c <lcd_set_rotation+0x100>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	4b2a      	ldr	r3, [pc, #168]	; (8000860 <lcd_set_rotation+0x104>)
 80007b6:	801a      	strh	r2, [r3, #0]
		break;
 80007b8:	e038      	b.n	800082c <lcd_set_rotation+0xd0>
	case 1:
		madctl = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 80007ba:	23a0      	movs	r3, #160	; 0xa0
 80007bc:	73fb      	strb	r3, [r7, #15]
		_width = ST7735_TFTHEIGHT_160;
 80007be:	4b24      	ldr	r3, [pc, #144]	; (8000850 <lcd_set_rotation+0xf4>)
 80007c0:	22a0      	movs	r2, #160	; 0xa0
 80007c2:	801a      	strh	r2, [r3, #0]
		_height = ST7735_TFTWIDTH_128;
 80007c4:	4b21      	ldr	r3, [pc, #132]	; (800084c <lcd_set_rotation+0xf0>)
 80007c6:	2280      	movs	r2, #128	; 0x80
 80007c8:	801a      	strh	r2, [r3, #0]
		_ystart = _colstart;
 80007ca:	4b22      	ldr	r3, [pc, #136]	; (8000854 <lcd_set_rotation+0xf8>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	4b23      	ldr	r3, [pc, #140]	; (8000860 <lcd_set_rotation+0x104>)
 80007d2:	801a      	strh	r2, [r3, #0]
		_xstart = _rowstart;
 80007d4:	4b21      	ldr	r3, [pc, #132]	; (800085c <lcd_set_rotation+0x100>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	b29a      	uxth	r2, r3
 80007da:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <lcd_set_rotation+0xfc>)
 80007dc:	801a      	strh	r2, [r3, #0]
		break;
 80007de:	e025      	b.n	800082c <lcd_set_rotation+0xd0>
	case 2:
		madctl = ST77XX_MADCTL_RGB;
 80007e0:	2300      	movs	r3, #0
 80007e2:	73fb      	strb	r3, [r7, #15]
		_height = ST7735_TFTHEIGHT_160;
 80007e4:	4b19      	ldr	r3, [pc, #100]	; (800084c <lcd_set_rotation+0xf0>)
 80007e6:	22a0      	movs	r2, #160	; 0xa0
 80007e8:	801a      	strh	r2, [r3, #0]
		_width = ST7735_TFTWIDTH_128;
 80007ea:	4b19      	ldr	r3, [pc, #100]	; (8000850 <lcd_set_rotation+0xf4>)
 80007ec:	2280      	movs	r2, #128	; 0x80
 80007ee:	801a      	strh	r2, [r3, #0]
		_xstart = _colstart;
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <lcd_set_rotation+0xf8>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <lcd_set_rotation+0xfc>)
 80007f8:	801a      	strh	r2, [r3, #0]
		_ystart = _rowstart;
 80007fa:	4b18      	ldr	r3, [pc, #96]	; (800085c <lcd_set_rotation+0x100>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	b29a      	uxth	r2, r3
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <lcd_set_rotation+0x104>)
 8000802:	801a      	strh	r2, [r3, #0]
		break;
 8000804:	e012      	b.n	800082c <lcd_set_rotation+0xd0>
	case 3:
		madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST7735_MADCTL_BGR;
 8000806:	2368      	movs	r3, #104	; 0x68
 8000808:	73fb      	strb	r3, [r7, #15]
		_width = ST7735_TFTHEIGHT_160;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <lcd_set_rotation+0xf4>)
 800080c:	22a0      	movs	r2, #160	; 0xa0
 800080e:	801a      	strh	r2, [r3, #0]
		_height = ST7735_TFTWIDTH_128;
 8000810:	4b0e      	ldr	r3, [pc, #56]	; (800084c <lcd_set_rotation+0xf0>)
 8000812:	2280      	movs	r2, #128	; 0x80
 8000814:	801a      	strh	r2, [r3, #0]
		_ystart = _colstart;
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <lcd_set_rotation+0xf8>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	b29a      	uxth	r2, r3
 800081c:	4b10      	ldr	r3, [pc, #64]	; (8000860 <lcd_set_rotation+0x104>)
 800081e:	801a      	strh	r2, [r3, #0]
		_xstart = _rowstart;
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <lcd_set_rotation+0x100>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	b29a      	uxth	r2, r3
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <lcd_set_rotation+0xfc>)
 8000828:	801a      	strh	r2, [r3, #0]
		break;
 800082a:	bf00      	nop
	}

	lcd_spi_send_com(ST77XX_MADCTL);
 800082c:	2036      	movs	r0, #54	; 0x36
 800082e:	f7ff fe89 	bl	8000544 <lcd_spi_send_com>
	lcd_spi_send_data(&madctl, 1);
 8000832:	f107 030f 	add.w	r3, r7, #15
 8000836:	2101      	movs	r1, #1
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fe9d 	bl	8000578 <lcd_spi_send_data>
	return 0;
 800083e:	2300      	movs	r3, #0
}
 8000840:	4618      	mov	r0, r3
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000090 	.word	0x20000090
 800084c:	20000098 	.word	0x20000098
 8000850:	20000096 	.word	0x20000096
 8000854:	2000009a 	.word	0x2000009a
 8000858:	20000092 	.word	0x20000092
 800085c:	2000009b 	.word	0x2000009b
 8000860:	20000094 	.word	0x20000094

08000864 <lcd_fill_rect>:
	lcd_vline(x+w, y, h, color);
	lcd_hline(x, y, w, color);
	lcd_hline(x, y+h, w, color);
}

void lcd_fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	4604      	mov	r4, r0
 800086c:	4608      	mov	r0, r1
 800086e:	4611      	mov	r1, r2
 8000870:	461a      	mov	r2, r3
 8000872:	4623      	mov	r3, r4
 8000874:	80fb      	strh	r3, [r7, #6]
 8000876:	4603      	mov	r3, r0
 8000878:	80bb      	strh	r3, [r7, #4]
 800087a:	460b      	mov	r3, r1
 800087c:	807b      	strh	r3, [r7, #2]
 800087e:	4613      	mov	r3, r2
 8000880:	803b      	strh	r3, [r7, #0]
	if (x < 0) x = 0;
 8000882:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000886:	2b00      	cmp	r3, #0
 8000888:	da01      	bge.n	800088e <lcd_fill_rect+0x2a>
 800088a:	2300      	movs	r3, #0
 800088c:	80fb      	strh	r3, [r7, #6]
	if (y < 0) y = 0;
 800088e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000892:	2b00      	cmp	r3, #0
 8000894:	da01      	bge.n	800089a <lcd_fill_rect+0x36>
 8000896:	2300      	movs	r3, #0
 8000898:	80bb      	strh	r3, [r7, #4]
	if (x + w > _width) w = _width - x;
 800089a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800089e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80008a2:	4413      	add	r3, r2
 80008a4:	4a20      	ldr	r2, [pc, #128]	; (8000928 <lcd_fill_rect+0xc4>)
 80008a6:	8812      	ldrh	r2, [r2, #0]
 80008a8:	4293      	cmp	r3, r2
 80008aa:	dd05      	ble.n	80008b8 <lcd_fill_rect+0x54>
 80008ac:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <lcd_fill_rect+0xc4>)
 80008ae:	881a      	ldrh	r2, [r3, #0]
 80008b0:	88fb      	ldrh	r3, [r7, #6]
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	807b      	strh	r3, [r7, #2]
	if (y + h > _height) h = _height - y;
 80008b8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80008bc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80008c0:	4413      	add	r3, r2
 80008c2:	4a1a      	ldr	r2, [pc, #104]	; (800092c <lcd_fill_rect+0xc8>)
 80008c4:	8812      	ldrh	r2, [r2, #0]
 80008c6:	4293      	cmp	r3, r2
 80008c8:	dd05      	ble.n	80008d6 <lcd_fill_rect+0x72>
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <lcd_fill_rect+0xc8>)
 80008cc:	881a      	ldrh	r2, [r3, #0]
 80008ce:	88bb      	ldrh	r3, [r7, #4]
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	803b      	strh	r3, [r7, #0]
	lcd_start_write();
 80008d6:	f7ff fe05 	bl	80004e4 <lcd_start_write>
	lcd_set_window(x, y, w, h);
 80008da:	88f8      	ldrh	r0, [r7, #6]
 80008dc:	88b9      	ldrh	r1, [r7, #4]
 80008de:	887a      	ldrh	r2, [r7, #2]
 80008e0:	883b      	ldrh	r3, [r7, #0]
 80008e2:	f7ff fe67 	bl	80005b4 <lcd_set_window>
	uint8_t c[2] = { color >> 8, color};
 80008e6:	8c3b      	ldrh	r3, [r7, #32]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	723b      	strb	r3, [r7, #8]
 80008f0:	8c3b      	ldrh	r3, [r7, #32]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	727b      	strb	r3, [r7, #9]
	uint32_t cnt = w * h;
 80008f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80008fa:	f9b7 2000 	ldrsh.w	r2, [r7]
 80008fe:	fb02 f303 	mul.w	r3, r2, r3
 8000902:	60fb      	str	r3, [r7, #12]
	while (cnt--)
 8000904:	e005      	b.n	8000912 <lcd_fill_rect+0xae>
		lcd_spi_send_data(c, 2);
 8000906:	f107 0308 	add.w	r3, r7, #8
 800090a:	2102      	movs	r1, #2
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fe33 	bl	8000578 <lcd_spi_send_data>
	while (cnt--)
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	1e5a      	subs	r2, r3, #1
 8000916:	60fa      	str	r2, [r7, #12]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d1f4      	bne.n	8000906 <lcd_fill_rect+0xa2>
	lcd_end_write();
 800091c:	f7ff fdee 	bl	80004fc <lcd_end_write>
}
 8000920:	bf00      	nop
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	bd90      	pop	{r4, r7, pc}
 8000928:	20000096 	.word	0x20000096
 800092c:	20000098 	.word	0x20000098

08000930 <lcd_fill>:

void lcd_fill(uint16_t color) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af02      	add	r7, sp, #8
 8000936:	4603      	mov	r3, r0
 8000938:	80fb      	strh	r3, [r7, #6]
	lcd_fill_rect(0, 0, _width, _height, color);
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <lcd_fill+0x2c>)
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	b21a      	sxth	r2, r3
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <lcd_fill+0x30>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	b219      	sxth	r1, r3
 8000946:	88fb      	ldrh	r3, [r7, #6]
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	460b      	mov	r3, r1
 800094c:	2100      	movs	r1, #0
 800094e:	2000      	movs	r0, #0
 8000950:	f7ff ff88 	bl	8000864 <lcd_fill_rect>
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000096 	.word	0x20000096
 8000960:	20000098 	.word	0x20000098

08000964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000968:	f000 fcba 	bl	80012e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800096c:	f000 f832 	bl	80009d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000970:	f000 f922 	bl	8000bb8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000974:	f000 f898 	bl	8000aa8 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000978:	f000 f8e8 	bl	8000b4c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800097c:	f002 faae 	bl	8002edc <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of MTX1 */
  MTX1Handle = osMutexNew(&MTX1_attributes);
 8000980:	480c      	ldr	r0, [pc, #48]	; (80009b4 <main+0x50>)
 8000982:	f002 fba2 	bl	80030ca <osMutexNew>
 8000986:	4603      	mov	r3, r0
 8000988:	4a0b      	ldr	r2, [pc, #44]	; (80009b8 <main+0x54>)
 800098a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Draw */
  DrawHandle = osThreadNew(StartDraw, NULL, &Draw_attributes);
 800098c:	4a0b      	ldr	r2, [pc, #44]	; (80009bc <main+0x58>)
 800098e:	2100      	movs	r1, #0
 8000990:	480b      	ldr	r0, [pc, #44]	; (80009c0 <main+0x5c>)
 8000992:	f002 faed 	bl	8002f70 <osThreadNew>
 8000996:	4603      	mov	r3, r0
 8000998:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <main+0x60>)
 800099a:	6013      	str	r3, [r2, #0]

  /* creation of Control */
  ControlHandle = osThreadNew(StartControl, NULL, &Control_attributes);
 800099c:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <main+0x64>)
 800099e:	2100      	movs	r1, #0
 80009a0:	480a      	ldr	r0, [pc, #40]	; (80009cc <main+0x68>)
 80009a2:	f002 fae5 	bl	8002f70 <osThreadNew>
 80009a6:	4603      	mov	r3, r0
 80009a8:	4a09      	ldr	r2, [pc, #36]	; (80009d0 <main+0x6c>)
 80009aa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009ac:	f002 faba 	bl	8002f24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <main+0x4c>
 80009b2:	bf00      	nop
 80009b4:	080066a0 	.word	0x080066a0
 80009b8:	20000144 	.word	0x20000144
 80009bc:	08006658 	.word	0x08006658
 80009c0:	08000f8d 	.word	0x08000f8d
 80009c4:	2000013c 	.word	0x2000013c
 80009c8:	0800667c 	.word	0x0800667c
 80009cc:	08000fd9 	.word	0x08000fd9
 80009d0:	20000140 	.word	0x20000140

080009d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b094      	sub	sp, #80	; 0x50
 80009d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009da:	f107 0320 	add.w	r3, r7, #32
 80009de:	2230      	movs	r2, #48	; 0x30
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f005 fc6c 	bl	80062c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f8:	2300      	movs	r3, #0
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	4b28      	ldr	r3, [pc, #160]	; (8000aa0 <SystemClock_Config+0xcc>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	4a27      	ldr	r2, [pc, #156]	; (8000aa0 <SystemClock_Config+0xcc>)
 8000a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a06:	6413      	str	r3, [r2, #64]	; 0x40
 8000a08:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <SystemClock_Config+0xcc>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a14:	2300      	movs	r3, #0
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <SystemClock_Config+0xd0>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a20:	4a20      	ldr	r2, [pc, #128]	; (8000aa4 <SystemClock_Config+0xd0>)
 8000a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a26:	6013      	str	r3, [r2, #0]
 8000a28:	4b1e      	ldr	r3, [pc, #120]	; (8000aa4 <SystemClock_Config+0xd0>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a34:	2301      	movs	r3, #1
 8000a36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000a48:	2319      	movs	r3, #25
 8000a4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a4c:	23a8      	movs	r3, #168	; 0xa8
 8000a4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a50:	2302      	movs	r3, #2
 8000a52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a54:	2304      	movs	r3, #4
 8000a56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a58:	f107 0320 	add.w	r3, r7, #32
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f001 fb55 	bl	800210c <HAL_RCC_OscConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a68:	f000 fade 	bl	8001028 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6c:	230f      	movs	r3, #15
 8000a6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a70:	2302      	movs	r3, #2
 8000a72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a82:	f107 030c 	add.w	r3, r7, #12
 8000a86:	2102      	movs	r1, #2
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f001 fdb7 	bl	80025fc <HAL_RCC_ClockConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a94:	f000 fac8 	bl	8001028 <Error_Handler>
  }
}
 8000a98:	bf00      	nop
 8000a9a:	3750      	adds	r7, #80	; 0x50
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40007000 	.word	0x40007000

08000aa8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aae:	463b      	mov	r3, r7
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000aba:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <MX_ADC1_Init+0x98>)
 8000abc:	4a21      	ldr	r2, [pc, #132]	; (8000b44 <MX_ADC1_Init+0x9c>)
 8000abe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <MX_ADC1_Init+0x98>)
 8000ac2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ac6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <MX_ADC1_Init+0x98>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ace:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <MX_ADC1_Init+0x98>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ad4:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <MX_ADC1_Init+0x98>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ada:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <MX_ADC1_Init+0x98>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <MX_ADC1_Init+0x98>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ae8:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <MX_ADC1_Init+0x98>)
 8000aea:	4a17      	ldr	r2, [pc, #92]	; (8000b48 <MX_ADC1_Init+0xa0>)
 8000aec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aee:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <MX_ADC1_Init+0x98>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <MX_ADC1_Init+0x98>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <MX_ADC1_Init+0x98>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <MX_ADC1_Init+0x98>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b08:	480d      	ldr	r0, [pc, #52]	; (8000b40 <MX_ADC1_Init+0x98>)
 8000b0a:	f000 fc7f 	bl	800140c <HAL_ADC_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b14:	f000 fa88 	bl	8001028 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b24:	463b      	mov	r3, r7
 8000b26:	4619      	mov	r1, r3
 8000b28:	4805      	ldr	r0, [pc, #20]	; (8000b40 <MX_ADC1_Init+0x98>)
 8000b2a:	f000 fe09 	bl	8001740 <HAL_ADC_ConfigChannel>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b34:	f000 fa78 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	2000009c 	.word	0x2000009c
 8000b44:	40012000 	.word	0x40012000
 8000b48:	0f000001 	.word	0x0f000001

08000b4c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b50:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b52:	4a18      	ldr	r2, [pc, #96]	; (8000bb4 <MX_SPI1_Init+0x68>)
 8000b54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b56:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b5e:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b84:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b90:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b98:	220a      	movs	r2, #10
 8000b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b9c:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b9e:	f001 fed9 	bl	8002954 <HAL_SPI_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ba8:	f000 fa3e 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	200000e4 	.word	0x200000e4
 8000bb4:	40013000 	.word	0x40013000

08000bb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbe:	f107 030c 	add.w	r3, r7, #12
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
 8000bcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	4b2a      	ldr	r3, [pc, #168]	; (8000c7c <MX_GPIO_Init+0xc4>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a29      	ldr	r2, [pc, #164]	; (8000c7c <MX_GPIO_Init+0xc4>)
 8000bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b27      	ldr	r3, [pc, #156]	; (8000c7c <MX_GPIO_Init+0xc4>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	4b23      	ldr	r3, [pc, #140]	; (8000c7c <MX_GPIO_Init+0xc4>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a22      	ldr	r2, [pc, #136]	; (8000c7c <MX_GPIO_Init+0xc4>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b20      	ldr	r3, [pc, #128]	; (8000c7c <MX_GPIO_Init+0xc4>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <MX_GPIO_Init+0xc4>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a1b      	ldr	r2, [pc, #108]	; (8000c7c <MX_GPIO_Init+0xc4>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <MX_GPIO_Init+0xc4>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_CS_Pin|LCD_A0_Pin, GPIO_PIN_SET);
 8000c22:	2201      	movs	r2, #1
 8000c24:	2158      	movs	r1, #88	; 0x58
 8000c26:	4816      	ldr	r0, [pc, #88]	; (8000c80 <MX_GPIO_Init+0xc8>)
 8000c28:	f001 fa3e 	bl	80020a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_CS_Pin LCD_A0_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_CS_Pin|LCD_A0_Pin;
 8000c2c:	2358      	movs	r3, #88	; 0x58
 8000c2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	4619      	mov	r1, r3
 8000c42:	480f      	ldr	r0, [pc, #60]	; (8000c80 <MX_GPIO_Init+0xc8>)
 8000c44:	f001 f8ac 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c4e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4809      	ldr	r0, [pc, #36]	; (8000c84 <MX_GPIO_Init+0xcc>)
 8000c60:	f001 f89e 	bl	8001da0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2105      	movs	r1, #5
 8000c68:	2028      	movs	r0, #40	; 0x28
 8000c6a:	f001 f862 	bl	8001d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c6e:	2028      	movs	r0, #40	; 0x28
 8000c70:	f001 f87b 	bl	8001d6a <HAL_NVIC_EnableIRQ>

}
 8000c74:	bf00      	nop
 8000c76:	3720      	adds	r7, #32
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020000 	.word	0x40020000
 8000c84:	40020400 	.word	0x40020400

08000c88 <addQueueFrame>:

/* USER CODE BEGIN 4 */
void addQueueFrame()
{
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
    if (crntFrame < BULLETS_MAX_NUM)
 8000c8e:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <addQueueFrame+0x68>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2b1d      	cmp	r3, #29
 8000c94:	dc27      	bgt.n	8000ce6 <addQueueFrame+0x5e>
    {
        queue *buf = endPtr;
 8000c96:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <addQueueFrame+0x6c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	607b      	str	r3, [r7, #4]
        endPtr = (endPtr == NULL)  ?  (startPtr = (queue *)malloc(sizeof(queue)))  :  (queue *)(endPtr->nextBullet = (struct queue *)malloc(sizeof(queue)));
 8000c9c:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <addQueueFrame+0x6c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d109      	bne.n	8000cb8 <addQueueFrame+0x30>
 8000ca4:	2008      	movs	r0, #8
 8000ca6:	f005 faed 	bl	8006284 <malloc>
 8000caa:	4603      	mov	r3, r0
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <addQueueFrame+0x70>)
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <addQueueFrame+0x70>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	e007      	b.n	8000cc8 <addQueueFrame+0x40>
 8000cb8:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <addQueueFrame+0x6c>)
 8000cba:	681c      	ldr	r4, [r3, #0]
 8000cbc:	2008      	movs	r0, #8
 8000cbe:	f005 fae1 	bl	8006284 <malloc>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	6063      	str	r3, [r4, #4]
 8000cc6:	6863      	ldr	r3, [r4, #4]
 8000cc8:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <addQueueFrame+0x6c>)
 8000cca:	6013      	str	r3, [r2, #0]
        if (endPtr)
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <addQueueFrame+0x6c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d005      	beq.n	8000ce0 <addQueueFrame+0x58>
            crntFrame++;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <addQueueFrame+0x68>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <addQueueFrame+0x68>)
 8000cdc:	6013      	str	r3, [r2, #0]
        else
            endPtr = buf;
    }
}
 8000cde:	e002      	b.n	8000ce6 <addQueueFrame+0x5e>
            endPtr = buf;
 8000ce0:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <addQueueFrame+0x6c>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6013      	str	r3, [r2, #0]
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd90      	pop	{r4, r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000150 	.word	0x20000150
 8000cf4:	2000014c 	.word	0x2000014c
 8000cf8:	20000148 	.word	0x20000148

08000cfc <delQueueFrame>:

void delQueueFrame()
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
    if (crntFrame > 0 && startPtr != NULL)
 8000d02:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <delQueueFrame+0x54>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	dd1e      	ble.n	8000d48 <delQueueFrame+0x4c>
 8000d0a:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <delQueueFrame+0x58>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d01a      	beq.n	8000d48 <delQueueFrame+0x4c>
    {
        queue *buf = startPtr;
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <delQueueFrame+0x58>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	607b      	str	r3, [r7, #4]
        startPtr = (queue *)startPtr->nextBullet;
 8000d18:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <delQueueFrame+0x58>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <delQueueFrame+0x58>)
 8000d20:	6013      	str	r3, [r2, #0]
        free(buf);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f005 fab6 	bl	8006294 <free>
        if (--crntFrame == 0)
 8000d28:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <delQueueFrame+0x54>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	4a08      	ldr	r2, [pc, #32]	; (8000d50 <delQueueFrame+0x54>)
 8000d30:	6013      	str	r3, [r2, #0]
 8000d32:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <delQueueFrame+0x54>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d106      	bne.n	8000d48 <delQueueFrame+0x4c>
            endPtr = startPtr = NULL;
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <delQueueFrame+0x58>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <delQueueFrame+0x58>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <delQueueFrame+0x5c>)
 8000d46:	6013      	str	r3, [r2, #0]
    }
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000150 	.word	0x20000150
 8000d54:	20000148 	.word	0x20000148
 8000d58:	2000014c 	.word	0x2000014c

08000d5c <protagonistDraw>:

void protagonistDraw()
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af02      	add	r7, sp, #8
	if(POSITION(adc_value) != POSITION(adc_prev_value)) {					// flicker reduction
 8000d62:	4b49      	ldr	r3, [pc, #292]	; (8000e88 <protagonistDraw+0x12c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d6a:	228c      	movs	r2, #140	; 0x8c
 8000d6c:	fb03 f202 	mul.w	r2, r3, r2
 8000d70:	4b46      	ldr	r3, [pc, #280]	; (8000e8c <protagonistDraw+0x130>)
 8000d72:	fba3 1302 	umull	r1, r3, r3, r2
 8000d76:	1ad2      	subs	r2, r2, r3
 8000d78:	0852      	lsrs	r2, r2, #1
 8000d7a:	4413      	add	r3, r2
 8000d7c:	0ada      	lsrs	r2, r3, #11
 8000d7e:	4b44      	ldr	r3, [pc, #272]	; (8000e90 <protagonistDraw+0x134>)
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d86:	218c      	movs	r1, #140	; 0x8c
 8000d88:	fb01 f303 	mul.w	r3, r1, r3
 8000d8c:	4941      	ldr	r1, [pc, #260]	; (8000e94 <protagonistDraw+0x138>)
 8000d8e:	fb81 0103 	smull	r0, r1, r1, r3
 8000d92:	4419      	add	r1, r3
 8000d94:	12c9      	asrs	r1, r1, #11
 8000d96:	17db      	asrs	r3, r3, #31
 8000d98:	1acb      	subs	r3, r1, r3
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d071      	beq.n	8000e82 <protagonistDraw+0x126>
			osMutexAcquire(MTX1Handle, osWaitForever);
 8000d9e:	4b3e      	ldr	r3, [pc, #248]	; (8000e98 <protagonistDraw+0x13c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f04f 31ff 	mov.w	r1, #4294967295
 8000da6:	4618      	mov	r0, r3
 8000da8:	f002 fa15 	bl	80031d6 <osMutexAcquire>
			lcd_fill_rect( 3, POSITION(adc_prev_value), 14, 20, ST7735_BLACK);
 8000dac:	4b38      	ldr	r3, [pc, #224]	; (8000e90 <protagonistDraw+0x134>)
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000db4:	228c      	movs	r2, #140	; 0x8c
 8000db6:	fb02 f303 	mul.w	r3, r2, r3
 8000dba:	4a36      	ldr	r2, [pc, #216]	; (8000e94 <protagonistDraw+0x138>)
 8000dbc:	fb82 1203 	smull	r1, r2, r2, r3
 8000dc0:	441a      	add	r2, r3
 8000dc2:	12d2      	asrs	r2, r2, #11
 8000dc4:	17db      	asrs	r3, r3, #31
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	b219      	sxth	r1, r3
 8000dca:	2300      	movs	r3, #0
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	2314      	movs	r3, #20
 8000dd0:	220e      	movs	r2, #14
 8000dd2:	2003      	movs	r0, #3
 8000dd4:	f7ff fd46 	bl	8000864 <lcd_fill_rect>
			lcd_fill_rect( 3, POSITION(adc_value),       5, 20, ST7735_CYAN);
 8000dd8:	4b2b      	ldr	r3, [pc, #172]	; (8000e88 <protagonistDraw+0x12c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000de0:	228c      	movs	r2, #140	; 0x8c
 8000de2:	fb03 f202 	mul.w	r2, r3, r2
 8000de6:	4b29      	ldr	r3, [pc, #164]	; (8000e8c <protagonistDraw+0x130>)
 8000de8:	fba3 1302 	umull	r1, r3, r3, r2
 8000dec:	1ad2      	subs	r2, r2, r3
 8000dee:	0852      	lsrs	r2, r2, #1
 8000df0:	4413      	add	r3, r2
 8000df2:	0adb      	lsrs	r3, r3, #11
 8000df4:	b219      	sxth	r1, r3
 8000df6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	2314      	movs	r3, #20
 8000dfe:	2205      	movs	r2, #5
 8000e00:	2003      	movs	r0, #3
 8000e02:	f7ff fd2f 	bl	8000864 <lcd_fill_rect>
			lcd_fill_rect( 8, POSITION(adc_value) + 5,   3, 10, ST7735_CYAN);
 8000e06:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <protagonistDraw+0x12c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e0e:	228c      	movs	r2, #140	; 0x8c
 8000e10:	fb03 f202 	mul.w	r2, r3, r2
 8000e14:	4b1d      	ldr	r3, [pc, #116]	; (8000e8c <protagonistDraw+0x130>)
 8000e16:	fba3 1302 	umull	r1, r3, r3, r2
 8000e1a:	1ad2      	subs	r2, r2, r3
 8000e1c:	0852      	lsrs	r2, r2, #1
 8000e1e:	4413      	add	r3, r2
 8000e20:	0adb      	lsrs	r3, r3, #11
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	3305      	adds	r3, #5
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	b219      	sxth	r1, r3
 8000e2a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	230a      	movs	r3, #10
 8000e32:	2203      	movs	r2, #3
 8000e34:	2008      	movs	r0, #8
 8000e36:	f7ff fd15 	bl	8000864 <lcd_fill_rect>
			lcd_fill_rect(11, POSITION(adc_value) + 8,   3,  4, ST7735_CYAN);
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <protagonistDraw+0x12c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e42:	228c      	movs	r2, #140	; 0x8c
 8000e44:	fb03 f202 	mul.w	r2, r3, r2
 8000e48:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <protagonistDraw+0x130>)
 8000e4a:	fba3 1302 	umull	r1, r3, r3, r2
 8000e4e:	1ad2      	subs	r2, r2, r3
 8000e50:	0852      	lsrs	r2, r2, #1
 8000e52:	4413      	add	r3, r2
 8000e54:	0adb      	lsrs	r3, r3, #11
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	3308      	adds	r3, #8
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	b219      	sxth	r1, r3
 8000e5e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	2304      	movs	r3, #4
 8000e66:	2203      	movs	r2, #3
 8000e68:	200b      	movs	r0, #11
 8000e6a:	f7ff fcfb 	bl	8000864 <lcd_fill_rect>
			adc_prev_value = adc_value;
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <protagonistDraw+0x12c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <protagonistDraw+0x134>)
 8000e76:	801a      	strh	r2, [r3, #0]
			osMutexRelease(MTX1Handle);
 8000e78:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <protagonistDraw+0x13c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f002 f9f5 	bl	800326c <osMutexRelease>
	}
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000154 	.word	0x20000154
 8000e8c:	00100101 	.word	0x00100101
 8000e90:	20000158 	.word	0x20000158
 8000e94:	80080081 	.word	0x80080081
 8000e98:	20000144 	.word	0x20000144

08000e9c <bulletDraw>:

void bulletDraw()
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af02      	add	r7, sp, #8
	for(queue *buffer = startPtr; buffer != NULL; buffer = (queue*)(buffer->nextBullet)) {
 8000ea2:	4b20      	ldr	r3, [pc, #128]	; (8000f24 <bulletDraw+0x88>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	e033      	b.n	8000f12 <bulletDraw+0x76>
		if((buffer->x + 5) < 128) {
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b7a      	cmp	r3, #122	; 0x7a
 8000eb0:	d81d      	bhi.n	8000eee <bulletDraw+0x52>
			lcd_fill_rect(buffer->x++, buffer->y, 5, 2, ST7735_BLACK);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	1c5a      	adds	r2, r3, #1
 8000eb8:	b2d1      	uxtb	r1, r2
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	7011      	strb	r1, [r2, #0]
 8000ebe:	b218      	sxth	r0, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	785b      	ldrb	r3, [r3, #1]
 8000ec4:	b219      	sxth	r1, r3
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	2302      	movs	r3, #2
 8000ecc:	2205      	movs	r2, #5
 8000ece:	f7ff fcc9 	bl	8000864 <lcd_fill_rect>
			lcd_fill_rect(buffer->x,   buffer->y, 5, 2, ST7735_GREEN);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	b218      	sxth	r0, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	785b      	ldrb	r3, [r3, #1]
 8000edc:	b219      	sxth	r1, r3
 8000ede:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	2205      	movs	r2, #5
 8000ee8:	f7ff fcbc 	bl	8000864 <lcd_fill_rect>
 8000eec:	e00e      	b.n	8000f0c <bulletDraw+0x70>
		} else {
			lcd_fill_rect(buffer->x, buffer->y, 5, 2, ST7735_BLACK);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	b218      	sxth	r0, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	785b      	ldrb	r3, [r3, #1]
 8000ef8:	b219      	sxth	r1, r3
 8000efa:	2300      	movs	r3, #0
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	2302      	movs	r3, #2
 8000f00:	2205      	movs	r2, #5
 8000f02:	f7ff fcaf 	bl	8000864 <lcd_fill_rect>
			delQueueFrame();
 8000f06:	f7ff fef9 	bl	8000cfc <delQueueFrame>
			break;
 8000f0a:	e006      	b.n	8000f1a <bulletDraw+0x7e>
	for(queue *buffer = startPtr; buffer != NULL; buffer = (queue*)(buffer->nextBullet)) {
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1c8      	bne.n	8000eaa <bulletDraw+0xe>
		}
	}
}
 8000f18:	bf00      	nop
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000148 	.word	0x20000148

08000f28 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	80fb      	strh	r3, [r7, #6]
	addQueueFrame();
 8000f32:	f7ff fea9 	bl	8000c88 <addQueueFrame>
	if(endPtr != NULL) {
 8000f36:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_GPIO_EXTI_Callback+0x58>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d01b      	beq.n	8000f76 <HAL_GPIO_EXTI_Callback+0x4e>
		endPtr->x = 14;
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <HAL_GPIO_EXTI_Callback+0x58>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	220e      	movs	r2, #14
 8000f44:	701a      	strb	r2, [r3, #0]
		endPtr->y = POSITION(adc_prev_value) + 9;
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f4e:	228c      	movs	r2, #140	; 0x8c
 8000f50:	fb02 f303 	mul.w	r3, r2, r3
 8000f54:	4a0c      	ldr	r2, [pc, #48]	; (8000f88 <HAL_GPIO_EXTI_Callback+0x60>)
 8000f56:	fb82 1203 	smull	r1, r2, r2, r3
 8000f5a:	441a      	add	r2, r3
 8000f5c:	12d2      	asrs	r2, r2, #11
 8000f5e:	17db      	asrs	r3, r3, #31
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_GPIO_EXTI_Callback+0x58>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	3209      	adds	r2, #9
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	705a      	strb	r2, [r3, #1]
		endPtr->nextBullet = NULL;
 8000f6e:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <HAL_GPIO_EXTI_Callback+0x58>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2200      	movs	r2, #0
 8000f74:	605a      	str	r2, [r3, #4]
	}
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	2000014c 	.word	0x2000014c
 8000f84:	20000158 	.word	0x20000158
 8000f88:	80080081 	.word	0x80080081

08000f8c <StartDraw>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDraw */
void StartDraw(void *argument)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	if(lcd_init())
 8000f94:	f7ff fb74 	bl	8000680 <lcd_init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d000      	beq.n	8000fa0 <StartDraw+0x14>
	  while(1){}
 8000f9e:	e7fe      	b.n	8000f9e <StartDraw+0x12>
	lcd_fill(ST7735_BLACK);
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f7ff fcc5 	bl	8000930 <lcd_fill>
	adc_value = 2048;
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <StartDraw+0x44>)
 8000fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fac:	601a      	str	r2, [r3, #0]
	adc_prev_value = adc_value + 1024;		// adc_prev_value != adc_prev_value at first
 8000fae:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <StartDraw+0x44>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <StartDraw+0x48>)
 8000fbc:	801a      	strh	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	protagonistDraw();
 8000fbe:	f7ff fecd 	bl	8000d5c <protagonistDraw>
	bulletDraw();
 8000fc2:	f7ff ff6b 	bl	8000e9c <bulletDraw>

    osDelay(FPS_TO_TICKS(60));
 8000fc6:	2010      	movs	r0, #16
 8000fc8:	f002 f864 	bl	8003094 <osDelay>
	protagonistDraw();
 8000fcc:	e7f7      	b.n	8000fbe <StartDraw+0x32>
 8000fce:	bf00      	nop
 8000fd0:	20000154 	.word	0x20000154
 8000fd4:	20000158 	.word	0x20000158

08000fd8 <StartControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControl */
void StartControl(void *argument)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControl */
  /* Infinite loop */
  for(;;)
  {
	HAL_ADC_Start_IT(&hadc1);
 8000fe0:	480e      	ldr	r0, [pc, #56]	; (800101c <StartControl+0x44>)
 8000fe2:	f000 fae1 	bl	80015a8 <HAL_ADC_Start_IT>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000fe6:	f04f 31ff 	mov.w	r1, #4294967295
 8000fea:	480c      	ldr	r0, [pc, #48]	; (800101c <StartControl+0x44>)
 8000fec:	f000 fa51 	bl	8001492 <HAL_ADC_PollForConversion>

	osMutexAcquire(MTX1Handle, osWaitForever);
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <StartControl+0x48>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f002 f8ec 	bl	80031d6 <osMutexAcquire>
	adc_value = HAL_ADC_GetValue(&hadc1);
 8000ffe:	4807      	ldr	r0, [pc, #28]	; (800101c <StartControl+0x44>)
 8001000:	f000 fb90 	bl	8001724 <HAL_ADC_GetValue>
 8001004:	4603      	mov	r3, r0
 8001006:	4a07      	ldr	r2, [pc, #28]	; (8001024 <StartControl+0x4c>)
 8001008:	6013      	str	r3, [r2, #0]
	osMutexRelease(MTX1Handle);
 800100a:	4b05      	ldr	r3, [pc, #20]	; (8001020 <StartControl+0x48>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f002 f92c 	bl	800326c <osMutexRelease>

    osDelay(FPS_TO_TICKS(60));
 8001014:	2010      	movs	r0, #16
 8001016:	f002 f83d 	bl	8003094 <osDelay>
	HAL_ADC_Start_IT(&hadc1);
 800101a:	e7e1      	b.n	8000fe0 <StartControl+0x8>
 800101c:	2000009c 	.word	0x2000009c
 8001020:	20000144 	.word	0x20000144
 8001024:	20000154 	.word	0x20000154

08001028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800102c:	b672      	cpsid	i
}
 800102e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001030:	e7fe      	b.n	8001030 <Error_Handler+0x8>
	...

08001034 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_MspInit+0x54>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	4a11      	ldr	r2, [pc, #68]	; (8001088 <HAL_MspInit+0x54>)
 8001044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001048:	6453      	str	r3, [r2, #68]	; 0x44
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <HAL_MspInit+0x54>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	603b      	str	r3, [r7, #0]
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <HAL_MspInit+0x54>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <HAL_MspInit+0x54>)
 8001060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001064:	6413      	str	r3, [r2, #64]	; 0x40
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <HAL_MspInit+0x54>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	210f      	movs	r1, #15
 8001076:	f06f 0001 	mvn.w	r0, #1
 800107a:	f000 fe5a 	bl	8001d32 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800

0800108c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a17      	ldr	r2, [pc, #92]	; (8001108 <HAL_ADC_MspInit+0x7c>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d127      	bne.n	80010fe <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	4b16      	ldr	r3, [pc, #88]	; (800110c <HAL_ADC_MspInit+0x80>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	4a15      	ldr	r2, [pc, #84]	; (800110c <HAL_ADC_MspInit+0x80>)
 80010b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010bc:	6453      	str	r3, [r2, #68]	; 0x44
 80010be:	4b13      	ldr	r3, [pc, #76]	; (800110c <HAL_ADC_MspInit+0x80>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <HAL_ADC_MspInit+0x80>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a0e      	ldr	r2, [pc, #56]	; (800110c <HAL_ADC_MspInit+0x80>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b0c      	ldr	r3, [pc, #48]	; (800110c <HAL_ADC_MspInit+0x80>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = CONTROL_POT_Pin;
 80010e6:	2301      	movs	r3, #1
 80010e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ea:	2303      	movs	r3, #3
 80010ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CONTROL_POT_GPIO_Port, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	4805      	ldr	r0, [pc, #20]	; (8001110 <HAL_ADC_MspInit+0x84>)
 80010fa:	f000 fe51 	bl	8001da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010fe:	bf00      	nop
 8001100:	3728      	adds	r7, #40	; 0x28
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40012000 	.word	0x40012000
 800110c:	40023800 	.word	0x40023800
 8001110:	40020000 	.word	0x40020000

08001114 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	; 0x28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a19      	ldr	r2, [pc, #100]	; (8001198 <HAL_SPI_MspInit+0x84>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d12b      	bne.n	800118e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	4b18      	ldr	r3, [pc, #96]	; (800119c <HAL_SPI_MspInit+0x88>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	4a17      	ldr	r2, [pc, #92]	; (800119c <HAL_SPI_MspInit+0x88>)
 8001140:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001144:	6453      	str	r3, [r2, #68]	; 0x44
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <HAL_SPI_MspInit+0x88>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b11      	ldr	r3, [pc, #68]	; (800119c <HAL_SPI_MspInit+0x88>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a10      	ldr	r2, [pc, #64]	; (800119c <HAL_SPI_MspInit+0x88>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <HAL_SPI_MspInit+0x88>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_SDA_Pin;
 800116e:	23a0      	movs	r3, #160	; 0xa0
 8001170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117a:	2303      	movs	r3, #3
 800117c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800117e:	2305      	movs	r3, #5
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	4805      	ldr	r0, [pc, #20]	; (80011a0 <HAL_SPI_MspInit+0x8c>)
 800118a:	f000 fe09 	bl	8001da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	; 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40013000 	.word	0x40013000
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020000 	.word	0x40020000

080011a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <NMI_Handler+0x4>

080011aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <HardFault_Handler+0x4>

080011b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <MemManage_Handler+0x4>

080011b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ba:	e7fe      	b.n	80011ba <BusFault_Handler+0x4>

080011bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <UsageFault_Handler+0x4>

080011c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d4:	f000 f8d6 	bl	8001384 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80011d8:	f003 fec6 	bl	8004f68 <xTaskGetSchedulerState>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d001      	beq.n	80011e6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80011e2:	f004 fda9 	bl	8005d38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}

080011ea <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80011ee:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80011f2:	f000 ff73 	bl	80020dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001204:	4a14      	ldr	r2, [pc, #80]	; (8001258 <_sbrk+0x5c>)
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <_sbrk+0x60>)
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <_sbrk+0x64>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d102      	bne.n	800121e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <_sbrk+0x64>)
 800121a:	4a12      	ldr	r2, [pc, #72]	; (8001264 <_sbrk+0x68>)
 800121c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <_sbrk+0x64>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	429a      	cmp	r2, r3
 800122a:	d207      	bcs.n	800123c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800122c:	f004 fffe 	bl	800622c <__errno>
 8001230:	4603      	mov	r3, r0
 8001232:	220c      	movs	r2, #12
 8001234:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001236:	f04f 33ff 	mov.w	r3, #4294967295
 800123a:	e009      	b.n	8001250 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <_sbrk+0x64>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001242:	4b07      	ldr	r3, [pc, #28]	; (8001260 <_sbrk+0x64>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	4a05      	ldr	r2, [pc, #20]	; (8001260 <_sbrk+0x64>)
 800124c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800124e:	68fb      	ldr	r3, [r7, #12]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20010000 	.word	0x20010000
 800125c:	00000400 	.word	0x00000400
 8001260:	2000015c 	.word	0x2000015c
 8001264:	20004b88 	.word	0x20004b88

08001268 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <SystemInit+0x20>)
 800126e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001272:	4a05      	ldr	r2, [pc, #20]	; (8001288 <SystemInit+0x20>)
 8001274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800128c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001290:	480d      	ldr	r0, [pc, #52]	; (80012c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001292:	490e      	ldr	r1, [pc, #56]	; (80012cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001294:	4a0e      	ldr	r2, [pc, #56]	; (80012d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001298:	e002      	b.n	80012a0 <LoopCopyDataInit>

0800129a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800129c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129e:	3304      	adds	r3, #4

080012a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a4:	d3f9      	bcc.n	800129a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a6:	4a0b      	ldr	r2, [pc, #44]	; (80012d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012a8:	4c0b      	ldr	r4, [pc, #44]	; (80012d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ac:	e001      	b.n	80012b2 <LoopFillZerobss>

080012ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b0:	3204      	adds	r2, #4

080012b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b4:	d3fb      	bcc.n	80012ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012b6:	f7ff ffd7 	bl	8001268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ba:	f004 ffbd 	bl	8006238 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012be:	f7ff fb51 	bl	8000964 <main>
  bx  lr    
 80012c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012c4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80012c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012cc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80012d0:	08006730 	.word	0x08006730
  ldr r2, =_sbss
 80012d4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80012d8:	20004b84 	.word	0x20004b84

080012dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012dc:	e7fe      	b.n	80012dc <ADC_IRQHandler>
	...

080012e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012e4:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <HAL_Init+0x40>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0d      	ldr	r2, [pc, #52]	; (8001320 <HAL_Init+0x40>)
 80012ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012f0:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <HAL_Init+0x40>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <HAL_Init+0x40>)
 80012f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <HAL_Init+0x40>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a07      	ldr	r2, [pc, #28]	; (8001320 <HAL_Init+0x40>)
 8001302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001306:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001308:	2003      	movs	r0, #3
 800130a:	f000 fd07 	bl	8001d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800130e:	200f      	movs	r0, #15
 8001310:	f000 f808 	bl	8001324 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001314:	f7ff fe8e 	bl	8001034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40023c00 	.word	0x40023c00

08001324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_InitTick+0x54>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <HAL_InitTick+0x58>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	4619      	mov	r1, r3
 8001336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133a:	fbb3 f3f1 	udiv	r3, r3, r1
 800133e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f000 fd1f 	bl	8001d86 <HAL_SYSTICK_Config>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e00e      	b.n	8001370 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b0f      	cmp	r3, #15
 8001356:	d80a      	bhi.n	800136e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001358:	2200      	movs	r2, #0
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f000 fce7 	bl	8001d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001364:	4a06      	ldr	r2, [pc, #24]	; (8001380 <HAL_InitTick+0x5c>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	e000      	b.n	8001370 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000000 	.word	0x20000000
 800137c:	20000008 	.word	0x20000008
 8001380:	20000004 	.word	0x20000004

08001384 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_IncTick+0x20>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_IncTick+0x24>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4413      	add	r3, r2
 8001394:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <HAL_IncTick+0x24>)
 8001396:	6013      	str	r3, [r2, #0]
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20000008 	.word	0x20000008
 80013a8:	20000160 	.word	0x20000160

080013ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return uwTick;
 80013b0:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <HAL_GetTick+0x14>)
 80013b2:	681b      	ldr	r3, [r3, #0]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	20000160 	.word	0x20000160

080013c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013cc:	f7ff ffee 	bl	80013ac <HAL_GetTick>
 80013d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013dc:	d005      	beq.n	80013ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <HAL_Delay+0x44>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4413      	add	r3, r2
 80013e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013ea:	bf00      	nop
 80013ec:	f7ff ffde 	bl	80013ac <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d8f7      	bhi.n	80013ec <HAL_Delay+0x28>
  {
  }
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000008 	.word	0x20000008

0800140c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001414:	2300      	movs	r3, #0
 8001416:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e033      	b.n	800148a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	2b00      	cmp	r3, #0
 8001428:	d109      	bne.n	800143e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff fe2e 	bl	800108c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	f003 0310 	and.w	r3, r3, #16
 8001446:	2b00      	cmp	r3, #0
 8001448:	d118      	bne.n	800147c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001452:	f023 0302 	bic.w	r3, r3, #2
 8001456:	f043 0202 	orr.w	r2, r3, #2
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f000 fa90 	bl	8001984 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f023 0303 	bic.w	r3, r3, #3
 8001472:	f043 0201 	orr.w	r2, r3, #1
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	641a      	str	r2, [r3, #64]	; 0x40
 800147a:	e001      	b.n	8001480 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001488:	7bfb      	ldrb	r3, [r7, #15]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b084      	sub	sp, #16
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ae:	d113      	bne.n	80014d8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80014ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014be:	d10b      	bne.n	80014d8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	f043 0220 	orr.w	r2, r3, #32
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e063      	b.n	80015a0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80014d8:	f7ff ff68 	bl	80013ac <HAL_GetTick>
 80014dc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014de:	e021      	b.n	8001524 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e6:	d01d      	beq.n	8001524 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d007      	beq.n	80014fe <HAL_ADC_PollForConversion+0x6c>
 80014ee:	f7ff ff5d 	bl	80013ac <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d212      	bcs.n	8001524 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b02      	cmp	r3, #2
 800150a:	d00b      	beq.n	8001524 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	f043 0204 	orr.w	r2, r3, #4
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e03d      	b.n	80015a0 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b02      	cmp	r3, #2
 8001530:	d1d6      	bne.n	80014e0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f06f 0212 	mvn.w	r2, #18
 800153a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d123      	bne.n	800159e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800155a:	2b00      	cmp	r3, #0
 800155c:	d11f      	bne.n	800159e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001564:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001568:	2b00      	cmp	r3, #0
 800156a:	d006      	beq.n	800157a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001576:	2b00      	cmp	r3, #0
 8001578:	d111      	bne.n	800159e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d105      	bne.n	800159e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f043 0201 	orr.w	r2, r3, #1
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d101      	bne.n	80015c2 <HAL_ADC_Start_IT+0x1a>
 80015be:	2302      	movs	r3, #2
 80015c0:	e0a1      	b.n	8001706 <HAL_ADC_Start_IT+0x15e>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d018      	beq.n	800160a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f042 0201 	orr.w	r2, r2, #1
 80015e6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015e8:	4b4a      	ldr	r3, [pc, #296]	; (8001714 <HAL_ADC_Start_IT+0x16c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a4a      	ldr	r2, [pc, #296]	; (8001718 <HAL_ADC_Start_IT+0x170>)
 80015ee:	fba2 2303 	umull	r2, r3, r2, r3
 80015f2:	0c9a      	lsrs	r2, r3, #18
 80015f4:	4613      	mov	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4413      	add	r3, r2
 80015fa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80015fc:	e002      	b.n	8001604 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	3b01      	subs	r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f9      	bne.n	80015fe <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b01      	cmp	r3, #1
 8001616:	d169      	bne.n	80016ec <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001620:	f023 0301 	bic.w	r3, r3, #1
 8001624:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001636:	2b00      	cmp	r3, #0
 8001638:	d007      	beq.n	800164a <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001642:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001656:	d106      	bne.n	8001666 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165c:	f023 0206 	bic.w	r2, r3, #6
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	645a      	str	r2, [r3, #68]	; 0x44
 8001664:	e002      	b.n	800166c <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001674:	4b29      	ldr	r3, [pc, #164]	; (800171c <HAL_ADC_Start_IT+0x174>)
 8001676:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001680:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001690:	f043 0320 	orr.w	r3, r3, #32
 8001694:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f003 031f 	and.w	r3, r3, #31
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10f      	bne.n	80016c2 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d129      	bne.n	8001704 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	e020      	b.n	8001704 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a16      	ldr	r2, [pc, #88]	; (8001720 <HAL_ADC_Start_IT+0x178>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d11b      	bne.n	8001704 <HAL_ADC_Start_IT+0x15c>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d114      	bne.n	8001704 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	e00b      	b.n	8001704 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	f043 0210 	orr.w	r2, r3, #16
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fc:	f043 0201 	orr.w	r2, r3, #1
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000000 	.word	0x20000000
 8001718:	431bde83 	.word	0x431bde83
 800171c:	40012300 	.word	0x40012300
 8001720:	40012000 	.word	0x40012000

08001724 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001732:	4618      	mov	r0, r3
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800174a:	2300      	movs	r3, #0
 800174c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001754:	2b01      	cmp	r3, #1
 8001756:	d101      	bne.n	800175c <HAL_ADC_ConfigChannel+0x1c>
 8001758:	2302      	movs	r3, #2
 800175a:	e105      	b.n	8001968 <HAL_ADC_ConfigChannel+0x228>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b09      	cmp	r3, #9
 800176a:	d925      	bls.n	80017b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	68d9      	ldr	r1, [r3, #12]
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	b29b      	uxth	r3, r3
 8001778:	461a      	mov	r2, r3
 800177a:	4613      	mov	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	3b1e      	subs	r3, #30
 8001782:	2207      	movs	r2, #7
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43da      	mvns	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	400a      	ands	r2, r1
 8001790:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	68d9      	ldr	r1, [r3, #12]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	4603      	mov	r3, r0
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4403      	add	r3, r0
 80017aa:	3b1e      	subs	r3, #30
 80017ac:	409a      	lsls	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	e022      	b.n	80017fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6919      	ldr	r1, [r3, #16]
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	461a      	mov	r2, r3
 80017c6:	4613      	mov	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	4413      	add	r3, r2
 80017cc:	2207      	movs	r2, #7
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43da      	mvns	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	400a      	ands	r2, r1
 80017da:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6919      	ldr	r1, [r3, #16]
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	4618      	mov	r0, r3
 80017ee:	4603      	mov	r3, r0
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4403      	add	r3, r0
 80017f4:	409a      	lsls	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b06      	cmp	r3, #6
 8001804:	d824      	bhi.n	8001850 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	3b05      	subs	r3, #5
 8001818:	221f      	movs	r2, #31
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43da      	mvns	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	400a      	ands	r2, r1
 8001826:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	b29b      	uxth	r3, r3
 8001834:	4618      	mov	r0, r3
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	3b05      	subs	r3, #5
 8001842:	fa00 f203 	lsl.w	r2, r0, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	635a      	str	r2, [r3, #52]	; 0x34
 800184e:	e04c      	b.n	80018ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b0c      	cmp	r3, #12
 8001856:	d824      	bhi.n	80018a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	3b23      	subs	r3, #35	; 0x23
 800186a:	221f      	movs	r2, #31
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43da      	mvns	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	400a      	ands	r2, r1
 8001878:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	b29b      	uxth	r3, r3
 8001886:	4618      	mov	r0, r3
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	3b23      	subs	r3, #35	; 0x23
 8001894:	fa00 f203 	lsl.w	r2, r0, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	430a      	orrs	r2, r1
 800189e:	631a      	str	r2, [r3, #48]	; 0x30
 80018a0:	e023      	b.n	80018ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	3b41      	subs	r3, #65	; 0x41
 80018b4:	221f      	movs	r2, #31
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43da      	mvns	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	400a      	ands	r2, r1
 80018c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	4618      	mov	r0, r3
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685a      	ldr	r2, [r3, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	3b41      	subs	r3, #65	; 0x41
 80018de:	fa00 f203 	lsl.w	r2, r0, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018ea:	4b22      	ldr	r3, [pc, #136]	; (8001974 <HAL_ADC_ConfigChannel+0x234>)
 80018ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a21      	ldr	r2, [pc, #132]	; (8001978 <HAL_ADC_ConfigChannel+0x238>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d109      	bne.n	800190c <HAL_ADC_ConfigChannel+0x1cc>
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b12      	cmp	r3, #18
 80018fe:	d105      	bne.n	800190c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a19      	ldr	r2, [pc, #100]	; (8001978 <HAL_ADC_ConfigChannel+0x238>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d123      	bne.n	800195e <HAL_ADC_ConfigChannel+0x21e>
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2b10      	cmp	r3, #16
 800191c:	d003      	beq.n	8001926 <HAL_ADC_ConfigChannel+0x1e6>
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2b11      	cmp	r3, #17
 8001924:	d11b      	bne.n	800195e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2b10      	cmp	r3, #16
 8001938:	d111      	bne.n	800195e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <HAL_ADC_ConfigChannel+0x23c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a10      	ldr	r2, [pc, #64]	; (8001980 <HAL_ADC_ConfigChannel+0x240>)
 8001940:	fba2 2303 	umull	r2, r3, r2, r3
 8001944:	0c9a      	lsrs	r2, r3, #18
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001950:	e002      	b.n	8001958 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	3b01      	subs	r3, #1
 8001956:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f9      	bne.n	8001952 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	40012300 	.word	0x40012300
 8001978:	40012000 	.word	0x40012000
 800197c:	20000000 	.word	0x20000000
 8001980:	431bde83 	.word	0x431bde83

08001984 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800198c:	4b79      	ldr	r3, [pc, #484]	; (8001b74 <ADC_Init+0x1f0>)
 800198e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	431a      	orrs	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6859      	ldr	r1, [r3, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	021a      	lsls	r2, r3, #8
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80019dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6859      	ldr	r1, [r3, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6899      	ldr	r1, [r3, #8]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a16:	4a58      	ldr	r2, [pc, #352]	; (8001b78 <ADC_Init+0x1f4>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d022      	beq.n	8001a62 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6899      	ldr	r1, [r3, #8]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6899      	ldr	r1, [r3, #8]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	e00f      	b.n	8001a82 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a80:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 0202 	bic.w	r2, r2, #2
 8001a90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6899      	ldr	r1, [r3, #8]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	7e1b      	ldrb	r3, [r3, #24]
 8001a9c:	005a      	lsls	r2, r3, #1
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d01b      	beq.n	8001ae8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001abe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ace:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6859      	ldr	r1, [r3, #4]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ada:	3b01      	subs	r3, #1
 8001adc:	035a      	lsls	r2, r3, #13
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	e007      	b.n	8001af8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001af6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	051a      	lsls	r2, r3, #20
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6899      	ldr	r1, [r3, #8]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b3a:	025a      	lsls	r2, r3, #9
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6899      	ldr	r1, [r3, #8]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	029a      	lsls	r2, r3, #10
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	609a      	str	r2, [r3, #8]
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	40012300 	.word	0x40012300
 8001b78:	0f000001 	.word	0x0f000001

08001b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bae:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	60d3      	str	r3, [r2, #12]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <__NVIC_GetPriorityGrouping+0x18>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	f003 0307 	and.w	r3, r3, #7
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	db0b      	blt.n	8001c0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	f003 021f 	and.w	r2, r3, #31
 8001bf8:	4907      	ldr	r1, [pc, #28]	; (8001c18 <__NVIC_EnableIRQ+0x38>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	2001      	movs	r0, #1
 8001c02:	fa00 f202 	lsl.w	r2, r0, r2
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000e100 	.word	0xe000e100

08001c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	6039      	str	r1, [r7, #0]
 8001c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	db0a      	blt.n	8001c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	490c      	ldr	r1, [pc, #48]	; (8001c68 <__NVIC_SetPriority+0x4c>)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	0112      	lsls	r2, r2, #4
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	440b      	add	r3, r1
 8001c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c44:	e00a      	b.n	8001c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	4908      	ldr	r1, [pc, #32]	; (8001c6c <__NVIC_SetPriority+0x50>)
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	3b04      	subs	r3, #4
 8001c54:	0112      	lsls	r2, r2, #4
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	440b      	add	r3, r1
 8001c5a:	761a      	strb	r2, [r3, #24]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000e100 	.word	0xe000e100
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	; 0x24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f1c3 0307 	rsb	r3, r3, #7
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	bf28      	it	cs
 8001c8e:	2304      	movcs	r3, #4
 8001c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3304      	adds	r3, #4
 8001c96:	2b06      	cmp	r3, #6
 8001c98:	d902      	bls.n	8001ca0 <NVIC_EncodePriority+0x30>
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3b03      	subs	r3, #3
 8001c9e:	e000      	b.n	8001ca2 <NVIC_EncodePriority+0x32>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	43d9      	mvns	r1, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc8:	4313      	orrs	r3, r2
         );
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3724      	adds	r7, #36	; 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ce8:	d301      	bcc.n	8001cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cea:	2301      	movs	r3, #1
 8001cec:	e00f      	b.n	8001d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cee:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <SysTick_Config+0x40>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cf6:	210f      	movs	r1, #15
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfc:	f7ff ff8e 	bl	8001c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <SysTick_Config+0x40>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d06:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <SysTick_Config+0x40>)
 8001d08:	2207      	movs	r2, #7
 8001d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	e000e010 	.word	0xe000e010

08001d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff ff29 	bl	8001b7c <__NVIC_SetPriorityGrouping>
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	4603      	mov	r3, r0
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
 8001d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d44:	f7ff ff3e 	bl	8001bc4 <__NVIC_GetPriorityGrouping>
 8001d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	68b9      	ldr	r1, [r7, #8]
 8001d4e:	6978      	ldr	r0, [r7, #20]
 8001d50:	f7ff ff8e 	bl	8001c70 <NVIC_EncodePriority>
 8001d54:	4602      	mov	r2, r0
 8001d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff5d 	bl	8001c1c <__NVIC_SetPriority>
}
 8001d62:	bf00      	nop
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff31 	bl	8001be0 <__NVIC_EnableIRQ>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff ffa2 	bl	8001cd8 <SysTick_Config>
 8001d94:	4603      	mov	r3, r0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b089      	sub	sp, #36	; 0x24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001db6:	2300      	movs	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]
 8001dba:	e159      	b.n	8002070 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	f040 8148 	bne.w	800206a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d005      	beq.n	8001df2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d130      	bne.n	8001e54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	2203      	movs	r2, #3
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43db      	mvns	r3, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4013      	ands	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e28:	2201      	movs	r2, #1
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4013      	ands	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	091b      	lsrs	r3, r3, #4
 8001e3e:	f003 0201 	and.w	r2, r3, #1
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	d017      	beq.n	8001e90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d123      	bne.n	8001ee4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	08da      	lsrs	r2, r3, #3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3208      	adds	r2, #8
 8001ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	220f      	movs	r2, #15
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	691a      	ldr	r2, [r3, #16]
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	08da      	lsrs	r2, r3, #3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3208      	adds	r2, #8
 8001ede:	69b9      	ldr	r1, [r7, #24]
 8001ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	2203      	movs	r2, #3
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 0203 	and.w	r2, r3, #3
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 80a2 	beq.w	800206a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	4b57      	ldr	r3, [pc, #348]	; (8002088 <HAL_GPIO_Init+0x2e8>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	4a56      	ldr	r2, [pc, #344]	; (8002088 <HAL_GPIO_Init+0x2e8>)
 8001f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f34:	6453      	str	r3, [r2, #68]	; 0x44
 8001f36:	4b54      	ldr	r3, [pc, #336]	; (8002088 <HAL_GPIO_Init+0x2e8>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f42:	4a52      	ldr	r2, [pc, #328]	; (800208c <HAL_GPIO_Init+0x2ec>)
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	089b      	lsrs	r3, r3, #2
 8001f48:	3302      	adds	r3, #2
 8001f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	220f      	movs	r2, #15
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4013      	ands	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a49      	ldr	r2, [pc, #292]	; (8002090 <HAL_GPIO_Init+0x2f0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d019      	beq.n	8001fa2 <HAL_GPIO_Init+0x202>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a48      	ldr	r2, [pc, #288]	; (8002094 <HAL_GPIO_Init+0x2f4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d013      	beq.n	8001f9e <HAL_GPIO_Init+0x1fe>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a47      	ldr	r2, [pc, #284]	; (8002098 <HAL_GPIO_Init+0x2f8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d00d      	beq.n	8001f9a <HAL_GPIO_Init+0x1fa>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a46      	ldr	r2, [pc, #280]	; (800209c <HAL_GPIO_Init+0x2fc>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d007      	beq.n	8001f96 <HAL_GPIO_Init+0x1f6>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a45      	ldr	r2, [pc, #276]	; (80020a0 <HAL_GPIO_Init+0x300>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d101      	bne.n	8001f92 <HAL_GPIO_Init+0x1f2>
 8001f8e:	2304      	movs	r3, #4
 8001f90:	e008      	b.n	8001fa4 <HAL_GPIO_Init+0x204>
 8001f92:	2307      	movs	r3, #7
 8001f94:	e006      	b.n	8001fa4 <HAL_GPIO_Init+0x204>
 8001f96:	2303      	movs	r3, #3
 8001f98:	e004      	b.n	8001fa4 <HAL_GPIO_Init+0x204>
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	e002      	b.n	8001fa4 <HAL_GPIO_Init+0x204>
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <HAL_GPIO_Init+0x204>
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	69fa      	ldr	r2, [r7, #28]
 8001fa6:	f002 0203 	and.w	r2, r2, #3
 8001faa:	0092      	lsls	r2, r2, #2
 8001fac:	4093      	lsls	r3, r2
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fb4:	4935      	ldr	r1, [pc, #212]	; (800208c <HAL_GPIO_Init+0x2ec>)
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	089b      	lsrs	r3, r3, #2
 8001fba:	3302      	adds	r3, #2
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fc2:	4b38      	ldr	r3, [pc, #224]	; (80020a4 <HAL_GPIO_Init+0x304>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fe6:	4a2f      	ldr	r2, [pc, #188]	; (80020a4 <HAL_GPIO_Init+0x304>)
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fec:	4b2d      	ldr	r3, [pc, #180]	; (80020a4 <HAL_GPIO_Init+0x304>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002010:	4a24      	ldr	r2, [pc, #144]	; (80020a4 <HAL_GPIO_Init+0x304>)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002016:	4b23      	ldr	r3, [pc, #140]	; (80020a4 <HAL_GPIO_Init+0x304>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	43db      	mvns	r3, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4013      	ands	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800203a:	4a1a      	ldr	r2, [pc, #104]	; (80020a4 <HAL_GPIO_Init+0x304>)
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002040:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <HAL_GPIO_Init+0x304>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	43db      	mvns	r3, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4013      	ands	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002064:	4a0f      	ldr	r2, [pc, #60]	; (80020a4 <HAL_GPIO_Init+0x304>)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3301      	adds	r3, #1
 800206e:	61fb      	str	r3, [r7, #28]
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	2b0f      	cmp	r3, #15
 8002074:	f67f aea2 	bls.w	8001dbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002078:	bf00      	nop
 800207a:	bf00      	nop
 800207c:	3724      	adds	r7, #36	; 0x24
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	40023800 	.word	0x40023800
 800208c:	40013800 	.word	0x40013800
 8002090:	40020000 	.word	0x40020000
 8002094:	40020400 	.word	0x40020400
 8002098:	40020800 	.word	0x40020800
 800209c:	40020c00 	.word	0x40020c00
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40013c00 	.word	0x40013c00

080020a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	807b      	strh	r3, [r7, #2]
 80020b4:	4613      	mov	r3, r2
 80020b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020b8:	787b      	ldrb	r3, [r7, #1]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020be:	887a      	ldrh	r2, [r7, #2]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020c4:	e003      	b.n	80020ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020c6:	887b      	ldrh	r3, [r7, #2]
 80020c8:	041a      	lsls	r2, r3, #16
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	619a      	str	r2, [r3, #24]
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
	...

080020dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80020e6:	4b08      	ldr	r3, [pc, #32]	; (8002108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020e8:	695a      	ldr	r2, [r3, #20]
 80020ea:	88fb      	ldrh	r3, [r7, #6]
 80020ec:	4013      	ands	r3, r2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d006      	beq.n	8002100 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020f2:	4a05      	ldr	r2, [pc, #20]	; (8002108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020f4:	88fb      	ldrh	r3, [r7, #6]
 80020f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020f8:	88fb      	ldrh	r3, [r7, #6]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe ff14 	bl	8000f28 <HAL_GPIO_EXTI_Callback>
  }
}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40013c00 	.word	0x40013c00

0800210c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e267      	b.n	80025ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d075      	beq.n	8002216 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800212a:	4b88      	ldr	r3, [pc, #544]	; (800234c <HAL_RCC_OscConfig+0x240>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 030c 	and.w	r3, r3, #12
 8002132:	2b04      	cmp	r3, #4
 8002134:	d00c      	beq.n	8002150 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002136:	4b85      	ldr	r3, [pc, #532]	; (800234c <HAL_RCC_OscConfig+0x240>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800213e:	2b08      	cmp	r3, #8
 8002140:	d112      	bne.n	8002168 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002142:	4b82      	ldr	r3, [pc, #520]	; (800234c <HAL_RCC_OscConfig+0x240>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800214a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800214e:	d10b      	bne.n	8002168 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002150:	4b7e      	ldr	r3, [pc, #504]	; (800234c <HAL_RCC_OscConfig+0x240>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d05b      	beq.n	8002214 <HAL_RCC_OscConfig+0x108>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d157      	bne.n	8002214 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e242      	b.n	80025ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002170:	d106      	bne.n	8002180 <HAL_RCC_OscConfig+0x74>
 8002172:	4b76      	ldr	r3, [pc, #472]	; (800234c <HAL_RCC_OscConfig+0x240>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a75      	ldr	r2, [pc, #468]	; (800234c <HAL_RCC_OscConfig+0x240>)
 8002178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	e01d      	b.n	80021bc <HAL_RCC_OscConfig+0xb0>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002188:	d10c      	bne.n	80021a4 <HAL_RCC_OscConfig+0x98>
 800218a:	4b70      	ldr	r3, [pc, #448]	; (800234c <HAL_RCC_OscConfig+0x240>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a6f      	ldr	r2, [pc, #444]	; (800234c <HAL_RCC_OscConfig+0x240>)
 8002190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	4b6d      	ldr	r3, [pc, #436]	; (800234c <HAL_RCC_OscConfig+0x240>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a6c      	ldr	r2, [pc, #432]	; (800234c <HAL_RCC_OscConfig+0x240>)
 800219c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	e00b      	b.n	80021bc <HAL_RCC_OscConfig+0xb0>
 80021a4:	4b69      	ldr	r3, [pc, #420]	; (800234c <HAL_RCC_OscConfig+0x240>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a68      	ldr	r2, [pc, #416]	; (800234c <HAL_RCC_OscConfig+0x240>)
 80021aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ae:	6013      	str	r3, [r2, #0]
 80021b0:	4b66      	ldr	r3, [pc, #408]	; (800234c <HAL_RCC_OscConfig+0x240>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a65      	ldr	r2, [pc, #404]	; (800234c <HAL_RCC_OscConfig+0x240>)
 80021b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d013      	beq.n	80021ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7ff f8f2 	bl	80013ac <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021cc:	f7ff f8ee 	bl	80013ac <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b64      	cmp	r3, #100	; 0x64
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e207      	b.n	80025ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021de:	4b5b      	ldr	r3, [pc, #364]	; (800234c <HAL_RCC_OscConfig+0x240>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0f0      	beq.n	80021cc <HAL_RCC_OscConfig+0xc0>
 80021ea:	e014      	b.n	8002216 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ec:	f7ff f8de 	bl	80013ac <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021f4:	f7ff f8da 	bl	80013ac <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b64      	cmp	r3, #100	; 0x64
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e1f3      	b.n	80025ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002206:	4b51      	ldr	r3, [pc, #324]	; (800234c <HAL_RCC_OscConfig+0x240>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f0      	bne.n	80021f4 <HAL_RCC_OscConfig+0xe8>
 8002212:	e000      	b.n	8002216 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002214:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d063      	beq.n	80022ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002222:	4b4a      	ldr	r3, [pc, #296]	; (800234c <HAL_RCC_OscConfig+0x240>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00b      	beq.n	8002246 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800222e:	4b47      	ldr	r3, [pc, #284]	; (800234c <HAL_RCC_OscConfig+0x240>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002236:	2b08      	cmp	r3, #8
 8002238:	d11c      	bne.n	8002274 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800223a:	4b44      	ldr	r3, [pc, #272]	; (800234c <HAL_RCC_OscConfig+0x240>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d116      	bne.n	8002274 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002246:	4b41      	ldr	r3, [pc, #260]	; (800234c <HAL_RCC_OscConfig+0x240>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d005      	beq.n	800225e <HAL_RCC_OscConfig+0x152>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d001      	beq.n	800225e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e1c7      	b.n	80025ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225e:	4b3b      	ldr	r3, [pc, #236]	; (800234c <HAL_RCC_OscConfig+0x240>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	4937      	ldr	r1, [pc, #220]	; (800234c <HAL_RCC_OscConfig+0x240>)
 800226e:	4313      	orrs	r3, r2
 8002270:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002272:	e03a      	b.n	80022ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d020      	beq.n	80022be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800227c:	4b34      	ldr	r3, [pc, #208]	; (8002350 <HAL_RCC_OscConfig+0x244>)
 800227e:	2201      	movs	r2, #1
 8002280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002282:	f7ff f893 	bl	80013ac <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800228a:	f7ff f88f 	bl	80013ac <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e1a8      	b.n	80025ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229c:	4b2b      	ldr	r3, [pc, #172]	; (800234c <HAL_RCC_OscConfig+0x240>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a8:	4b28      	ldr	r3, [pc, #160]	; (800234c <HAL_RCC_OscConfig+0x240>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4925      	ldr	r1, [pc, #148]	; (800234c <HAL_RCC_OscConfig+0x240>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	600b      	str	r3, [r1, #0]
 80022bc:	e015      	b.n	80022ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022be:	4b24      	ldr	r3, [pc, #144]	; (8002350 <HAL_RCC_OscConfig+0x244>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c4:	f7ff f872 	bl	80013ac <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022cc:	f7ff f86e 	bl	80013ac <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e187      	b.n	80025ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022de:	4b1b      	ldr	r3, [pc, #108]	; (800234c <HAL_RCC_OscConfig+0x240>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d036      	beq.n	8002364 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d016      	beq.n	800232c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022fe:	4b15      	ldr	r3, [pc, #84]	; (8002354 <HAL_RCC_OscConfig+0x248>)
 8002300:	2201      	movs	r2, #1
 8002302:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002304:	f7ff f852 	bl	80013ac <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800230c:	f7ff f84e 	bl	80013ac <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e167      	b.n	80025ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_RCC_OscConfig+0x240>)
 8002320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0f0      	beq.n	800230c <HAL_RCC_OscConfig+0x200>
 800232a:	e01b      	b.n	8002364 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800232c:	4b09      	ldr	r3, [pc, #36]	; (8002354 <HAL_RCC_OscConfig+0x248>)
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002332:	f7ff f83b 	bl	80013ac <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002338:	e00e      	b.n	8002358 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800233a:	f7ff f837 	bl	80013ac <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d907      	bls.n	8002358 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e150      	b.n	80025ee <HAL_RCC_OscConfig+0x4e2>
 800234c:	40023800 	.word	0x40023800
 8002350:	42470000 	.word	0x42470000
 8002354:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002358:	4b88      	ldr	r3, [pc, #544]	; (800257c <HAL_RCC_OscConfig+0x470>)
 800235a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1ea      	bne.n	800233a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 8097 	beq.w	80024a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002372:	2300      	movs	r3, #0
 8002374:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002376:	4b81      	ldr	r3, [pc, #516]	; (800257c <HAL_RCC_OscConfig+0x470>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10f      	bne.n	80023a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	4b7d      	ldr	r3, [pc, #500]	; (800257c <HAL_RCC_OscConfig+0x470>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	4a7c      	ldr	r2, [pc, #496]	; (800257c <HAL_RCC_OscConfig+0x470>)
 800238c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002390:	6413      	str	r3, [r2, #64]	; 0x40
 8002392:	4b7a      	ldr	r3, [pc, #488]	; (800257c <HAL_RCC_OscConfig+0x470>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239a:	60bb      	str	r3, [r7, #8]
 800239c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800239e:	2301      	movs	r3, #1
 80023a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a2:	4b77      	ldr	r3, [pc, #476]	; (8002580 <HAL_RCC_OscConfig+0x474>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d118      	bne.n	80023e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ae:	4b74      	ldr	r3, [pc, #464]	; (8002580 <HAL_RCC_OscConfig+0x474>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a73      	ldr	r2, [pc, #460]	; (8002580 <HAL_RCC_OscConfig+0x474>)
 80023b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ba:	f7fe fff7 	bl	80013ac <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c2:	f7fe fff3 	bl	80013ac <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e10c      	b.n	80025ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d4:	4b6a      	ldr	r3, [pc, #424]	; (8002580 <HAL_RCC_OscConfig+0x474>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0f0      	beq.n	80023c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d106      	bne.n	80023f6 <HAL_RCC_OscConfig+0x2ea>
 80023e8:	4b64      	ldr	r3, [pc, #400]	; (800257c <HAL_RCC_OscConfig+0x470>)
 80023ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ec:	4a63      	ldr	r2, [pc, #396]	; (800257c <HAL_RCC_OscConfig+0x470>)
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	6713      	str	r3, [r2, #112]	; 0x70
 80023f4:	e01c      	b.n	8002430 <HAL_RCC_OscConfig+0x324>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2b05      	cmp	r3, #5
 80023fc:	d10c      	bne.n	8002418 <HAL_RCC_OscConfig+0x30c>
 80023fe:	4b5f      	ldr	r3, [pc, #380]	; (800257c <HAL_RCC_OscConfig+0x470>)
 8002400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002402:	4a5e      	ldr	r2, [pc, #376]	; (800257c <HAL_RCC_OscConfig+0x470>)
 8002404:	f043 0304 	orr.w	r3, r3, #4
 8002408:	6713      	str	r3, [r2, #112]	; 0x70
 800240a:	4b5c      	ldr	r3, [pc, #368]	; (800257c <HAL_RCC_OscConfig+0x470>)
 800240c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240e:	4a5b      	ldr	r2, [pc, #364]	; (800257c <HAL_RCC_OscConfig+0x470>)
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	6713      	str	r3, [r2, #112]	; 0x70
 8002416:	e00b      	b.n	8002430 <HAL_RCC_OscConfig+0x324>
 8002418:	4b58      	ldr	r3, [pc, #352]	; (800257c <HAL_RCC_OscConfig+0x470>)
 800241a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241c:	4a57      	ldr	r2, [pc, #348]	; (800257c <HAL_RCC_OscConfig+0x470>)
 800241e:	f023 0301 	bic.w	r3, r3, #1
 8002422:	6713      	str	r3, [r2, #112]	; 0x70
 8002424:	4b55      	ldr	r3, [pc, #340]	; (800257c <HAL_RCC_OscConfig+0x470>)
 8002426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002428:	4a54      	ldr	r2, [pc, #336]	; (800257c <HAL_RCC_OscConfig+0x470>)
 800242a:	f023 0304 	bic.w	r3, r3, #4
 800242e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d015      	beq.n	8002464 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002438:	f7fe ffb8 	bl	80013ac <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243e:	e00a      	b.n	8002456 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002440:	f7fe ffb4 	bl	80013ac <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	f241 3288 	movw	r2, #5000	; 0x1388
 800244e:	4293      	cmp	r3, r2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e0cb      	b.n	80025ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002456:	4b49      	ldr	r3, [pc, #292]	; (800257c <HAL_RCC_OscConfig+0x470>)
 8002458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0ee      	beq.n	8002440 <HAL_RCC_OscConfig+0x334>
 8002462:	e014      	b.n	800248e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002464:	f7fe ffa2 	bl	80013ac <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800246a:	e00a      	b.n	8002482 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800246c:	f7fe ff9e 	bl	80013ac <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	f241 3288 	movw	r2, #5000	; 0x1388
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e0b5      	b.n	80025ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002482:	4b3e      	ldr	r3, [pc, #248]	; (800257c <HAL_RCC_OscConfig+0x470>)
 8002484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1ee      	bne.n	800246c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800248e:	7dfb      	ldrb	r3, [r7, #23]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d105      	bne.n	80024a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002494:	4b39      	ldr	r3, [pc, #228]	; (800257c <HAL_RCC_OscConfig+0x470>)
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	4a38      	ldr	r2, [pc, #224]	; (800257c <HAL_RCC_OscConfig+0x470>)
 800249a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800249e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 80a1 	beq.w	80025ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024aa:	4b34      	ldr	r3, [pc, #208]	; (800257c <HAL_RCC_OscConfig+0x470>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 030c 	and.w	r3, r3, #12
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d05c      	beq.n	8002570 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d141      	bne.n	8002542 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024be:	4b31      	ldr	r3, [pc, #196]	; (8002584 <HAL_RCC_OscConfig+0x478>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c4:	f7fe ff72 	bl	80013ac <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024cc:	f7fe ff6e 	bl	80013ac <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e087      	b.n	80025ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024de:	4b27      	ldr	r3, [pc, #156]	; (800257c <HAL_RCC_OscConfig+0x470>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69da      	ldr	r2, [r3, #28]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	019b      	lsls	r3, r3, #6
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002500:	085b      	lsrs	r3, r3, #1
 8002502:	3b01      	subs	r3, #1
 8002504:	041b      	lsls	r3, r3, #16
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250c:	061b      	lsls	r3, r3, #24
 800250e:	491b      	ldr	r1, [pc, #108]	; (800257c <HAL_RCC_OscConfig+0x470>)
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002514:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <HAL_RCC_OscConfig+0x478>)
 8002516:	2201      	movs	r2, #1
 8002518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251a:	f7fe ff47 	bl	80013ac <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002522:	f7fe ff43 	bl	80013ac <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e05c      	b.n	80025ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <HAL_RCC_OscConfig+0x470>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0f0      	beq.n	8002522 <HAL_RCC_OscConfig+0x416>
 8002540:	e054      	b.n	80025ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002542:	4b10      	ldr	r3, [pc, #64]	; (8002584 <HAL_RCC_OscConfig+0x478>)
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002548:	f7fe ff30 	bl	80013ac <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002550:	f7fe ff2c 	bl	80013ac <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e045      	b.n	80025ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <HAL_RCC_OscConfig+0x470>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0x444>
 800256e:	e03d      	b.n	80025ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d107      	bne.n	8002588 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e038      	b.n	80025ee <HAL_RCC_OscConfig+0x4e2>
 800257c:	40023800 	.word	0x40023800
 8002580:	40007000 	.word	0x40007000
 8002584:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002588:	4b1b      	ldr	r3, [pc, #108]	; (80025f8 <HAL_RCC_OscConfig+0x4ec>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d028      	beq.n	80025e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d121      	bne.n	80025e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d11a      	bne.n	80025e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025b8:	4013      	ands	r3, r2
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d111      	bne.n	80025e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ce:	085b      	lsrs	r3, r3, #1
 80025d0:	3b01      	subs	r3, #1
 80025d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d107      	bne.n	80025e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d001      	beq.n	80025ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e000      	b.n	80025ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40023800 	.word	0x40023800

080025fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e0cc      	b.n	80027aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002610:	4b68      	ldr	r3, [pc, #416]	; (80027b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d90c      	bls.n	8002638 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261e:	4b65      	ldr	r3, [pc, #404]	; (80027b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002626:	4b63      	ldr	r3, [pc, #396]	; (80027b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d001      	beq.n	8002638 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e0b8      	b.n	80027aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d020      	beq.n	8002686 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	d005      	beq.n	800265c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002650:	4b59      	ldr	r3, [pc, #356]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	4a58      	ldr	r2, [pc, #352]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002656:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800265a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0308 	and.w	r3, r3, #8
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002668:	4b53      	ldr	r3, [pc, #332]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	4a52      	ldr	r2, [pc, #328]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002672:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002674:	4b50      	ldr	r3, [pc, #320]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	494d      	ldr	r1, [pc, #308]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	4313      	orrs	r3, r2
 8002684:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d044      	beq.n	800271c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d107      	bne.n	80026aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269a:	4b47      	ldr	r3, [pc, #284]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d119      	bne.n	80026da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e07f      	b.n	80027aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d003      	beq.n	80026ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d107      	bne.n	80026ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ba:	4b3f      	ldr	r3, [pc, #252]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d109      	bne.n	80026da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e06f      	b.n	80027aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ca:	4b3b      	ldr	r3, [pc, #236]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e067      	b.n	80027aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026da:	4b37      	ldr	r3, [pc, #220]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f023 0203 	bic.w	r2, r3, #3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	4934      	ldr	r1, [pc, #208]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026ec:	f7fe fe5e 	bl	80013ac <HAL_GetTick>
 80026f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f2:	e00a      	b.n	800270a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f4:	f7fe fe5a 	bl	80013ac <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002702:	4293      	cmp	r3, r2
 8002704:	d901      	bls.n	800270a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e04f      	b.n	80027aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270a:	4b2b      	ldr	r3, [pc, #172]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 020c 	and.w	r2, r3, #12
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	429a      	cmp	r2, r3
 800271a:	d1eb      	bne.n	80026f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800271c:	4b25      	ldr	r3, [pc, #148]	; (80027b4 <HAL_RCC_ClockConfig+0x1b8>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d20c      	bcs.n	8002744 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272a:	4b22      	ldr	r3, [pc, #136]	; (80027b4 <HAL_RCC_ClockConfig+0x1b8>)
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002732:	4b20      	ldr	r3, [pc, #128]	; (80027b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	429a      	cmp	r2, r3
 800273e:	d001      	beq.n	8002744 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e032      	b.n	80027aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002750:	4b19      	ldr	r3, [pc, #100]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	4916      	ldr	r1, [pc, #88]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	4313      	orrs	r3, r2
 8002760:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b00      	cmp	r3, #0
 800276c:	d009      	beq.n	8002782 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800276e:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	490e      	ldr	r1, [pc, #56]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	4313      	orrs	r3, r2
 8002780:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002782:	f000 f821 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 8002786:	4602      	mov	r2, r0
 8002788:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	091b      	lsrs	r3, r3, #4
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	490a      	ldr	r1, [pc, #40]	; (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 8002794:	5ccb      	ldrb	r3, [r1, r3]
 8002796:	fa22 f303 	lsr.w	r3, r2, r3
 800279a:	4a09      	ldr	r2, [pc, #36]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 800279c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800279e:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <HAL_RCC_ClockConfig+0x1c8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fe fdbe 	bl	8001324 <HAL_InitTick>

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40023c00 	.word	0x40023c00
 80027b8:	40023800 	.word	0x40023800
 80027bc:	080066b0 	.word	0x080066b0
 80027c0:	20000000 	.word	0x20000000
 80027c4:	20000004 	.word	0x20000004

080027c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027cc:	b090      	sub	sp, #64	; 0x40
 80027ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	637b      	str	r3, [r7, #52]	; 0x34
 80027d4:	2300      	movs	r3, #0
 80027d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027d8:	2300      	movs	r3, #0
 80027da:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027e0:	4b59      	ldr	r3, [pc, #356]	; (8002948 <HAL_RCC_GetSysClockFreq+0x180>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 030c 	and.w	r3, r3, #12
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d00d      	beq.n	8002808 <HAL_RCC_GetSysClockFreq+0x40>
 80027ec:	2b08      	cmp	r3, #8
 80027ee:	f200 80a1 	bhi.w	8002934 <HAL_RCC_GetSysClockFreq+0x16c>
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <HAL_RCC_GetSysClockFreq+0x34>
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d003      	beq.n	8002802 <HAL_RCC_GetSysClockFreq+0x3a>
 80027fa:	e09b      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027fc:	4b53      	ldr	r3, [pc, #332]	; (800294c <HAL_RCC_GetSysClockFreq+0x184>)
 80027fe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002800:	e09b      	b.n	800293a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002802:	4b53      	ldr	r3, [pc, #332]	; (8002950 <HAL_RCC_GetSysClockFreq+0x188>)
 8002804:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002806:	e098      	b.n	800293a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002808:	4b4f      	ldr	r3, [pc, #316]	; (8002948 <HAL_RCC_GetSysClockFreq+0x180>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002810:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002812:	4b4d      	ldr	r3, [pc, #308]	; (8002948 <HAL_RCC_GetSysClockFreq+0x180>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d028      	beq.n	8002870 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800281e:	4b4a      	ldr	r3, [pc, #296]	; (8002948 <HAL_RCC_GetSysClockFreq+0x180>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	099b      	lsrs	r3, r3, #6
 8002824:	2200      	movs	r2, #0
 8002826:	623b      	str	r3, [r7, #32]
 8002828:	627a      	str	r2, [r7, #36]	; 0x24
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002830:	2100      	movs	r1, #0
 8002832:	4b47      	ldr	r3, [pc, #284]	; (8002950 <HAL_RCC_GetSysClockFreq+0x188>)
 8002834:	fb03 f201 	mul.w	r2, r3, r1
 8002838:	2300      	movs	r3, #0
 800283a:	fb00 f303 	mul.w	r3, r0, r3
 800283e:	4413      	add	r3, r2
 8002840:	4a43      	ldr	r2, [pc, #268]	; (8002950 <HAL_RCC_GetSysClockFreq+0x188>)
 8002842:	fba0 1202 	umull	r1, r2, r0, r2
 8002846:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002848:	460a      	mov	r2, r1
 800284a:	62ba      	str	r2, [r7, #40]	; 0x28
 800284c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800284e:	4413      	add	r3, r2
 8002850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002854:	2200      	movs	r2, #0
 8002856:	61bb      	str	r3, [r7, #24]
 8002858:	61fa      	str	r2, [r7, #28]
 800285a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800285e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002862:	f7fd fcbd 	bl	80001e0 <__aeabi_uldivmod>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4613      	mov	r3, r2
 800286c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800286e:	e053      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002870:	4b35      	ldr	r3, [pc, #212]	; (8002948 <HAL_RCC_GetSysClockFreq+0x180>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	099b      	lsrs	r3, r3, #6
 8002876:	2200      	movs	r2, #0
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	617a      	str	r2, [r7, #20]
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002882:	f04f 0b00 	mov.w	fp, #0
 8002886:	4652      	mov	r2, sl
 8002888:	465b      	mov	r3, fp
 800288a:	f04f 0000 	mov.w	r0, #0
 800288e:	f04f 0100 	mov.w	r1, #0
 8002892:	0159      	lsls	r1, r3, #5
 8002894:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002898:	0150      	lsls	r0, r2, #5
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	ebb2 080a 	subs.w	r8, r2, sl
 80028a2:	eb63 090b 	sbc.w	r9, r3, fp
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	f04f 0300 	mov.w	r3, #0
 80028ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80028b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80028b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80028ba:	ebb2 0408 	subs.w	r4, r2, r8
 80028be:	eb63 0509 	sbc.w	r5, r3, r9
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	f04f 0300 	mov.w	r3, #0
 80028ca:	00eb      	lsls	r3, r5, #3
 80028cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028d0:	00e2      	lsls	r2, r4, #3
 80028d2:	4614      	mov	r4, r2
 80028d4:	461d      	mov	r5, r3
 80028d6:	eb14 030a 	adds.w	r3, r4, sl
 80028da:	603b      	str	r3, [r7, #0]
 80028dc:	eb45 030b 	adc.w	r3, r5, fp
 80028e0:	607b      	str	r3, [r7, #4]
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	f04f 0300 	mov.w	r3, #0
 80028ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028ee:	4629      	mov	r1, r5
 80028f0:	028b      	lsls	r3, r1, #10
 80028f2:	4621      	mov	r1, r4
 80028f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028f8:	4621      	mov	r1, r4
 80028fa:	028a      	lsls	r2, r1, #10
 80028fc:	4610      	mov	r0, r2
 80028fe:	4619      	mov	r1, r3
 8002900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002902:	2200      	movs	r2, #0
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	60fa      	str	r2, [r7, #12]
 8002908:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800290c:	f7fd fc68 	bl	80001e0 <__aeabi_uldivmod>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4613      	mov	r3, r2
 8002916:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002918:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <HAL_RCC_GetSysClockFreq+0x180>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	0c1b      	lsrs	r3, r3, #16
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	3301      	adds	r3, #1
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002928:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800292a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002930:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002932:	e002      	b.n	800293a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002934:	4b05      	ldr	r3, [pc, #20]	; (800294c <HAL_RCC_GetSysClockFreq+0x184>)
 8002936:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002938:	bf00      	nop
    }
  }
  return sysclockfreq;
 800293a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800293c:	4618      	mov	r0, r3
 800293e:	3740      	adds	r7, #64	; 0x40
 8002940:	46bd      	mov	sp, r7
 8002942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002946:	bf00      	nop
 8002948:	40023800 	.word	0x40023800
 800294c:	00f42400 	.word	0x00f42400
 8002950:	017d7840 	.word	0x017d7840

08002954 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e07b      	b.n	8002a5e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	2b00      	cmp	r3, #0
 800296c:	d108      	bne.n	8002980 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002976:	d009      	beq.n	800298c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	61da      	str	r2, [r3, #28]
 800297e:	e005      	b.n	800298c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d106      	bne.n	80029ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7fe fbb4 	bl	8001114 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a10:	ea42 0103 	orr.w	r1, r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a18:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	0c1b      	lsrs	r3, r3, #16
 8002a2a:	f003 0104 	and.w	r1, r3, #4
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	f003 0210 	and.w	r2, r3, #16
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	69da      	ldr	r2, [r3, #28]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b088      	sub	sp, #32
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	603b      	str	r3, [r7, #0]
 8002a72:	4613      	mov	r3, r2
 8002a74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a76:	2300      	movs	r3, #0
 8002a78:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d101      	bne.n	8002a88 <HAL_SPI_Transmit+0x22>
 8002a84:	2302      	movs	r3, #2
 8002a86:	e126      	b.n	8002cd6 <HAL_SPI_Transmit+0x270>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a90:	f7fe fc8c 	bl	80013ac <HAL_GetTick>
 8002a94:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002a96:	88fb      	ldrh	r3, [r7, #6]
 8002a98:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d002      	beq.n	8002aac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002aaa:	e10b      	b.n	8002cc4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d002      	beq.n	8002ab8 <HAL_SPI_Transmit+0x52>
 8002ab2:	88fb      	ldrh	r3, [r7, #6]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d102      	bne.n	8002abe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002abc:	e102      	b.n	8002cc4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2203      	movs	r2, #3
 8002ac2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	88fa      	ldrh	r2, [r7, #6]
 8002ad6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	88fa      	ldrh	r2, [r7, #6]
 8002adc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b04:	d10f      	bne.n	8002b26 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b30:	2b40      	cmp	r3, #64	; 0x40
 8002b32:	d007      	beq.n	8002b44 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b4c:	d14b      	bne.n	8002be6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d002      	beq.n	8002b5c <HAL_SPI_Transmit+0xf6>
 8002b56:	8afb      	ldrh	r3, [r7, #22]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d13e      	bne.n	8002bda <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b60:	881a      	ldrh	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6c:	1c9a      	adds	r2, r3, #2
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b80:	e02b      	b.n	8002bda <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d112      	bne.n	8002bb6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b94:	881a      	ldrh	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	1c9a      	adds	r2, r3, #2
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	3b01      	subs	r3, #1
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	86da      	strh	r2, [r3, #54]	; 0x36
 8002bb4:	e011      	b.n	8002bda <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bb6:	f7fe fbf9 	bl	80013ac <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d803      	bhi.n	8002bce <HAL_SPI_Transmit+0x168>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bcc:	d102      	bne.n	8002bd4 <HAL_SPI_Transmit+0x16e>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d102      	bne.n	8002bda <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002bd8:	e074      	b.n	8002cc4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1ce      	bne.n	8002b82 <HAL_SPI_Transmit+0x11c>
 8002be4:	e04c      	b.n	8002c80 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <HAL_SPI_Transmit+0x18e>
 8002bee:	8afb      	ldrh	r3, [r7, #22]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d140      	bne.n	8002c76 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	330c      	adds	r3, #12
 8002bfe:	7812      	ldrb	r2, [r2, #0]
 8002c00:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002c1a:	e02c      	b.n	8002c76 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d113      	bne.n	8002c52 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	330c      	adds	r3, #12
 8002c34:	7812      	ldrb	r2, [r2, #0]
 8002c36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c50:	e011      	b.n	8002c76 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c52:	f7fe fbab 	bl	80013ac <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d803      	bhi.n	8002c6a <HAL_SPI_Transmit+0x204>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c68:	d102      	bne.n	8002c70 <HAL_SPI_Transmit+0x20a>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d102      	bne.n	8002c76 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c74:	e026      	b.n	8002cc4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1cd      	bne.n	8002c1c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	6839      	ldr	r1, [r7, #0]
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f000 f8b3 	bl	8002df0 <SPI_EndRxTxTransaction>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d002      	beq.n	8002c96 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2220      	movs	r2, #32
 8002c94:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10a      	bne.n	8002cb4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d002      	beq.n	8002cc2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	77fb      	strb	r3, [r7, #31]
 8002cc0:	e000      	b.n	8002cc4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002cc2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002cd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3720      	adds	r7, #32
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b088      	sub	sp, #32
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	603b      	str	r3, [r7, #0]
 8002cec:	4613      	mov	r3, r2
 8002cee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002cf0:	f7fe fb5c 	bl	80013ac <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf8:	1a9b      	subs	r3, r3, r2
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d00:	f7fe fb54 	bl	80013ac <HAL_GetTick>
 8002d04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d06:	4b39      	ldr	r3, [pc, #228]	; (8002dec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	015b      	lsls	r3, r3, #5
 8002d0c:	0d1b      	lsrs	r3, r3, #20
 8002d0e:	69fa      	ldr	r2, [r7, #28]
 8002d10:	fb02 f303 	mul.w	r3, r2, r3
 8002d14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d16:	e054      	b.n	8002dc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1e:	d050      	beq.n	8002dc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d20:	f7fe fb44 	bl	80013ac <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	69fa      	ldr	r2, [r7, #28]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d902      	bls.n	8002d36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d13d      	bne.n	8002db2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d4e:	d111      	bne.n	8002d74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d58:	d004      	beq.n	8002d64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d62:	d107      	bne.n	8002d74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d7c:	d10f      	bne.n	8002d9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e017      	b.n	8002de2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002db8:	2300      	movs	r3, #0
 8002dba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	bf0c      	ite	eq
 8002dd2:	2301      	moveq	r3, #1
 8002dd4:	2300      	movne	r3, #0
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	461a      	mov	r2, r3
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d19b      	bne.n	8002d18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3720      	adds	r7, #32
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000000 	.word	0x20000000

08002df0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b088      	sub	sp, #32
 8002df4:	af02      	add	r7, sp, #8
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002dfc:	4b1b      	ldr	r3, [pc, #108]	; (8002e6c <SPI_EndRxTxTransaction+0x7c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a1b      	ldr	r2, [pc, #108]	; (8002e70 <SPI_EndRxTxTransaction+0x80>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	0d5b      	lsrs	r3, r3, #21
 8002e08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e0c:	fb02 f303 	mul.w	r3, r2, r3
 8002e10:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e1a:	d112      	bne.n	8002e42 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2200      	movs	r2, #0
 8002e24:	2180      	movs	r1, #128	; 0x80
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f7ff ff5a 	bl	8002ce0 <SPI_WaitFlagStateUntilTimeout>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d016      	beq.n	8002e60 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e36:	f043 0220 	orr.w	r2, r3, #32
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e00f      	b.n	8002e62 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e58:	2b80      	cmp	r3, #128	; 0x80
 8002e5a:	d0f2      	beq.n	8002e42 <SPI_EndRxTxTransaction+0x52>
 8002e5c:	e000      	b.n	8002e60 <SPI_EndRxTxTransaction+0x70>
        break;
 8002e5e:	bf00      	nop
  }

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000000 	.word	0x20000000
 8002e70:	165e9f81 	.word	0x165e9f81

08002e74 <__NVIC_SetPriority>:
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	6039      	str	r1, [r7, #0]
 8002e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	db0a      	blt.n	8002e9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	490c      	ldr	r1, [pc, #48]	; (8002ec0 <__NVIC_SetPriority+0x4c>)
 8002e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e92:	0112      	lsls	r2, r2, #4
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	440b      	add	r3, r1
 8002e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e9c:	e00a      	b.n	8002eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	4908      	ldr	r1, [pc, #32]	; (8002ec4 <__NVIC_SetPriority+0x50>)
 8002ea4:	79fb      	ldrb	r3, [r7, #7]
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	3b04      	subs	r3, #4
 8002eac:	0112      	lsls	r2, r2, #4
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	761a      	strb	r2, [r3, #24]
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	e000e100 	.word	0xe000e100
 8002ec4:	e000ed00 	.word	0xe000ed00

08002ec8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002ecc:	2100      	movs	r1, #0
 8002ece:	f06f 0004 	mvn.w	r0, #4
 8002ed2:	f7ff ffcf 	bl	8002e74 <__NVIC_SetPriority>
#endif
}
 8002ed6:	bf00      	nop
 8002ed8:	bd80      	pop	{r7, pc}
	...

08002edc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ee2:	f3ef 8305 	mrs	r3, IPSR
 8002ee6:	603b      	str	r3, [r7, #0]
  return(result);
 8002ee8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002eee:	f06f 0305 	mvn.w	r3, #5
 8002ef2:	607b      	str	r3, [r7, #4]
 8002ef4:	e00c      	b.n	8002f10 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002ef6:	4b0a      	ldr	r3, [pc, #40]	; (8002f20 <osKernelInitialize+0x44>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d105      	bne.n	8002f0a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002efe:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <osKernelInitialize+0x44>)
 8002f00:	2201      	movs	r2, #1
 8002f02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002f04:	2300      	movs	r3, #0
 8002f06:	607b      	str	r3, [r7, #4]
 8002f08:	e002      	b.n	8002f10 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002f10:	687b      	ldr	r3, [r7, #4]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	20000164 	.word	0x20000164

08002f24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f2a:	f3ef 8305 	mrs	r3, IPSR
 8002f2e:	603b      	str	r3, [r7, #0]
  return(result);
 8002f30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002f36:	f06f 0305 	mvn.w	r3, #5
 8002f3a:	607b      	str	r3, [r7, #4]
 8002f3c:	e010      	b.n	8002f60 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002f3e:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <osKernelStart+0x48>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d109      	bne.n	8002f5a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002f46:	f7ff ffbf 	bl	8002ec8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002f4a:	4b08      	ldr	r3, [pc, #32]	; (8002f6c <osKernelStart+0x48>)
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002f50:	f001 fb9e 	bl	8004690 <vTaskStartScheduler>
      stat = osOK;
 8002f54:	2300      	movs	r3, #0
 8002f56:	607b      	str	r3, [r7, #4]
 8002f58:	e002      	b.n	8002f60 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002f60:	687b      	ldr	r3, [r7, #4]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	20000164 	.word	0x20000164

08002f70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08e      	sub	sp, #56	; 0x38
 8002f74:	af04      	add	r7, sp, #16
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f80:	f3ef 8305 	mrs	r3, IPSR
 8002f84:	617b      	str	r3, [r7, #20]
  return(result);
 8002f86:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d17e      	bne.n	800308a <osThreadNew+0x11a>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d07b      	beq.n	800308a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002f92:	2380      	movs	r3, #128	; 0x80
 8002f94:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002f96:	2318      	movs	r3, #24
 8002f98:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d045      	beq.n	8003036 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d002      	beq.n	8002fb8 <osThreadNew+0x48>
        name = attr->name;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d002      	beq.n	8002fc6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d008      	beq.n	8002fde <osThreadNew+0x6e>
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	2b38      	cmp	r3, #56	; 0x38
 8002fd0:	d805      	bhi.n	8002fde <osThreadNew+0x6e>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <osThreadNew+0x72>
        return (NULL);
 8002fde:	2300      	movs	r3, #0
 8002fe0:	e054      	b.n	800308c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	089b      	lsrs	r3, r3, #2
 8002ff0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00e      	beq.n	8003018 <osThreadNew+0xa8>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	2bbb      	cmp	r3, #187	; 0xbb
 8003000:	d90a      	bls.n	8003018 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003006:	2b00      	cmp	r3, #0
 8003008:	d006      	beq.n	8003018 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d002      	beq.n	8003018 <osThreadNew+0xa8>
        mem = 1;
 8003012:	2301      	movs	r3, #1
 8003014:	61bb      	str	r3, [r7, #24]
 8003016:	e010      	b.n	800303a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10c      	bne.n	800303a <osThreadNew+0xca>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d108      	bne.n	800303a <osThreadNew+0xca>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d104      	bne.n	800303a <osThreadNew+0xca>
          mem = 0;
 8003030:	2300      	movs	r3, #0
 8003032:	61bb      	str	r3, [r7, #24]
 8003034:	e001      	b.n	800303a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003036:	2300      	movs	r3, #0
 8003038:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d110      	bne.n	8003062 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003048:	9202      	str	r2, [sp, #8]
 800304a:	9301      	str	r3, [sp, #4]
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	6a3a      	ldr	r2, [r7, #32]
 8003054:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f001 f92e 	bl	80042b8 <xTaskCreateStatic>
 800305c:	4603      	mov	r3, r0
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	e013      	b.n	800308a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d110      	bne.n	800308a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	b29a      	uxth	r2, r3
 800306c:	f107 0310 	add.w	r3, r7, #16
 8003070:	9301      	str	r3, [sp, #4]
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f001 f979 	bl	8004372 <xTaskCreate>
 8003080:	4603      	mov	r3, r0
 8003082:	2b01      	cmp	r3, #1
 8003084:	d001      	beq.n	800308a <osThreadNew+0x11a>
            hTask = NULL;
 8003086:	2300      	movs	r3, #0
 8003088:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800308a:	693b      	ldr	r3, [r7, #16]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3728      	adds	r7, #40	; 0x28
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800309c:	f3ef 8305 	mrs	r3, IPSR
 80030a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80030a2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <osDelay+0x1c>
    stat = osErrorISR;
 80030a8:	f06f 0305 	mvn.w	r3, #5
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	e007      	b.n	80030c0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f001 fab4 	bl	8004628 <vTaskDelay>
    }
  }

  return (stat);
 80030c0:	68fb      	ldr	r3, [r7, #12]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b088      	sub	sp, #32
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030d6:	f3ef 8305 	mrs	r3, IPSR
 80030da:	60bb      	str	r3, [r7, #8]
  return(result);
 80030dc:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d174      	bne.n	80031cc <osMutexNew+0x102>
    if (attr != NULL) {
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <osMutexNew+0x26>
      type = attr->attr_bits;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	61bb      	str	r3, [r7, #24]
 80030ee:	e001      	b.n	80030f4 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <osMutexNew+0x3a>
      rmtx = 1U;
 80030fe:	2301      	movs	r3, #1
 8003100:	617b      	str	r3, [r7, #20]
 8003102:	e001      	b.n	8003108 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d15c      	bne.n	80031cc <osMutexNew+0x102>
      mem = -1;
 8003112:	f04f 33ff 	mov.w	r3, #4294967295
 8003116:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d015      	beq.n	800314a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d006      	beq.n	8003134 <osMutexNew+0x6a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	2b4f      	cmp	r3, #79	; 0x4f
 800312c:	d902      	bls.n	8003134 <osMutexNew+0x6a>
          mem = 1;
 800312e:	2301      	movs	r3, #1
 8003130:	613b      	str	r3, [r7, #16]
 8003132:	e00c      	b.n	800314e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d108      	bne.n	800314e <osMutexNew+0x84>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d104      	bne.n	800314e <osMutexNew+0x84>
            mem = 0;
 8003144:	2300      	movs	r3, #0
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	e001      	b.n	800314e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800314a:	2300      	movs	r3, #0
 800314c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d112      	bne.n	800317a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d007      	beq.n	800316a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	4619      	mov	r1, r3
 8003160:	2004      	movs	r0, #4
 8003162:	f000 fb18 	bl	8003796 <xQueueCreateMutexStatic>
 8003166:	61f8      	str	r0, [r7, #28]
 8003168:	e016      	b.n	8003198 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	4619      	mov	r1, r3
 8003170:	2001      	movs	r0, #1
 8003172:	f000 fb10 	bl	8003796 <xQueueCreateMutexStatic>
 8003176:	61f8      	str	r0, [r7, #28]
 8003178:	e00e      	b.n	8003198 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10b      	bne.n	8003198 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d004      	beq.n	8003190 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003186:	2004      	movs	r0, #4
 8003188:	f000 faed 	bl	8003766 <xQueueCreateMutex>
 800318c:	61f8      	str	r0, [r7, #28]
 800318e:	e003      	b.n	8003198 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8003190:	2001      	movs	r0, #1
 8003192:	f000 fae8 	bl	8003766 <xQueueCreateMutex>
 8003196:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00c      	beq.n	80031b8 <osMutexNew+0xee>
        if (attr != NULL) {
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <osMutexNew+0xe2>
          name = attr->name;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	e001      	b.n	80031b0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80031b0:	68f9      	ldr	r1, [r7, #12]
 80031b2:	69f8      	ldr	r0, [r7, #28]
 80031b4:	f001 f822 	bl	80041fc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d006      	beq.n	80031cc <osMutexNew+0x102>
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80031cc:	69fb      	ldr	r3, [r7, #28]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3720      	adds	r7, #32
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b086      	sub	sp, #24
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f023 0301 	bic.w	r3, r3, #1
 80031e6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031f4:	f3ef 8305 	mrs	r3, IPSR
 80031f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80031fa:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8003200:	f06f 0305 	mvn.w	r3, #5
 8003204:	617b      	str	r3, [r7, #20]
 8003206:	e02c      	b.n	8003262 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d103      	bne.n	8003216 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800320e:	f06f 0303 	mvn.w	r3, #3
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	e025      	b.n	8003262 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d011      	beq.n	8003240 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800321c:	6839      	ldr	r1, [r7, #0]
 800321e:	6938      	ldr	r0, [r7, #16]
 8003220:	f000 fb08 	bl	8003834 <xQueueTakeMutexRecursive>
 8003224:	4603      	mov	r3, r0
 8003226:	2b01      	cmp	r3, #1
 8003228:	d01b      	beq.n	8003262 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8003230:	f06f 0301 	mvn.w	r3, #1
 8003234:	617b      	str	r3, [r7, #20]
 8003236:	e014      	b.n	8003262 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003238:	f06f 0302 	mvn.w	r3, #2
 800323c:	617b      	str	r3, [r7, #20]
 800323e:	e010      	b.n	8003262 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003240:	6839      	ldr	r1, [r7, #0]
 8003242:	6938      	ldr	r0, [r7, #16]
 8003244:	f000 fda6 	bl	8003d94 <xQueueSemaphoreTake>
 8003248:	4603      	mov	r3, r0
 800324a:	2b01      	cmp	r3, #1
 800324c:	d009      	beq.n	8003262 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8003254:	f06f 0301 	mvn.w	r3, #1
 8003258:	617b      	str	r3, [r7, #20]
 800325a:	e002      	b.n	8003262 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800325c:	f06f 0302 	mvn.w	r3, #2
 8003260:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8003262:	697b      	ldr	r3, [r7, #20]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f023 0301 	bic.w	r3, r3, #1
 800327a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003284:	2300      	movs	r3, #0
 8003286:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003288:	f3ef 8305 	mrs	r3, IPSR
 800328c:	60bb      	str	r3, [r7, #8]
  return(result);
 800328e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <osMutexRelease+0x30>
    stat = osErrorISR;
 8003294:	f06f 0305 	mvn.w	r3, #5
 8003298:	617b      	str	r3, [r7, #20]
 800329a:	e01f      	b.n	80032dc <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d103      	bne.n	80032aa <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80032a2:	f06f 0303 	mvn.w	r3, #3
 80032a6:	617b      	str	r3, [r7, #20]
 80032a8:	e018      	b.n	80032dc <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d009      	beq.n	80032c4 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80032b0:	6938      	ldr	r0, [r7, #16]
 80032b2:	f000 fa8b 	bl	80037cc <xQueueGiveMutexRecursive>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d00f      	beq.n	80032dc <osMutexRelease+0x70>
        stat = osErrorResource;
 80032bc:	f06f 0302 	mvn.w	r3, #2
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	e00b      	b.n	80032dc <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80032c4:	2300      	movs	r3, #0
 80032c6:	2200      	movs	r2, #0
 80032c8:	2100      	movs	r1, #0
 80032ca:	6938      	ldr	r0, [r7, #16]
 80032cc:	f000 fae8 	bl	80038a0 <xQueueGenericSend>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d002      	beq.n	80032dc <osMutexRelease+0x70>
        stat = osErrorResource;
 80032d6:	f06f 0302 	mvn.w	r3, #2
 80032da:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80032dc:	697b      	ldr	r3, [r7, #20]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
	...

080032e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4a07      	ldr	r2, [pc, #28]	; (8003314 <vApplicationGetIdleTaskMemory+0x2c>)
 80032f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	4a06      	ldr	r2, [pc, #24]	; (8003318 <vApplicationGetIdleTaskMemory+0x30>)
 80032fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2280      	movs	r2, #128	; 0x80
 8003304:	601a      	str	r2, [r3, #0]
}
 8003306:	bf00      	nop
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	20000168 	.word	0x20000168
 8003318:	20000224 	.word	0x20000224

0800331c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4a07      	ldr	r2, [pc, #28]	; (8003348 <vApplicationGetTimerTaskMemory+0x2c>)
 800332c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	4a06      	ldr	r2, [pc, #24]	; (800334c <vApplicationGetTimerTaskMemory+0x30>)
 8003332:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f44f 7280 	mov.w	r2, #256	; 0x100
 800333a:	601a      	str	r2, [r3, #0]
}
 800333c:	bf00      	nop
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	20000424 	.word	0x20000424
 800334c:	200004e0 	.word	0x200004e0

08003350 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f103 0208 	add.w	r2, r3, #8
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f04f 32ff 	mov.w	r2, #4294967295
 8003368:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f103 0208 	add.w	r2, r3, #8
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f103 0208 	add.w	r2, r3, #8
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033aa:	b480      	push	{r7}
 80033ac:	b085      	sub	sp, #20
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
 80033b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	601a      	str	r2, [r3, #0]
}
 80033e6:	bf00      	nop
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033f2:	b480      	push	{r7}
 80033f4:	b085      	sub	sp, #20
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003408:	d103      	bne.n	8003412 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	e00c      	b.n	800342c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3308      	adds	r3, #8
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	e002      	b.n	8003420 <vListInsert+0x2e>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	429a      	cmp	r2, r3
 800342a:	d2f6      	bcs.n	800341a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	601a      	str	r2, [r3, #0]
}
 8003458:	bf00      	nop
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6892      	ldr	r2, [r2, #8]
 800347a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6852      	ldr	r2, [r2, #4]
 8003484:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	429a      	cmp	r2, r3
 800348e:	d103      	bne.n	8003498 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	1e5a      	subs	r2, r3, #1
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10a      	bne.n	80034e2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80034cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d0:	f383 8811 	msr	BASEPRI, r3
 80034d4:	f3bf 8f6f 	isb	sy
 80034d8:	f3bf 8f4f 	dsb	sy
 80034dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80034de:	bf00      	nop
 80034e0:	e7fe      	b.n	80034e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80034e2:	f002 fb97 	bl	8005c14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ee:	68f9      	ldr	r1, [r7, #12]
 80034f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034f2:	fb01 f303 	mul.w	r3, r1, r3
 80034f6:	441a      	add	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003512:	3b01      	subs	r3, #1
 8003514:	68f9      	ldr	r1, [r7, #12]
 8003516:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003518:	fb01 f303 	mul.w	r3, r1, r3
 800351c:	441a      	add	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	22ff      	movs	r2, #255	; 0xff
 8003526:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	22ff      	movs	r2, #255	; 0xff
 800352e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d114      	bne.n	8003562 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01a      	beq.n	8003576 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	3310      	adds	r3, #16
 8003544:	4618      	mov	r0, r3
 8003546:	f001 fb3d 	bl	8004bc4 <xTaskRemoveFromEventList>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d012      	beq.n	8003576 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003550:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <xQueueGenericReset+0xcc>)
 8003552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	f3bf 8f6f 	isb	sy
 8003560:	e009      	b.n	8003576 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	3310      	adds	r3, #16
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff fef2 	bl	8003350 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	3324      	adds	r3, #36	; 0x24
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff feed 	bl	8003350 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003576:	f002 fb7d 	bl	8005c74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800357a:	2301      	movs	r3, #1
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	e000ed04 	.word	0xe000ed04

08003588 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08e      	sub	sp, #56	; 0x38
 800358c:	af02      	add	r7, sp, #8
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
 8003594:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10a      	bne.n	80035b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800359c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a0:	f383 8811 	msr	BASEPRI, r3
 80035a4:	f3bf 8f6f 	isb	sy
 80035a8:	f3bf 8f4f 	dsb	sy
 80035ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80035ae:	bf00      	nop
 80035b0:	e7fe      	b.n	80035b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10a      	bne.n	80035ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80035b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035bc:	f383 8811 	msr	BASEPRI, r3
 80035c0:	f3bf 8f6f 	isb	sy
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80035ca:	bf00      	nop
 80035cc:	e7fe      	b.n	80035cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <xQueueGenericCreateStatic+0x52>
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <xQueueGenericCreateStatic+0x56>
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <xQueueGenericCreateStatic+0x58>
 80035de:	2300      	movs	r3, #0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10a      	bne.n	80035fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80035e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e8:	f383 8811 	msr	BASEPRI, r3
 80035ec:	f3bf 8f6f 	isb	sy
 80035f0:	f3bf 8f4f 	dsb	sy
 80035f4:	623b      	str	r3, [r7, #32]
}
 80035f6:	bf00      	nop
 80035f8:	e7fe      	b.n	80035f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d102      	bne.n	8003606 <xQueueGenericCreateStatic+0x7e>
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <xQueueGenericCreateStatic+0x82>
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <xQueueGenericCreateStatic+0x84>
 800360a:	2300      	movs	r3, #0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10a      	bne.n	8003626 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003614:	f383 8811 	msr	BASEPRI, r3
 8003618:	f3bf 8f6f 	isb	sy
 800361c:	f3bf 8f4f 	dsb	sy
 8003620:	61fb      	str	r3, [r7, #28]
}
 8003622:	bf00      	nop
 8003624:	e7fe      	b.n	8003624 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003626:	2350      	movs	r3, #80	; 0x50
 8003628:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2b50      	cmp	r3, #80	; 0x50
 800362e:	d00a      	beq.n	8003646 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003634:	f383 8811 	msr	BASEPRI, r3
 8003638:	f3bf 8f6f 	isb	sy
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	61bb      	str	r3, [r7, #24]
}
 8003642:	bf00      	nop
 8003644:	e7fe      	b.n	8003644 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003646:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800364c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00d      	beq.n	800366e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800365a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800365e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	4613      	mov	r3, r2
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	68b9      	ldr	r1, [r7, #8]
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 f83f 	bl	80036ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800366e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003670:	4618      	mov	r0, r3
 8003672:	3730      	adds	r7, #48	; 0x30
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003678:	b580      	push	{r7, lr}
 800367a:	b08a      	sub	sp, #40	; 0x28
 800367c:	af02      	add	r7, sp, #8
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	4613      	mov	r3, r2
 8003684:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10a      	bne.n	80036a2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800368c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003690:	f383 8811 	msr	BASEPRI, r3
 8003694:	f3bf 8f6f 	isb	sy
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	613b      	str	r3, [r7, #16]
}
 800369e:	bf00      	nop
 80036a0:	e7fe      	b.n	80036a0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	fb02 f303 	mul.w	r3, r2, r3
 80036aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	3350      	adds	r3, #80	; 0x50
 80036b0:	4618      	mov	r0, r3
 80036b2:	f002 fbd1 	bl	8005e58 <pvPortMalloc>
 80036b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d011      	beq.n	80036e2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	3350      	adds	r3, #80	; 0x50
 80036c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80036d0:	79fa      	ldrb	r2, [r7, #7]
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	4613      	mov	r3, r2
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	68b9      	ldr	r1, [r7, #8]
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 f805 	bl	80036ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80036e2:	69bb      	ldr	r3, [r7, #24]
	}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3720      	adds	r7, #32
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d103      	bne.n	8003708 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	e002      	b.n	800370e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800371a:	2101      	movs	r1, #1
 800371c:	69b8      	ldr	r0, [r7, #24]
 800371e:	f7ff fecb 	bl	80034b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	78fa      	ldrb	r2, [r7, #3]
 8003726:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800372a:	bf00      	nop
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00e      	beq.n	800375e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003752:	2300      	movs	r3, #0
 8003754:	2200      	movs	r2, #0
 8003756:	2100      	movs	r1, #0
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f8a1 	bl	80038a0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800375e:	bf00      	nop
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003766:	b580      	push	{r7, lr}
 8003768:	b086      	sub	sp, #24
 800376a:	af00      	add	r7, sp, #0
 800376c:	4603      	mov	r3, r0
 800376e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003770:	2301      	movs	r3, #1
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	2300      	movs	r3, #0
 8003776:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003778:	79fb      	ldrb	r3, [r7, #7]
 800377a:	461a      	mov	r2, r3
 800377c:	6939      	ldr	r1, [r7, #16]
 800377e:	6978      	ldr	r0, [r7, #20]
 8003780:	f7ff ff7a 	bl	8003678 <xQueueGenericCreate>
 8003784:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f7ff ffd3 	bl	8003732 <prvInitialiseMutex>

		return xNewQueue;
 800378c:	68fb      	ldr	r3, [r7, #12]
	}
 800378e:	4618      	mov	r0, r3
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003796:	b580      	push	{r7, lr}
 8003798:	b088      	sub	sp, #32
 800379a:	af02      	add	r7, sp, #8
 800379c:	4603      	mov	r3, r0
 800379e:	6039      	str	r1, [r7, #0]
 80037a0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80037a2:	2301      	movs	r3, #1
 80037a4:	617b      	str	r3, [r7, #20]
 80037a6:	2300      	movs	r3, #0
 80037a8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2200      	movs	r2, #0
 80037b2:	6939      	ldr	r1, [r7, #16]
 80037b4:	6978      	ldr	r0, [r7, #20]
 80037b6:	f7ff fee7 	bl	8003588 <xQueueGenericCreateStatic>
 80037ba:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f7ff ffb8 	bl	8003732 <prvInitialiseMutex>

		return xNewQueue;
 80037c2:	68fb      	ldr	r3, [r7, #12]
	}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80037cc:	b590      	push	{r4, r7, lr}
 80037ce:	b087      	sub	sp, #28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10a      	bne.n	80037f4 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80037de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e2:	f383 8811 	msr	BASEPRI, r3
 80037e6:	f3bf 8f6f 	isb	sy
 80037ea:	f3bf 8f4f 	dsb	sy
 80037ee:	60fb      	str	r3, [r7, #12]
}
 80037f0:	bf00      	nop
 80037f2:	e7fe      	b.n	80037f2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	689c      	ldr	r4, [r3, #8]
 80037f8:	f001 fba6 	bl	8004f48 <xTaskGetCurrentTaskHandle>
 80037fc:	4603      	mov	r3, r0
 80037fe:	429c      	cmp	r4, r3
 8003800:	d111      	bne.n	8003826 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	1e5a      	subs	r2, r3, #1
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d105      	bne.n	8003820 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8003814:	2300      	movs	r3, #0
 8003816:	2200      	movs	r2, #0
 8003818:	2100      	movs	r1, #0
 800381a:	6938      	ldr	r0, [r7, #16]
 800381c:	f000 f840 	bl	80038a0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8003820:	2301      	movs	r3, #1
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	e001      	b.n	800382a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800382a:	697b      	ldr	r3, [r7, #20]
	}
 800382c:	4618      	mov	r0, r3
 800382e:	371c      	adds	r7, #28
 8003830:	46bd      	mov	sp, r7
 8003832:	bd90      	pop	{r4, r7, pc}

08003834 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8003834:	b590      	push	{r4, r7, lr}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10a      	bne.n	800385e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8003848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384c:	f383 8811 	msr	BASEPRI, r3
 8003850:	f3bf 8f6f 	isb	sy
 8003854:	f3bf 8f4f 	dsb	sy
 8003858:	60fb      	str	r3, [r7, #12]
}
 800385a:	bf00      	nop
 800385c:	e7fe      	b.n	800385c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	689c      	ldr	r4, [r3, #8]
 8003862:	f001 fb71 	bl	8004f48 <xTaskGetCurrentTaskHandle>
 8003866:	4603      	mov	r3, r0
 8003868:	429c      	cmp	r4, r3
 800386a:	d107      	bne.n	800387c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8003876:	2301      	movs	r3, #1
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	e00c      	b.n	8003896 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800387c:	6839      	ldr	r1, [r7, #0]
 800387e:	6938      	ldr	r0, [r7, #16]
 8003880:	f000 fa88 	bl	8003d94 <xQueueSemaphoreTake>
 8003884:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d004      	beq.n	8003896 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8003896:	697b      	ldr	r3, [r7, #20]
	}
 8003898:	4618      	mov	r0, r3
 800389a:	371c      	adds	r7, #28
 800389c:	46bd      	mov	sp, r7
 800389e:	bd90      	pop	{r4, r7, pc}

080038a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08e      	sub	sp, #56	; 0x38
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
 80038ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038ae:	2300      	movs	r3, #0
 80038b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80038b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10a      	bne.n	80038d2 <xQueueGenericSend+0x32>
	__asm volatile
 80038bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c0:	f383 8811 	msr	BASEPRI, r3
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80038ce:	bf00      	nop
 80038d0:	e7fe      	b.n	80038d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d103      	bne.n	80038e0 <xQueueGenericSend+0x40>
 80038d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <xQueueGenericSend+0x44>
 80038e0:	2301      	movs	r3, #1
 80038e2:	e000      	b.n	80038e6 <xQueueGenericSend+0x46>
 80038e4:	2300      	movs	r3, #0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10a      	bne.n	8003900 <xQueueGenericSend+0x60>
	__asm volatile
 80038ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ee:	f383 8811 	msr	BASEPRI, r3
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80038fc:	bf00      	nop
 80038fe:	e7fe      	b.n	80038fe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d103      	bne.n	800390e <xQueueGenericSend+0x6e>
 8003906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390a:	2b01      	cmp	r3, #1
 800390c:	d101      	bne.n	8003912 <xQueueGenericSend+0x72>
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <xQueueGenericSend+0x74>
 8003912:	2300      	movs	r3, #0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10a      	bne.n	800392e <xQueueGenericSend+0x8e>
	__asm volatile
 8003918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391c:	f383 8811 	msr	BASEPRI, r3
 8003920:	f3bf 8f6f 	isb	sy
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	623b      	str	r3, [r7, #32]
}
 800392a:	bf00      	nop
 800392c:	e7fe      	b.n	800392c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800392e:	f001 fb1b 	bl	8004f68 <xTaskGetSchedulerState>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d102      	bne.n	800393e <xQueueGenericSend+0x9e>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <xQueueGenericSend+0xa2>
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <xQueueGenericSend+0xa4>
 8003942:	2300      	movs	r3, #0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10a      	bne.n	800395e <xQueueGenericSend+0xbe>
	__asm volatile
 8003948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394c:	f383 8811 	msr	BASEPRI, r3
 8003950:	f3bf 8f6f 	isb	sy
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	61fb      	str	r3, [r7, #28]
}
 800395a:	bf00      	nop
 800395c:	e7fe      	b.n	800395c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800395e:	f002 f959 	bl	8005c14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396a:	429a      	cmp	r2, r3
 800396c:	d302      	bcc.n	8003974 <xQueueGenericSend+0xd4>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b02      	cmp	r3, #2
 8003972:	d129      	bne.n	80039c8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	68b9      	ldr	r1, [r7, #8]
 8003978:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800397a:	f000 fb2f 	bl	8003fdc <prvCopyDataToQueue>
 800397e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	2b00      	cmp	r3, #0
 8003986:	d010      	beq.n	80039aa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398a:	3324      	adds	r3, #36	; 0x24
 800398c:	4618      	mov	r0, r3
 800398e:	f001 f919 	bl	8004bc4 <xTaskRemoveFromEventList>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d013      	beq.n	80039c0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003998:	4b3f      	ldr	r3, [pc, #252]	; (8003a98 <xQueueGenericSend+0x1f8>)
 800399a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	f3bf 8f4f 	dsb	sy
 80039a4:	f3bf 8f6f 	isb	sy
 80039a8:	e00a      	b.n	80039c0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80039aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d007      	beq.n	80039c0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80039b0:	4b39      	ldr	r3, [pc, #228]	; (8003a98 <xQueueGenericSend+0x1f8>)
 80039b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80039c0:	f002 f958 	bl	8005c74 <vPortExitCritical>
				return pdPASS;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e063      	b.n	8003a90 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d103      	bne.n	80039d6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039ce:	f002 f951 	bl	8005c74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80039d2:	2300      	movs	r3, #0
 80039d4:	e05c      	b.n	8003a90 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d106      	bne.n	80039ea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039dc:	f107 0314 	add.w	r3, r7, #20
 80039e0:	4618      	mov	r0, r3
 80039e2:	f001 f953 	bl	8004c8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039e6:	2301      	movs	r3, #1
 80039e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039ea:	f002 f943 	bl	8005c74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039ee:	f000 febf 	bl	8004770 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039f2:	f002 f90f 	bl	8005c14 <vPortEnterCritical>
 80039f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039fc:	b25b      	sxtb	r3, r3
 80039fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a02:	d103      	bne.n	8003a0c <xQueueGenericSend+0x16c>
 8003a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a12:	b25b      	sxtb	r3, r3
 8003a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a18:	d103      	bne.n	8003a22 <xQueueGenericSend+0x182>
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a22:	f002 f927 	bl	8005c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a26:	1d3a      	adds	r2, r7, #4
 8003a28:	f107 0314 	add.w	r3, r7, #20
 8003a2c:	4611      	mov	r1, r2
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f001 f942 	bl	8004cb8 <xTaskCheckForTimeOut>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d124      	bne.n	8003a84 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a3c:	f000 fbc6 	bl	80041cc <prvIsQueueFull>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d018      	beq.n	8003a78 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a48:	3310      	adds	r3, #16
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f001 f868 	bl	8004b24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a56:	f000 fb51 	bl	80040fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a5a:	f000 fe97 	bl	800478c <xTaskResumeAll>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f47f af7c 	bne.w	800395e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003a66:	4b0c      	ldr	r3, [pc, #48]	; (8003a98 <xQueueGenericSend+0x1f8>)
 8003a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	f3bf 8f4f 	dsb	sy
 8003a72:	f3bf 8f6f 	isb	sy
 8003a76:	e772      	b.n	800395e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a7a:	f000 fb3f 	bl	80040fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a7e:	f000 fe85 	bl	800478c <xTaskResumeAll>
 8003a82:	e76c      	b.n	800395e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a86:	f000 fb39 	bl	80040fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a8a:	f000 fe7f 	bl	800478c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3738      	adds	r7, #56	; 0x38
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	e000ed04 	.word	0xe000ed04

08003a9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b090      	sub	sp, #64	; 0x40
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
 8003aa8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10a      	bne.n	8003aca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab8:	f383 8811 	msr	BASEPRI, r3
 8003abc:	f3bf 8f6f 	isb	sy
 8003ac0:	f3bf 8f4f 	dsb	sy
 8003ac4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003ac6:	bf00      	nop
 8003ac8:	e7fe      	b.n	8003ac8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d103      	bne.n	8003ad8 <xQueueGenericSendFromISR+0x3c>
 8003ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <xQueueGenericSendFromISR+0x40>
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e000      	b.n	8003ade <xQueueGenericSendFromISR+0x42>
 8003adc:	2300      	movs	r3, #0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10a      	bne.n	8003af8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae6:	f383 8811 	msr	BASEPRI, r3
 8003aea:	f3bf 8f6f 	isb	sy
 8003aee:	f3bf 8f4f 	dsb	sy
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003af4:	bf00      	nop
 8003af6:	e7fe      	b.n	8003af6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d103      	bne.n	8003b06 <xQueueGenericSendFromISR+0x6a>
 8003afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d101      	bne.n	8003b0a <xQueueGenericSendFromISR+0x6e>
 8003b06:	2301      	movs	r3, #1
 8003b08:	e000      	b.n	8003b0c <xQueueGenericSendFromISR+0x70>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10a      	bne.n	8003b26 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b14:	f383 8811 	msr	BASEPRI, r3
 8003b18:	f3bf 8f6f 	isb	sy
 8003b1c:	f3bf 8f4f 	dsb	sy
 8003b20:	623b      	str	r3, [r7, #32]
}
 8003b22:	bf00      	nop
 8003b24:	e7fe      	b.n	8003b24 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b26:	f002 f957 	bl	8005dd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b2a:	f3ef 8211 	mrs	r2, BASEPRI
 8003b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b32:	f383 8811 	msr	BASEPRI, r3
 8003b36:	f3bf 8f6f 	isb	sy
 8003b3a:	f3bf 8f4f 	dsb	sy
 8003b3e:	61fa      	str	r2, [r7, #28]
 8003b40:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b42:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b44:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d302      	bcc.n	8003b58 <xQueueGenericSendFromISR+0xbc>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d12f      	bne.n	8003bb8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b66:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	68b9      	ldr	r1, [r7, #8]
 8003b6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003b6e:	f000 fa35 	bl	8003fdc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b72:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7a:	d112      	bne.n	8003ba2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d016      	beq.n	8003bb2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b86:	3324      	adds	r3, #36	; 0x24
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f001 f81b 	bl	8004bc4 <xTaskRemoveFromEventList>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00e      	beq.n	8003bb2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00b      	beq.n	8003bb2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	e007      	b.n	8003bb2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ba2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	b25a      	sxtb	r2, r3
 8003bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003bb6:	e001      	b.n	8003bbc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bbe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003bc6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3740      	adds	r7, #64	; 0x40
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
	...

08003bd4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b08c      	sub	sp, #48	; 0x30
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003be0:	2300      	movs	r3, #0
 8003be2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10a      	bne.n	8003c04 <xQueueReceive+0x30>
	__asm volatile
 8003bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf2:	f383 8811 	msr	BASEPRI, r3
 8003bf6:	f3bf 8f6f 	isb	sy
 8003bfa:	f3bf 8f4f 	dsb	sy
 8003bfe:	623b      	str	r3, [r7, #32]
}
 8003c00:	bf00      	nop
 8003c02:	e7fe      	b.n	8003c02 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d103      	bne.n	8003c12 <xQueueReceive+0x3e>
 8003c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <xQueueReceive+0x42>
 8003c12:	2301      	movs	r3, #1
 8003c14:	e000      	b.n	8003c18 <xQueueReceive+0x44>
 8003c16:	2300      	movs	r3, #0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10a      	bne.n	8003c32 <xQueueReceive+0x5e>
	__asm volatile
 8003c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c20:	f383 8811 	msr	BASEPRI, r3
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	f3bf 8f4f 	dsb	sy
 8003c2c:	61fb      	str	r3, [r7, #28]
}
 8003c2e:	bf00      	nop
 8003c30:	e7fe      	b.n	8003c30 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c32:	f001 f999 	bl	8004f68 <xTaskGetSchedulerState>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d102      	bne.n	8003c42 <xQueueReceive+0x6e>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <xQueueReceive+0x72>
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <xQueueReceive+0x74>
 8003c46:	2300      	movs	r3, #0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10a      	bne.n	8003c62 <xQueueReceive+0x8e>
	__asm volatile
 8003c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c50:	f383 8811 	msr	BASEPRI, r3
 8003c54:	f3bf 8f6f 	isb	sy
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	61bb      	str	r3, [r7, #24]
}
 8003c5e:	bf00      	nop
 8003c60:	e7fe      	b.n	8003c60 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c62:	f001 ffd7 	bl	8005c14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d01f      	beq.n	8003cb2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c72:	68b9      	ldr	r1, [r7, #8]
 8003c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c76:	f000 fa1b 	bl	80040b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	1e5a      	subs	r2, r3, #1
 8003c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c80:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00f      	beq.n	8003caa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8c:	3310      	adds	r3, #16
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 ff98 	bl	8004bc4 <xTaskRemoveFromEventList>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d007      	beq.n	8003caa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c9a:	4b3d      	ldr	r3, [pc, #244]	; (8003d90 <xQueueReceive+0x1bc>)
 8003c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	f3bf 8f4f 	dsb	sy
 8003ca6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003caa:	f001 ffe3 	bl	8005c74 <vPortExitCritical>
				return pdPASS;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e069      	b.n	8003d86 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d103      	bne.n	8003cc0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003cb8:	f001 ffdc 	bl	8005c74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	e062      	b.n	8003d86 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d106      	bne.n	8003cd4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cc6:	f107 0310 	add.w	r3, r7, #16
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 ffde 	bl	8004c8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cd4:	f001 ffce 	bl	8005c74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cd8:	f000 fd4a 	bl	8004770 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cdc:	f001 ff9a 	bl	8005c14 <vPortEnterCritical>
 8003ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ce6:	b25b      	sxtb	r3, r3
 8003ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cec:	d103      	bne.n	8003cf6 <xQueueReceive+0x122>
 8003cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cfc:	b25b      	sxtb	r3, r3
 8003cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d02:	d103      	bne.n	8003d0c <xQueueReceive+0x138>
 8003d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d0c:	f001 ffb2 	bl	8005c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d10:	1d3a      	adds	r2, r7, #4
 8003d12:	f107 0310 	add.w	r3, r7, #16
 8003d16:	4611      	mov	r1, r2
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 ffcd 	bl	8004cb8 <xTaskCheckForTimeOut>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d123      	bne.n	8003d6c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d26:	f000 fa3b 	bl	80041a0 <prvIsQueueEmpty>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d017      	beq.n	8003d60 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d32:	3324      	adds	r3, #36	; 0x24
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	4611      	mov	r1, r2
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 fef3 	bl	8004b24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d40:	f000 f9dc 	bl	80040fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d44:	f000 fd22 	bl	800478c <xTaskResumeAll>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d189      	bne.n	8003c62 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003d4e:	4b10      	ldr	r3, [pc, #64]	; (8003d90 <xQueueReceive+0x1bc>)
 8003d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	f3bf 8f6f 	isb	sy
 8003d5e:	e780      	b.n	8003c62 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d62:	f000 f9cb 	bl	80040fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d66:	f000 fd11 	bl	800478c <xTaskResumeAll>
 8003d6a:	e77a      	b.n	8003c62 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d6e:	f000 f9c5 	bl	80040fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d72:	f000 fd0b 	bl	800478c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d78:	f000 fa12 	bl	80041a0 <prvIsQueueEmpty>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f43f af6f 	beq.w	8003c62 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3730      	adds	r7, #48	; 0x30
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	e000ed04 	.word	0xe000ed04

08003d94 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b08e      	sub	sp, #56	; 0x38
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003da6:	2300      	movs	r3, #0
 8003da8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10a      	bne.n	8003dc6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db4:	f383 8811 	msr	BASEPRI, r3
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	623b      	str	r3, [r7, #32]
}
 8003dc2:	bf00      	nop
 8003dc4:	e7fe      	b.n	8003dc4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00a      	beq.n	8003de4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd2:	f383 8811 	msr	BASEPRI, r3
 8003dd6:	f3bf 8f6f 	isb	sy
 8003dda:	f3bf 8f4f 	dsb	sy
 8003dde:	61fb      	str	r3, [r7, #28]
}
 8003de0:	bf00      	nop
 8003de2:	e7fe      	b.n	8003de2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003de4:	f001 f8c0 	bl	8004f68 <xTaskGetSchedulerState>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d102      	bne.n	8003df4 <xQueueSemaphoreTake+0x60>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <xQueueSemaphoreTake+0x64>
 8003df4:	2301      	movs	r3, #1
 8003df6:	e000      	b.n	8003dfa <xQueueSemaphoreTake+0x66>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10a      	bne.n	8003e14 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e02:	f383 8811 	msr	BASEPRI, r3
 8003e06:	f3bf 8f6f 	isb	sy
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	61bb      	str	r3, [r7, #24]
}
 8003e10:	bf00      	nop
 8003e12:	e7fe      	b.n	8003e12 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e14:	f001 fefe 	bl	8005c14 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d024      	beq.n	8003e6e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e26:	1e5a      	subs	r2, r3, #1
 8003e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d104      	bne.n	8003e3e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003e34:	f001 fa0e 	bl	8005254 <pvTaskIncrementMutexHeldCount>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00f      	beq.n	8003e66 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e48:	3310      	adds	r3, #16
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 feba 	bl	8004bc4 <xTaskRemoveFromEventList>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d007      	beq.n	8003e66 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e56:	4b54      	ldr	r3, [pc, #336]	; (8003fa8 <xQueueSemaphoreTake+0x214>)
 8003e58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e66:	f001 ff05 	bl	8005c74 <vPortExitCritical>
				return pdPASS;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e097      	b.n	8003f9e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d111      	bne.n	8003e98 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7e:	f383 8811 	msr	BASEPRI, r3
 8003e82:	f3bf 8f6f 	isb	sy
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	617b      	str	r3, [r7, #20]
}
 8003e8c:	bf00      	nop
 8003e8e:	e7fe      	b.n	8003e8e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003e90:	f001 fef0 	bl	8005c74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e94:	2300      	movs	r3, #0
 8003e96:	e082      	b.n	8003f9e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d106      	bne.n	8003eac <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e9e:	f107 030c 	add.w	r3, r7, #12
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 fef2 	bl	8004c8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003eac:	f001 fee2 	bl	8005c74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003eb0:	f000 fc5e 	bl	8004770 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003eb4:	f001 feae 	bl	8005c14 <vPortEnterCritical>
 8003eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ebe:	b25b      	sxtb	r3, r3
 8003ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec4:	d103      	bne.n	8003ece <xQueueSemaphoreTake+0x13a>
 8003ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ed4:	b25b      	sxtb	r3, r3
 8003ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eda:	d103      	bne.n	8003ee4 <xQueueSemaphoreTake+0x150>
 8003edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ee4:	f001 fec6 	bl	8005c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ee8:	463a      	mov	r2, r7
 8003eea:	f107 030c 	add.w	r3, r7, #12
 8003eee:	4611      	mov	r1, r2
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 fee1 	bl	8004cb8 <xTaskCheckForTimeOut>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d132      	bne.n	8003f62 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003efc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003efe:	f000 f94f 	bl	80041a0 <prvIsQueueEmpty>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d026      	beq.n	8003f56 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d109      	bne.n	8003f24 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003f10:	f001 fe80 	bl	8005c14 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f001 f843 	bl	8004fa4 <xTaskPriorityInherit>
 8003f1e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003f20:	f001 fea8 	bl	8005c74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f26:	3324      	adds	r3, #36	; 0x24
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 fdf9 	bl	8004b24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f34:	f000 f8e2 	bl	80040fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f38:	f000 fc28 	bl	800478c <xTaskResumeAll>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f47f af68 	bne.w	8003e14 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003f44:	4b18      	ldr	r3, [pc, #96]	; (8003fa8 <xQueueSemaphoreTake+0x214>)
 8003f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	f3bf 8f6f 	isb	sy
 8003f54:	e75e      	b.n	8003e14 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003f56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f58:	f000 f8d0 	bl	80040fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f5c:	f000 fc16 	bl	800478c <xTaskResumeAll>
 8003f60:	e758      	b.n	8003e14 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003f62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f64:	f000 f8ca 	bl	80040fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f68:	f000 fc10 	bl	800478c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f6e:	f000 f917 	bl	80041a0 <prvIsQueueEmpty>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f43f af4d 	beq.w	8003e14 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00d      	beq.n	8003f9c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003f80:	f001 fe48 	bl	8005c14 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003f84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f86:	f000 f811 	bl	8003fac <prvGetDisinheritPriorityAfterTimeout>
 8003f8a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f92:	4618      	mov	r0, r3
 8003f94:	f001 f8dc 	bl	8005150 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003f98:	f001 fe6c 	bl	8005c74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3738      	adds	r7, #56	; 0x38
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	e000ed04 	.word	0xe000ed04

08003fac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d006      	beq.n	8003fca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	e001      	b.n	8003fce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003fce:	68fb      	ldr	r3, [r7, #12]
	}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10d      	bne.n	8004016 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d14d      	bne.n	800409e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	4618      	mov	r0, r3
 8004008:	f001 f834 	bl	8005074 <xTaskPriorityDisinherit>
 800400c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	609a      	str	r2, [r3, #8]
 8004014:	e043      	b.n	800409e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d119      	bne.n	8004050 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6858      	ldr	r0, [r3, #4]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	461a      	mov	r2, r3
 8004026:	68b9      	ldr	r1, [r7, #8]
 8004028:	f002 f93c 	bl	80062a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	441a      	add	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	429a      	cmp	r2, r3
 8004044:	d32b      	bcc.n	800409e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	605a      	str	r2, [r3, #4]
 800404e:	e026      	b.n	800409e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	68d8      	ldr	r0, [r3, #12]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004058:	461a      	mov	r2, r3
 800405a:	68b9      	ldr	r1, [r7, #8]
 800405c:	f002 f922 	bl	80062a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	68da      	ldr	r2, [r3, #12]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	425b      	negs	r3, r3
 800406a:	441a      	add	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	68da      	ldr	r2, [r3, #12]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d207      	bcs.n	800408c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	425b      	negs	r3, r3
 8004086:	441a      	add	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b02      	cmp	r3, #2
 8004090:	d105      	bne.n	800409e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	3b01      	subs	r3, #1
 800409c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80040a6:	697b      	ldr	r3, [r7, #20]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d018      	beq.n	80040f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68da      	ldr	r2, [r3, #12]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	441a      	add	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68da      	ldr	r2, [r3, #12]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d303      	bcc.n	80040e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68d9      	ldr	r1, [r3, #12]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ec:	461a      	mov	r2, r3
 80040ee:	6838      	ldr	r0, [r7, #0]
 80040f0:	f002 f8d8 	bl	80062a4 <memcpy>
	}
}
 80040f4:	bf00      	nop
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004104:	f001 fd86 	bl	8005c14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800410e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004110:	e011      	b.n	8004136 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	2b00      	cmp	r3, #0
 8004118:	d012      	beq.n	8004140 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	3324      	adds	r3, #36	; 0x24
 800411e:	4618      	mov	r0, r3
 8004120:	f000 fd50 	bl	8004bc4 <xTaskRemoveFromEventList>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800412a:	f000 fe27 	bl	8004d7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800412e:	7bfb      	ldrb	r3, [r7, #15]
 8004130:	3b01      	subs	r3, #1
 8004132:	b2db      	uxtb	r3, r3
 8004134:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800413a:	2b00      	cmp	r3, #0
 800413c:	dce9      	bgt.n	8004112 <prvUnlockQueue+0x16>
 800413e:	e000      	b.n	8004142 <prvUnlockQueue+0x46>
					break;
 8004140:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	22ff      	movs	r2, #255	; 0xff
 8004146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800414a:	f001 fd93 	bl	8005c74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800414e:	f001 fd61 	bl	8005c14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004158:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800415a:	e011      	b.n	8004180 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d012      	beq.n	800418a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3310      	adds	r3, #16
 8004168:	4618      	mov	r0, r3
 800416a:	f000 fd2b 	bl	8004bc4 <xTaskRemoveFromEventList>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004174:	f000 fe02 	bl	8004d7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004178:	7bbb      	ldrb	r3, [r7, #14]
 800417a:	3b01      	subs	r3, #1
 800417c:	b2db      	uxtb	r3, r3
 800417e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004180:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004184:	2b00      	cmp	r3, #0
 8004186:	dce9      	bgt.n	800415c <prvUnlockQueue+0x60>
 8004188:	e000      	b.n	800418c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800418a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	22ff      	movs	r2, #255	; 0xff
 8004190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004194:	f001 fd6e 	bl	8005c74 <vPortExitCritical>
}
 8004198:	bf00      	nop
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041a8:	f001 fd34 	bl	8005c14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d102      	bne.n	80041ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80041b4:	2301      	movs	r3, #1
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	e001      	b.n	80041be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80041ba:	2300      	movs	r3, #0
 80041bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041be:	f001 fd59 	bl	8005c74 <vPortExitCritical>

	return xReturn;
 80041c2:	68fb      	ldr	r3, [r7, #12]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041d4:	f001 fd1e 	bl	8005c14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d102      	bne.n	80041ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80041e4:	2301      	movs	r3, #1
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	e001      	b.n	80041ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80041ea:	2300      	movs	r3, #0
 80041ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041ee:	f001 fd41 	bl	8005c74 <vPortExitCritical>

	return xReturn;
 80041f2:	68fb      	ldr	r3, [r7, #12]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004206:	2300      	movs	r3, #0
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	e014      	b.n	8004236 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800420c:	4a0f      	ldr	r2, [pc, #60]	; (800424c <vQueueAddToRegistry+0x50>)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10b      	bne.n	8004230 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004218:	490c      	ldr	r1, [pc, #48]	; (800424c <vQueueAddToRegistry+0x50>)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004222:	4a0a      	ldr	r2, [pc, #40]	; (800424c <vQueueAddToRegistry+0x50>)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	4413      	add	r3, r2
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800422e:	e006      	b.n	800423e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	3301      	adds	r3, #1
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2b07      	cmp	r3, #7
 800423a:	d9e7      	bls.n	800420c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800423c:	bf00      	nop
 800423e:	bf00      	nop
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	200008e0 	.word	0x200008e0

08004250 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004260:	f001 fcd8 	bl	8005c14 <vPortEnterCritical>
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800426a:	b25b      	sxtb	r3, r3
 800426c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004270:	d103      	bne.n	800427a <vQueueWaitForMessageRestricted+0x2a>
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004280:	b25b      	sxtb	r3, r3
 8004282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004286:	d103      	bne.n	8004290 <vQueueWaitForMessageRestricted+0x40>
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004290:	f001 fcf0 	bl	8005c74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004298:	2b00      	cmp	r3, #0
 800429a:	d106      	bne.n	80042aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	3324      	adds	r3, #36	; 0x24
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	68b9      	ldr	r1, [r7, #8]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 fc61 	bl	8004b6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80042aa:	6978      	ldr	r0, [r7, #20]
 80042ac:	f7ff ff26 	bl	80040fc <prvUnlockQueue>
	}
 80042b0:	bf00      	nop
 80042b2:	3718      	adds	r7, #24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08e      	sub	sp, #56	; 0x38
 80042bc:	af04      	add	r7, sp, #16
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
 80042c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80042c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10a      	bne.n	80042e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80042cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d0:	f383 8811 	msr	BASEPRI, r3
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	623b      	str	r3, [r7, #32]
}
 80042de:	bf00      	nop
 80042e0:	e7fe      	b.n	80042e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80042e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10a      	bne.n	80042fe <xTaskCreateStatic+0x46>
	__asm volatile
 80042e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	61fb      	str	r3, [r7, #28]
}
 80042fa:	bf00      	nop
 80042fc:	e7fe      	b.n	80042fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80042fe:	23bc      	movs	r3, #188	; 0xbc
 8004300:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	2bbc      	cmp	r3, #188	; 0xbc
 8004306:	d00a      	beq.n	800431e <xTaskCreateStatic+0x66>
	__asm volatile
 8004308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	61bb      	str	r3, [r7, #24]
}
 800431a:	bf00      	nop
 800431c:	e7fe      	b.n	800431c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800431e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004322:	2b00      	cmp	r3, #0
 8004324:	d01e      	beq.n	8004364 <xTaskCreateStatic+0xac>
 8004326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004328:	2b00      	cmp	r3, #0
 800432a:	d01b      	beq.n	8004364 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800432c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004334:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	2202      	movs	r2, #2
 800433a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800433e:	2300      	movs	r3, #0
 8004340:	9303      	str	r3, [sp, #12]
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	9302      	str	r3, [sp, #8]
 8004346:	f107 0314 	add.w	r3, r7, #20
 800434a:	9301      	str	r3, [sp, #4]
 800434c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	68b9      	ldr	r1, [r7, #8]
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 f850 	bl	80043fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800435c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800435e:	f000 f8f3 	bl	8004548 <prvAddNewTaskToReadyList>
 8004362:	e001      	b.n	8004368 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004364:	2300      	movs	r3, #0
 8004366:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004368:	697b      	ldr	r3, [r7, #20]
	}
 800436a:	4618      	mov	r0, r3
 800436c:	3728      	adds	r7, #40	; 0x28
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004372:	b580      	push	{r7, lr}
 8004374:	b08c      	sub	sp, #48	; 0x30
 8004376:	af04      	add	r7, sp, #16
 8004378:	60f8      	str	r0, [r7, #12]
 800437a:	60b9      	str	r1, [r7, #8]
 800437c:	603b      	str	r3, [r7, #0]
 800437e:	4613      	mov	r3, r2
 8004380:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004382:	88fb      	ldrh	r3, [r7, #6]
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4618      	mov	r0, r3
 8004388:	f001 fd66 	bl	8005e58 <pvPortMalloc>
 800438c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00e      	beq.n	80043b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004394:	20bc      	movs	r0, #188	; 0xbc
 8004396:	f001 fd5f 	bl	8005e58 <pvPortMalloc>
 800439a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	631a      	str	r2, [r3, #48]	; 0x30
 80043a8:	e005      	b.n	80043b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043aa:	6978      	ldr	r0, [r7, #20]
 80043ac:	f001 fe20 	bl	8005ff0 <vPortFree>
 80043b0:	e001      	b.n	80043b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80043b2:	2300      	movs	r3, #0
 80043b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d017      	beq.n	80043ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043c4:	88fa      	ldrh	r2, [r7, #6]
 80043c6:	2300      	movs	r3, #0
 80043c8:	9303      	str	r3, [sp, #12]
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	9302      	str	r3, [sp, #8]
 80043ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d0:	9301      	str	r3, [sp, #4]
 80043d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68b9      	ldr	r1, [r7, #8]
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f000 f80e 	bl	80043fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043e0:	69f8      	ldr	r0, [r7, #28]
 80043e2:	f000 f8b1 	bl	8004548 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80043e6:	2301      	movs	r3, #1
 80043e8:	61bb      	str	r3, [r7, #24]
 80043ea:	e002      	b.n	80043f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80043ec:	f04f 33ff 	mov.w	r3, #4294967295
 80043f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80043f2:	69bb      	ldr	r3, [r7, #24]
	}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3720      	adds	r7, #32
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b088      	sub	sp, #32
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
 8004408:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800440a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	461a      	mov	r2, r3
 8004414:	21a5      	movs	r1, #165	; 0xa5
 8004416:	f001 ff53 	bl	80062c0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004424:	3b01      	subs	r3, #1
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	f023 0307 	bic.w	r3, r3, #7
 8004432:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00a      	beq.n	8004454 <prvInitialiseNewTask+0x58>
	__asm volatile
 800443e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004442:	f383 8811 	msr	BASEPRI, r3
 8004446:	f3bf 8f6f 	isb	sy
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	617b      	str	r3, [r7, #20]
}
 8004450:	bf00      	nop
 8004452:	e7fe      	b.n	8004452 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d01f      	beq.n	800449a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800445a:	2300      	movs	r3, #0
 800445c:	61fb      	str	r3, [r7, #28]
 800445e:	e012      	b.n	8004486 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	4413      	add	r3, r2
 8004466:	7819      	ldrb	r1, [r3, #0]
 8004468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	4413      	add	r3, r2
 800446e:	3334      	adds	r3, #52	; 0x34
 8004470:	460a      	mov	r2, r1
 8004472:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	4413      	add	r3, r2
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d006      	beq.n	800448e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	3301      	adds	r3, #1
 8004484:	61fb      	str	r3, [r7, #28]
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	2b0f      	cmp	r3, #15
 800448a:	d9e9      	bls.n	8004460 <prvInitialiseNewTask+0x64>
 800448c:	e000      	b.n	8004490 <prvInitialiseNewTask+0x94>
			{
				break;
 800448e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004498:	e003      	b.n	80044a2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a4:	2b37      	cmp	r3, #55	; 0x37
 80044a6:	d901      	bls.n	80044ac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044a8:	2337      	movs	r3, #55	; 0x37
 80044aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80044ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80044b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80044b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ba:	2200      	movs	r2, #0
 80044bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c0:	3304      	adds	r3, #4
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fe ff64 	bl	8003390 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ca:	3318      	adds	r3, #24
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fe ff5f 	bl	8003390 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80044de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ea:	2200      	movs	r2, #0
 80044ec:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80044f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fa:	3354      	adds	r3, #84	; 0x54
 80044fc:	2260      	movs	r2, #96	; 0x60
 80044fe:	2100      	movs	r1, #0
 8004500:	4618      	mov	r0, r3
 8004502:	f001 fedd 	bl	80062c0 <memset>
 8004506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004508:	4a0c      	ldr	r2, [pc, #48]	; (800453c <prvInitialiseNewTask+0x140>)
 800450a:	659a      	str	r2, [r3, #88]	; 0x58
 800450c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450e:	4a0c      	ldr	r2, [pc, #48]	; (8004540 <prvInitialiseNewTask+0x144>)
 8004510:	65da      	str	r2, [r3, #92]	; 0x5c
 8004512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004514:	4a0b      	ldr	r2, [pc, #44]	; (8004544 <prvInitialiseNewTask+0x148>)
 8004516:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	68f9      	ldr	r1, [r7, #12]
 800451c:	69b8      	ldr	r0, [r7, #24]
 800451e:	f001 fa4f 	bl	80059c0 <pxPortInitialiseStack>
 8004522:	4602      	mov	r2, r0
 8004524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004526:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800452e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004532:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004534:	bf00      	nop
 8004536:	3720      	adds	r7, #32
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	080066e0 	.word	0x080066e0
 8004540:	08006700 	.word	0x08006700
 8004544:	080066c0 	.word	0x080066c0

08004548 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004550:	f001 fb60 	bl	8005c14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004554:	4b2d      	ldr	r3, [pc, #180]	; (800460c <prvAddNewTaskToReadyList+0xc4>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3301      	adds	r3, #1
 800455a:	4a2c      	ldr	r2, [pc, #176]	; (800460c <prvAddNewTaskToReadyList+0xc4>)
 800455c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800455e:	4b2c      	ldr	r3, [pc, #176]	; (8004610 <prvAddNewTaskToReadyList+0xc8>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d109      	bne.n	800457a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004566:	4a2a      	ldr	r2, [pc, #168]	; (8004610 <prvAddNewTaskToReadyList+0xc8>)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800456c:	4b27      	ldr	r3, [pc, #156]	; (800460c <prvAddNewTaskToReadyList+0xc4>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d110      	bne.n	8004596 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004574:	f000 fc26 	bl	8004dc4 <prvInitialiseTaskLists>
 8004578:	e00d      	b.n	8004596 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800457a:	4b26      	ldr	r3, [pc, #152]	; (8004614 <prvAddNewTaskToReadyList+0xcc>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d109      	bne.n	8004596 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004582:	4b23      	ldr	r3, [pc, #140]	; (8004610 <prvAddNewTaskToReadyList+0xc8>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458c:	429a      	cmp	r2, r3
 800458e:	d802      	bhi.n	8004596 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004590:	4a1f      	ldr	r2, [pc, #124]	; (8004610 <prvAddNewTaskToReadyList+0xc8>)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004596:	4b20      	ldr	r3, [pc, #128]	; (8004618 <prvAddNewTaskToReadyList+0xd0>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3301      	adds	r3, #1
 800459c:	4a1e      	ldr	r2, [pc, #120]	; (8004618 <prvAddNewTaskToReadyList+0xd0>)
 800459e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80045a0:	4b1d      	ldr	r3, [pc, #116]	; (8004618 <prvAddNewTaskToReadyList+0xd0>)
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ac:	4b1b      	ldr	r3, [pc, #108]	; (800461c <prvAddNewTaskToReadyList+0xd4>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d903      	bls.n	80045bc <prvAddNewTaskToReadyList+0x74>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	4a18      	ldr	r2, [pc, #96]	; (800461c <prvAddNewTaskToReadyList+0xd4>)
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c0:	4613      	mov	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4a15      	ldr	r2, [pc, #84]	; (8004620 <prvAddNewTaskToReadyList+0xd8>)
 80045ca:	441a      	add	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3304      	adds	r3, #4
 80045d0:	4619      	mov	r1, r3
 80045d2:	4610      	mov	r0, r2
 80045d4:	f7fe fee9 	bl	80033aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045d8:	f001 fb4c 	bl	8005c74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80045dc:	4b0d      	ldr	r3, [pc, #52]	; (8004614 <prvAddNewTaskToReadyList+0xcc>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00e      	beq.n	8004602 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045e4:	4b0a      	ldr	r3, [pc, #40]	; (8004610 <prvAddNewTaskToReadyList+0xc8>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d207      	bcs.n	8004602 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80045f2:	4b0c      	ldr	r3, [pc, #48]	; (8004624 <prvAddNewTaskToReadyList+0xdc>)
 80045f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004602:	bf00      	nop
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	20000df4 	.word	0x20000df4
 8004610:	20000920 	.word	0x20000920
 8004614:	20000e00 	.word	0x20000e00
 8004618:	20000e10 	.word	0x20000e10
 800461c:	20000dfc 	.word	0x20000dfc
 8004620:	20000924 	.word	0x20000924
 8004624:	e000ed04 	.word	0xe000ed04

08004628 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004630:	2300      	movs	r3, #0
 8004632:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d017      	beq.n	800466a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800463a:	4b13      	ldr	r3, [pc, #76]	; (8004688 <vTaskDelay+0x60>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <vTaskDelay+0x30>
	__asm volatile
 8004642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004646:	f383 8811 	msr	BASEPRI, r3
 800464a:	f3bf 8f6f 	isb	sy
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	60bb      	str	r3, [r7, #8]
}
 8004654:	bf00      	nop
 8004656:	e7fe      	b.n	8004656 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004658:	f000 f88a 	bl	8004770 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800465c:	2100      	movs	r1, #0
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 fe0c 	bl	800527c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004664:	f000 f892 	bl	800478c <xTaskResumeAll>
 8004668:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d107      	bne.n	8004680 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004670:	4b06      	ldr	r3, [pc, #24]	; (800468c <vTaskDelay+0x64>)
 8004672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004680:	bf00      	nop
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	20000e1c 	.word	0x20000e1c
 800468c:	e000ed04 	.word	0xe000ed04

08004690 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08a      	sub	sp, #40	; 0x28
 8004694:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004696:	2300      	movs	r3, #0
 8004698:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800469a:	2300      	movs	r3, #0
 800469c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800469e:	463a      	mov	r2, r7
 80046a0:	1d39      	adds	r1, r7, #4
 80046a2:	f107 0308 	add.w	r3, r7, #8
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fe fe1e 	bl	80032e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046ac:	6839      	ldr	r1, [r7, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	9202      	str	r2, [sp, #8]
 80046b4:	9301      	str	r3, [sp, #4]
 80046b6:	2300      	movs	r3, #0
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	2300      	movs	r3, #0
 80046bc:	460a      	mov	r2, r1
 80046be:	4924      	ldr	r1, [pc, #144]	; (8004750 <vTaskStartScheduler+0xc0>)
 80046c0:	4824      	ldr	r0, [pc, #144]	; (8004754 <vTaskStartScheduler+0xc4>)
 80046c2:	f7ff fdf9 	bl	80042b8 <xTaskCreateStatic>
 80046c6:	4603      	mov	r3, r0
 80046c8:	4a23      	ldr	r2, [pc, #140]	; (8004758 <vTaskStartScheduler+0xc8>)
 80046ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80046cc:	4b22      	ldr	r3, [pc, #136]	; (8004758 <vTaskStartScheduler+0xc8>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80046d4:	2301      	movs	r3, #1
 80046d6:	617b      	str	r3, [r7, #20]
 80046d8:	e001      	b.n	80046de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80046da:	2300      	movs	r3, #0
 80046dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d102      	bne.n	80046ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80046e4:	f000 fe1e 	bl	8005324 <xTimerCreateTimerTask>
 80046e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d11b      	bne.n	8004728 <vTaskStartScheduler+0x98>
	__asm volatile
 80046f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f4:	f383 8811 	msr	BASEPRI, r3
 80046f8:	f3bf 8f6f 	isb	sy
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	613b      	str	r3, [r7, #16]
}
 8004702:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004704:	4b15      	ldr	r3, [pc, #84]	; (800475c <vTaskStartScheduler+0xcc>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3354      	adds	r3, #84	; 0x54
 800470a:	4a15      	ldr	r2, [pc, #84]	; (8004760 <vTaskStartScheduler+0xd0>)
 800470c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800470e:	4b15      	ldr	r3, [pc, #84]	; (8004764 <vTaskStartScheduler+0xd4>)
 8004710:	f04f 32ff 	mov.w	r2, #4294967295
 8004714:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004716:	4b14      	ldr	r3, [pc, #80]	; (8004768 <vTaskStartScheduler+0xd8>)
 8004718:	2201      	movs	r2, #1
 800471a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800471c:	4b13      	ldr	r3, [pc, #76]	; (800476c <vTaskStartScheduler+0xdc>)
 800471e:	2200      	movs	r2, #0
 8004720:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004722:	f001 f9d5 	bl	8005ad0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004726:	e00e      	b.n	8004746 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472e:	d10a      	bne.n	8004746 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004734:	f383 8811 	msr	BASEPRI, r3
 8004738:	f3bf 8f6f 	isb	sy
 800473c:	f3bf 8f4f 	dsb	sy
 8004740:	60fb      	str	r3, [r7, #12]
}
 8004742:	bf00      	nop
 8004744:	e7fe      	b.n	8004744 <vTaskStartScheduler+0xb4>
}
 8004746:	bf00      	nop
 8004748:	3718      	adds	r7, #24
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	080065cc 	.word	0x080065cc
 8004754:	08004d95 	.word	0x08004d95
 8004758:	20000e18 	.word	0x20000e18
 800475c:	20000920 	.word	0x20000920
 8004760:	20000010 	.word	0x20000010
 8004764:	20000e14 	.word	0x20000e14
 8004768:	20000e00 	.word	0x20000e00
 800476c:	20000df8 	.word	0x20000df8

08004770 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004770:	b480      	push	{r7}
 8004772:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004774:	4b04      	ldr	r3, [pc, #16]	; (8004788 <vTaskSuspendAll+0x18>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	3301      	adds	r3, #1
 800477a:	4a03      	ldr	r2, [pc, #12]	; (8004788 <vTaskSuspendAll+0x18>)
 800477c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800477e:	bf00      	nop
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	20000e1c 	.word	0x20000e1c

0800478c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004792:	2300      	movs	r3, #0
 8004794:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004796:	2300      	movs	r3, #0
 8004798:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800479a:	4b42      	ldr	r3, [pc, #264]	; (80048a4 <xTaskResumeAll+0x118>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10a      	bne.n	80047b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80047a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	603b      	str	r3, [r7, #0]
}
 80047b4:	bf00      	nop
 80047b6:	e7fe      	b.n	80047b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047b8:	f001 fa2c 	bl	8005c14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047bc:	4b39      	ldr	r3, [pc, #228]	; (80048a4 <xTaskResumeAll+0x118>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3b01      	subs	r3, #1
 80047c2:	4a38      	ldr	r2, [pc, #224]	; (80048a4 <xTaskResumeAll+0x118>)
 80047c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047c6:	4b37      	ldr	r3, [pc, #220]	; (80048a4 <xTaskResumeAll+0x118>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d162      	bne.n	8004894 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047ce:	4b36      	ldr	r3, [pc, #216]	; (80048a8 <xTaskResumeAll+0x11c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d05e      	beq.n	8004894 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047d6:	e02f      	b.n	8004838 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047d8:	4b34      	ldr	r3, [pc, #208]	; (80048ac <xTaskResumeAll+0x120>)
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	3318      	adds	r3, #24
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7fe fe3d 	bl	8003464 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	3304      	adds	r3, #4
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fe fe38 	bl	8003464 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f8:	4b2d      	ldr	r3, [pc, #180]	; (80048b0 <xTaskResumeAll+0x124>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d903      	bls.n	8004808 <xTaskResumeAll+0x7c>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004804:	4a2a      	ldr	r2, [pc, #168]	; (80048b0 <xTaskResumeAll+0x124>)
 8004806:	6013      	str	r3, [r2, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800480c:	4613      	mov	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4a27      	ldr	r2, [pc, #156]	; (80048b4 <xTaskResumeAll+0x128>)
 8004816:	441a      	add	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	3304      	adds	r3, #4
 800481c:	4619      	mov	r1, r3
 800481e:	4610      	mov	r0, r2
 8004820:	f7fe fdc3 	bl	80033aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004828:	4b23      	ldr	r3, [pc, #140]	; (80048b8 <xTaskResumeAll+0x12c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	429a      	cmp	r2, r3
 8004830:	d302      	bcc.n	8004838 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004832:	4b22      	ldr	r3, [pc, #136]	; (80048bc <xTaskResumeAll+0x130>)
 8004834:	2201      	movs	r2, #1
 8004836:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004838:	4b1c      	ldr	r3, [pc, #112]	; (80048ac <xTaskResumeAll+0x120>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1cb      	bne.n	80047d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004846:	f000 fb5f 	bl	8004f08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800484a:	4b1d      	ldr	r3, [pc, #116]	; (80048c0 <xTaskResumeAll+0x134>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d010      	beq.n	8004878 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004856:	f000 f847 	bl	80048e8 <xTaskIncrementTick>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004860:	4b16      	ldr	r3, [pc, #88]	; (80048bc <xTaskResumeAll+0x130>)
 8004862:	2201      	movs	r2, #1
 8004864:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	3b01      	subs	r3, #1
 800486a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f1      	bne.n	8004856 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004872:	4b13      	ldr	r3, [pc, #76]	; (80048c0 <xTaskResumeAll+0x134>)
 8004874:	2200      	movs	r2, #0
 8004876:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004878:	4b10      	ldr	r3, [pc, #64]	; (80048bc <xTaskResumeAll+0x130>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d009      	beq.n	8004894 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004880:	2301      	movs	r3, #1
 8004882:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004884:	4b0f      	ldr	r3, [pc, #60]	; (80048c4 <xTaskResumeAll+0x138>)
 8004886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004894:	f001 f9ee 	bl	8005c74 <vPortExitCritical>

	return xAlreadyYielded;
 8004898:	68bb      	ldr	r3, [r7, #8]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	20000e1c 	.word	0x20000e1c
 80048a8:	20000df4 	.word	0x20000df4
 80048ac:	20000db4 	.word	0x20000db4
 80048b0:	20000dfc 	.word	0x20000dfc
 80048b4:	20000924 	.word	0x20000924
 80048b8:	20000920 	.word	0x20000920
 80048bc:	20000e08 	.word	0x20000e08
 80048c0:	20000e04 	.word	0x20000e04
 80048c4:	e000ed04 	.word	0xe000ed04

080048c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80048ce:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <xTaskGetTickCount+0x1c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80048d4:	687b      	ldr	r3, [r7, #4]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	20000df8 	.word	0x20000df8

080048e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048ee:	2300      	movs	r3, #0
 80048f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048f2:	4b4f      	ldr	r3, [pc, #316]	; (8004a30 <xTaskIncrementTick+0x148>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f040 808f 	bne.w	8004a1a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80048fc:	4b4d      	ldr	r3, [pc, #308]	; (8004a34 <xTaskIncrementTick+0x14c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3301      	adds	r3, #1
 8004902:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004904:	4a4b      	ldr	r2, [pc, #300]	; (8004a34 <xTaskIncrementTick+0x14c>)
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d120      	bne.n	8004952 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004910:	4b49      	ldr	r3, [pc, #292]	; (8004a38 <xTaskIncrementTick+0x150>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00a      	beq.n	8004930 <xTaskIncrementTick+0x48>
	__asm volatile
 800491a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491e:	f383 8811 	msr	BASEPRI, r3
 8004922:	f3bf 8f6f 	isb	sy
 8004926:	f3bf 8f4f 	dsb	sy
 800492a:	603b      	str	r3, [r7, #0]
}
 800492c:	bf00      	nop
 800492e:	e7fe      	b.n	800492e <xTaskIncrementTick+0x46>
 8004930:	4b41      	ldr	r3, [pc, #260]	; (8004a38 <xTaskIncrementTick+0x150>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	4b41      	ldr	r3, [pc, #260]	; (8004a3c <xTaskIncrementTick+0x154>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a3f      	ldr	r2, [pc, #252]	; (8004a38 <xTaskIncrementTick+0x150>)
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	4a3f      	ldr	r2, [pc, #252]	; (8004a3c <xTaskIncrementTick+0x154>)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6013      	str	r3, [r2, #0]
 8004944:	4b3e      	ldr	r3, [pc, #248]	; (8004a40 <xTaskIncrementTick+0x158>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3301      	adds	r3, #1
 800494a:	4a3d      	ldr	r2, [pc, #244]	; (8004a40 <xTaskIncrementTick+0x158>)
 800494c:	6013      	str	r3, [r2, #0]
 800494e:	f000 fadb 	bl	8004f08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004952:	4b3c      	ldr	r3, [pc, #240]	; (8004a44 <xTaskIncrementTick+0x15c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	429a      	cmp	r2, r3
 800495a:	d349      	bcc.n	80049f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800495c:	4b36      	ldr	r3, [pc, #216]	; (8004a38 <xTaskIncrementTick+0x150>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d104      	bne.n	8004970 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004966:	4b37      	ldr	r3, [pc, #220]	; (8004a44 <xTaskIncrementTick+0x15c>)
 8004968:	f04f 32ff 	mov.w	r2, #4294967295
 800496c:	601a      	str	r2, [r3, #0]
					break;
 800496e:	e03f      	b.n	80049f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004970:	4b31      	ldr	r3, [pc, #196]	; (8004a38 <xTaskIncrementTick+0x150>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	429a      	cmp	r2, r3
 8004986:	d203      	bcs.n	8004990 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004988:	4a2e      	ldr	r2, [pc, #184]	; (8004a44 <xTaskIncrementTick+0x15c>)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800498e:	e02f      	b.n	80049f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	3304      	adds	r3, #4
 8004994:	4618      	mov	r0, r3
 8004996:	f7fe fd65 	bl	8003464 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d004      	beq.n	80049ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	3318      	adds	r3, #24
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fe fd5c 	bl	8003464 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b0:	4b25      	ldr	r3, [pc, #148]	; (8004a48 <xTaskIncrementTick+0x160>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d903      	bls.n	80049c0 <xTaskIncrementTick+0xd8>
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049bc:	4a22      	ldr	r2, [pc, #136]	; (8004a48 <xTaskIncrementTick+0x160>)
 80049be:	6013      	str	r3, [r2, #0]
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c4:	4613      	mov	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4a1f      	ldr	r2, [pc, #124]	; (8004a4c <xTaskIncrementTick+0x164>)
 80049ce:	441a      	add	r2, r3
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	3304      	adds	r3, #4
 80049d4:	4619      	mov	r1, r3
 80049d6:	4610      	mov	r0, r2
 80049d8:	f7fe fce7 	bl	80033aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e0:	4b1b      	ldr	r3, [pc, #108]	; (8004a50 <xTaskIncrementTick+0x168>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d3b8      	bcc.n	800495c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80049ea:	2301      	movs	r3, #1
 80049ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049ee:	e7b5      	b.n	800495c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80049f0:	4b17      	ldr	r3, [pc, #92]	; (8004a50 <xTaskIncrementTick+0x168>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f6:	4915      	ldr	r1, [pc, #84]	; (8004a4c <xTaskIncrementTick+0x164>)
 80049f8:	4613      	mov	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	440b      	add	r3, r1
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d901      	bls.n	8004a0c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004a0c:	4b11      	ldr	r3, [pc, #68]	; (8004a54 <xTaskIncrementTick+0x16c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d007      	beq.n	8004a24 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004a14:	2301      	movs	r3, #1
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	e004      	b.n	8004a24 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004a1a:	4b0f      	ldr	r3, [pc, #60]	; (8004a58 <xTaskIncrementTick+0x170>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	4a0d      	ldr	r2, [pc, #52]	; (8004a58 <xTaskIncrementTick+0x170>)
 8004a22:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004a24:	697b      	ldr	r3, [r7, #20]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	20000e1c 	.word	0x20000e1c
 8004a34:	20000df8 	.word	0x20000df8
 8004a38:	20000dac 	.word	0x20000dac
 8004a3c:	20000db0 	.word	0x20000db0
 8004a40:	20000e0c 	.word	0x20000e0c
 8004a44:	20000e14 	.word	0x20000e14
 8004a48:	20000dfc 	.word	0x20000dfc
 8004a4c:	20000924 	.word	0x20000924
 8004a50:	20000920 	.word	0x20000920
 8004a54:	20000e08 	.word	0x20000e08
 8004a58:	20000e04 	.word	0x20000e04

08004a5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a62:	4b2a      	ldr	r3, [pc, #168]	; (8004b0c <vTaskSwitchContext+0xb0>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a6a:	4b29      	ldr	r3, [pc, #164]	; (8004b10 <vTaskSwitchContext+0xb4>)
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a70:	e046      	b.n	8004b00 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004a72:	4b27      	ldr	r3, [pc, #156]	; (8004b10 <vTaskSwitchContext+0xb4>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a78:	4b26      	ldr	r3, [pc, #152]	; (8004b14 <vTaskSwitchContext+0xb8>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	e010      	b.n	8004aa2 <vTaskSwitchContext+0x46>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10a      	bne.n	8004a9c <vTaskSwitchContext+0x40>
	__asm volatile
 8004a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8a:	f383 8811 	msr	BASEPRI, r3
 8004a8e:	f3bf 8f6f 	isb	sy
 8004a92:	f3bf 8f4f 	dsb	sy
 8004a96:	607b      	str	r3, [r7, #4]
}
 8004a98:	bf00      	nop
 8004a9a:	e7fe      	b.n	8004a9a <vTaskSwitchContext+0x3e>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	491d      	ldr	r1, [pc, #116]	; (8004b18 <vTaskSwitchContext+0xbc>)
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	440b      	add	r3, r1
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d0e4      	beq.n	8004a80 <vTaskSwitchContext+0x24>
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4a15      	ldr	r2, [pc, #84]	; (8004b18 <vTaskSwitchContext+0xbc>)
 8004ac2:	4413      	add	r3, r2
 8004ac4:	60bb      	str	r3, [r7, #8]
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	605a      	str	r2, [r3, #4]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	3308      	adds	r3, #8
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d104      	bne.n	8004ae6 <vTaskSwitchContext+0x8a>
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	605a      	str	r2, [r3, #4]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	4a0b      	ldr	r2, [pc, #44]	; (8004b1c <vTaskSwitchContext+0xc0>)
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	4a08      	ldr	r2, [pc, #32]	; (8004b14 <vTaskSwitchContext+0xb8>)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004af6:	4b09      	ldr	r3, [pc, #36]	; (8004b1c <vTaskSwitchContext+0xc0>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	3354      	adds	r3, #84	; 0x54
 8004afc:	4a08      	ldr	r2, [pc, #32]	; (8004b20 <vTaskSwitchContext+0xc4>)
 8004afe:	6013      	str	r3, [r2, #0]
}
 8004b00:	bf00      	nop
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	20000e1c 	.word	0x20000e1c
 8004b10:	20000e08 	.word	0x20000e08
 8004b14:	20000dfc 	.word	0x20000dfc
 8004b18:	20000924 	.word	0x20000924
 8004b1c:	20000920 	.word	0x20000920
 8004b20:	20000010 	.word	0x20000010

08004b24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10a      	bne.n	8004b4a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b38:	f383 8811 	msr	BASEPRI, r3
 8004b3c:	f3bf 8f6f 	isb	sy
 8004b40:	f3bf 8f4f 	dsb	sy
 8004b44:	60fb      	str	r3, [r7, #12]
}
 8004b46:	bf00      	nop
 8004b48:	e7fe      	b.n	8004b48 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b4a:	4b07      	ldr	r3, [pc, #28]	; (8004b68 <vTaskPlaceOnEventList+0x44>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	3318      	adds	r3, #24
 8004b50:	4619      	mov	r1, r3
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7fe fc4d 	bl	80033f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b58:	2101      	movs	r1, #1
 8004b5a:	6838      	ldr	r0, [r7, #0]
 8004b5c:	f000 fb8e 	bl	800527c <prvAddCurrentTaskToDelayedList>
}
 8004b60:	bf00      	nop
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	20000920 	.word	0x20000920

08004b6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10a      	bne.n	8004b94 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b82:	f383 8811 	msr	BASEPRI, r3
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	617b      	str	r3, [r7, #20]
}
 8004b90:	bf00      	nop
 8004b92:	e7fe      	b.n	8004b92 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b94:	4b0a      	ldr	r3, [pc, #40]	; (8004bc0 <vTaskPlaceOnEventListRestricted+0x54>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	3318      	adds	r3, #24
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f7fe fc04 	bl	80033aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	68b8      	ldr	r0, [r7, #8]
 8004bb2:	f000 fb63 	bl	800527c <prvAddCurrentTaskToDelayedList>
	}
 8004bb6:	bf00      	nop
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20000920 	.word	0x20000920

08004bc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10a      	bne.n	8004bf0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	60fb      	str	r3, [r7, #12]
}
 8004bec:	bf00      	nop
 8004bee:	e7fe      	b.n	8004bee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	3318      	adds	r3, #24
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7fe fc35 	bl	8003464 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bfa:	4b1e      	ldr	r3, [pc, #120]	; (8004c74 <xTaskRemoveFromEventList+0xb0>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d11d      	bne.n	8004c3e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	3304      	adds	r3, #4
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7fe fc2c 	bl	8003464 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c10:	4b19      	ldr	r3, [pc, #100]	; (8004c78 <xTaskRemoveFromEventList+0xb4>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d903      	bls.n	8004c20 <xTaskRemoveFromEventList+0x5c>
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1c:	4a16      	ldr	r2, [pc, #88]	; (8004c78 <xTaskRemoveFromEventList+0xb4>)
 8004c1e:	6013      	str	r3, [r2, #0]
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c24:	4613      	mov	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4413      	add	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4a13      	ldr	r2, [pc, #76]	; (8004c7c <xTaskRemoveFromEventList+0xb8>)
 8004c2e:	441a      	add	r2, r3
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	3304      	adds	r3, #4
 8004c34:	4619      	mov	r1, r3
 8004c36:	4610      	mov	r0, r2
 8004c38:	f7fe fbb7 	bl	80033aa <vListInsertEnd>
 8004c3c:	e005      	b.n	8004c4a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	3318      	adds	r3, #24
 8004c42:	4619      	mov	r1, r3
 8004c44:	480e      	ldr	r0, [pc, #56]	; (8004c80 <xTaskRemoveFromEventList+0xbc>)
 8004c46:	f7fe fbb0 	bl	80033aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c4e:	4b0d      	ldr	r3, [pc, #52]	; (8004c84 <xTaskRemoveFromEventList+0xc0>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d905      	bls.n	8004c64 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c5c:	4b0a      	ldr	r3, [pc, #40]	; (8004c88 <xTaskRemoveFromEventList+0xc4>)
 8004c5e:	2201      	movs	r2, #1
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	e001      	b.n	8004c68 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004c64:	2300      	movs	r3, #0
 8004c66:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004c68:	697b      	ldr	r3, [r7, #20]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3718      	adds	r7, #24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	20000e1c 	.word	0x20000e1c
 8004c78:	20000dfc 	.word	0x20000dfc
 8004c7c:	20000924 	.word	0x20000924
 8004c80:	20000db4 	.word	0x20000db4
 8004c84:	20000920 	.word	0x20000920
 8004c88:	20000e08 	.word	0x20000e08

08004c8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c94:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <vTaskInternalSetTimeOutState+0x24>)
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c9c:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <vTaskInternalSetTimeOutState+0x28>)
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	605a      	str	r2, [r3, #4]
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	20000e0c 	.word	0x20000e0c
 8004cb4:	20000df8 	.word	0x20000df8

08004cb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b088      	sub	sp, #32
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10a      	bne.n	8004cde <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ccc:	f383 8811 	msr	BASEPRI, r3
 8004cd0:	f3bf 8f6f 	isb	sy
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	613b      	str	r3, [r7, #16]
}
 8004cda:	bf00      	nop
 8004cdc:	e7fe      	b.n	8004cdc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10a      	bne.n	8004cfa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce8:	f383 8811 	msr	BASEPRI, r3
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	60fb      	str	r3, [r7, #12]
}
 8004cf6:	bf00      	nop
 8004cf8:	e7fe      	b.n	8004cf8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004cfa:	f000 ff8b 	bl	8005c14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004cfe:	4b1d      	ldr	r3, [pc, #116]	; (8004d74 <xTaskCheckForTimeOut+0xbc>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d16:	d102      	bne.n	8004d1e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	61fb      	str	r3, [r7, #28]
 8004d1c:	e023      	b.n	8004d66 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	4b15      	ldr	r3, [pc, #84]	; (8004d78 <xTaskCheckForTimeOut+0xc0>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d007      	beq.n	8004d3a <xTaskCheckForTimeOut+0x82>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d302      	bcc.n	8004d3a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d34:	2301      	movs	r3, #1
 8004d36:	61fb      	str	r3, [r7, #28]
 8004d38:	e015      	b.n	8004d66 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d20b      	bcs.n	8004d5c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	1ad2      	subs	r2, r2, r3
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7ff ff9b 	bl	8004c8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d56:	2300      	movs	r3, #0
 8004d58:	61fb      	str	r3, [r7, #28]
 8004d5a:	e004      	b.n	8004d66 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d62:	2301      	movs	r3, #1
 8004d64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d66:	f000 ff85 	bl	8005c74 <vPortExitCritical>

	return xReturn;
 8004d6a:	69fb      	ldr	r3, [r7, #28]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3720      	adds	r7, #32
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	20000df8 	.word	0x20000df8
 8004d78:	20000e0c 	.word	0x20000e0c

08004d7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d80:	4b03      	ldr	r3, [pc, #12]	; (8004d90 <vTaskMissedYield+0x14>)
 8004d82:	2201      	movs	r2, #1
 8004d84:	601a      	str	r2, [r3, #0]
}
 8004d86:	bf00      	nop
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr
 8004d90:	20000e08 	.word	0x20000e08

08004d94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d9c:	f000 f852 	bl	8004e44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004da0:	4b06      	ldr	r3, [pc, #24]	; (8004dbc <prvIdleTask+0x28>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d9f9      	bls.n	8004d9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004da8:	4b05      	ldr	r3, [pc, #20]	; (8004dc0 <prvIdleTask+0x2c>)
 8004daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004db8:	e7f0      	b.n	8004d9c <prvIdleTask+0x8>
 8004dba:	bf00      	nop
 8004dbc:	20000924 	.word	0x20000924
 8004dc0:	e000ed04 	.word	0xe000ed04

08004dc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dca:	2300      	movs	r3, #0
 8004dcc:	607b      	str	r3, [r7, #4]
 8004dce:	e00c      	b.n	8004dea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4a12      	ldr	r2, [pc, #72]	; (8004e24 <prvInitialiseTaskLists+0x60>)
 8004ddc:	4413      	add	r3, r2
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fe fab6 	bl	8003350 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3301      	adds	r3, #1
 8004de8:	607b      	str	r3, [r7, #4]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b37      	cmp	r3, #55	; 0x37
 8004dee:	d9ef      	bls.n	8004dd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004df0:	480d      	ldr	r0, [pc, #52]	; (8004e28 <prvInitialiseTaskLists+0x64>)
 8004df2:	f7fe faad 	bl	8003350 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004df6:	480d      	ldr	r0, [pc, #52]	; (8004e2c <prvInitialiseTaskLists+0x68>)
 8004df8:	f7fe faaa 	bl	8003350 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004dfc:	480c      	ldr	r0, [pc, #48]	; (8004e30 <prvInitialiseTaskLists+0x6c>)
 8004dfe:	f7fe faa7 	bl	8003350 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e02:	480c      	ldr	r0, [pc, #48]	; (8004e34 <prvInitialiseTaskLists+0x70>)
 8004e04:	f7fe faa4 	bl	8003350 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e08:	480b      	ldr	r0, [pc, #44]	; (8004e38 <prvInitialiseTaskLists+0x74>)
 8004e0a:	f7fe faa1 	bl	8003350 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e0e:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <prvInitialiseTaskLists+0x78>)
 8004e10:	4a05      	ldr	r2, [pc, #20]	; (8004e28 <prvInitialiseTaskLists+0x64>)
 8004e12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e14:	4b0a      	ldr	r3, [pc, #40]	; (8004e40 <prvInitialiseTaskLists+0x7c>)
 8004e16:	4a05      	ldr	r2, [pc, #20]	; (8004e2c <prvInitialiseTaskLists+0x68>)
 8004e18:	601a      	str	r2, [r3, #0]
}
 8004e1a:	bf00      	nop
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	20000924 	.word	0x20000924
 8004e28:	20000d84 	.word	0x20000d84
 8004e2c:	20000d98 	.word	0x20000d98
 8004e30:	20000db4 	.word	0x20000db4
 8004e34:	20000dc8 	.word	0x20000dc8
 8004e38:	20000de0 	.word	0x20000de0
 8004e3c:	20000dac 	.word	0x20000dac
 8004e40:	20000db0 	.word	0x20000db0

08004e44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e4a:	e019      	b.n	8004e80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e4c:	f000 fee2 	bl	8005c14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e50:	4b10      	ldr	r3, [pc, #64]	; (8004e94 <prvCheckTasksWaitingTermination+0x50>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fe fb01 	bl	8003464 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e62:	4b0d      	ldr	r3, [pc, #52]	; (8004e98 <prvCheckTasksWaitingTermination+0x54>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	4a0b      	ldr	r2, [pc, #44]	; (8004e98 <prvCheckTasksWaitingTermination+0x54>)
 8004e6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e6c:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <prvCheckTasksWaitingTermination+0x58>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3b01      	subs	r3, #1
 8004e72:	4a0a      	ldr	r2, [pc, #40]	; (8004e9c <prvCheckTasksWaitingTermination+0x58>)
 8004e74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e76:	f000 fefd 	bl	8005c74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f810 	bl	8004ea0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e80:	4b06      	ldr	r3, [pc, #24]	; (8004e9c <prvCheckTasksWaitingTermination+0x58>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1e1      	bne.n	8004e4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e88:	bf00      	nop
 8004e8a:	bf00      	nop
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	20000dc8 	.word	0x20000dc8
 8004e98:	20000df4 	.word	0x20000df4
 8004e9c:	20000ddc 	.word	0x20000ddc

08004ea0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	3354      	adds	r3, #84	; 0x54
 8004eac:	4618      	mov	r0, r3
 8004eae:	f001 fafd 	bl	80064ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d108      	bne.n	8004ece <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f001 f895 	bl	8005ff0 <vPortFree>
				vPortFree( pxTCB );
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f001 f892 	bl	8005ff0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ecc:	e018      	b.n	8004f00 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d103      	bne.n	8004ee0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f001 f889 	bl	8005ff0 <vPortFree>
	}
 8004ede:	e00f      	b.n	8004f00 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d00a      	beq.n	8004f00 <prvDeleteTCB+0x60>
	__asm volatile
 8004eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eee:	f383 8811 	msr	BASEPRI, r3
 8004ef2:	f3bf 8f6f 	isb	sy
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	60fb      	str	r3, [r7, #12]
}
 8004efc:	bf00      	nop
 8004efe:	e7fe      	b.n	8004efe <prvDeleteTCB+0x5e>
	}
 8004f00:	bf00      	nop
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f0e:	4b0c      	ldr	r3, [pc, #48]	; (8004f40 <prvResetNextTaskUnblockTime+0x38>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d104      	bne.n	8004f22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f18:	4b0a      	ldr	r3, [pc, #40]	; (8004f44 <prvResetNextTaskUnblockTime+0x3c>)
 8004f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f20:	e008      	b.n	8004f34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f22:	4b07      	ldr	r3, [pc, #28]	; (8004f40 <prvResetNextTaskUnblockTime+0x38>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	4a04      	ldr	r2, [pc, #16]	; (8004f44 <prvResetNextTaskUnblockTime+0x3c>)
 8004f32:	6013      	str	r3, [r2, #0]
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	20000dac 	.word	0x20000dac
 8004f44:	20000e14 	.word	0x20000e14

08004f48 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8004f4e:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <xTaskGetCurrentTaskHandle+0x1c>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	607b      	str	r3, [r7, #4]

		return xReturn;
 8004f54:	687b      	ldr	r3, [r7, #4]
	}
 8004f56:	4618      	mov	r0, r3
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	20000920 	.word	0x20000920

08004f68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f6e:	4b0b      	ldr	r3, [pc, #44]	; (8004f9c <xTaskGetSchedulerState+0x34>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d102      	bne.n	8004f7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f76:	2301      	movs	r3, #1
 8004f78:	607b      	str	r3, [r7, #4]
 8004f7a:	e008      	b.n	8004f8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f7c:	4b08      	ldr	r3, [pc, #32]	; (8004fa0 <xTaskGetSchedulerState+0x38>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d102      	bne.n	8004f8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f84:	2302      	movs	r3, #2
 8004f86:	607b      	str	r3, [r7, #4]
 8004f88:	e001      	b.n	8004f8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f8e:	687b      	ldr	r3, [r7, #4]
	}
 8004f90:	4618      	mov	r0, r3
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	20000e00 	.word	0x20000e00
 8004fa0:	20000e1c 	.word	0x20000e1c

08004fa4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d051      	beq.n	800505e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fbe:	4b2a      	ldr	r3, [pc, #168]	; (8005068 <xTaskPriorityInherit+0xc4>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d241      	bcs.n	800504c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	db06      	blt.n	8004fde <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fd0:	4b25      	ldr	r3, [pc, #148]	; (8005068 <xTaskPriorityInherit+0xc4>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	6959      	ldr	r1, [r3, #20]
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4a1f      	ldr	r2, [pc, #124]	; (800506c <xTaskPriorityInherit+0xc8>)
 8004ff0:	4413      	add	r3, r2
 8004ff2:	4299      	cmp	r1, r3
 8004ff4:	d122      	bne.n	800503c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	3304      	adds	r3, #4
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fe fa32 	bl	8003464 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005000:	4b19      	ldr	r3, [pc, #100]	; (8005068 <xTaskPriorityInherit+0xc4>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800500e:	4b18      	ldr	r3, [pc, #96]	; (8005070 <xTaskPriorityInherit+0xcc>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	429a      	cmp	r2, r3
 8005014:	d903      	bls.n	800501e <xTaskPriorityInherit+0x7a>
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501a:	4a15      	ldr	r2, [pc, #84]	; (8005070 <xTaskPriorityInherit+0xcc>)
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005022:	4613      	mov	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4a10      	ldr	r2, [pc, #64]	; (800506c <xTaskPriorityInherit+0xc8>)
 800502c:	441a      	add	r2, r3
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	3304      	adds	r3, #4
 8005032:	4619      	mov	r1, r3
 8005034:	4610      	mov	r0, r2
 8005036:	f7fe f9b8 	bl	80033aa <vListInsertEnd>
 800503a:	e004      	b.n	8005046 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800503c:	4b0a      	ldr	r3, [pc, #40]	; (8005068 <xTaskPriorityInherit+0xc4>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005046:	2301      	movs	r3, #1
 8005048:	60fb      	str	r3, [r7, #12]
 800504a:	e008      	b.n	800505e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005050:	4b05      	ldr	r3, [pc, #20]	; (8005068 <xTaskPriorityInherit+0xc4>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005056:	429a      	cmp	r2, r3
 8005058:	d201      	bcs.n	800505e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800505a:	2301      	movs	r3, #1
 800505c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800505e:	68fb      	ldr	r3, [r7, #12]
	}
 8005060:	4618      	mov	r0, r3
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	20000920 	.word	0x20000920
 800506c:	20000924 	.word	0x20000924
 8005070:	20000dfc 	.word	0x20000dfc

08005074 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005080:	2300      	movs	r3, #0
 8005082:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d056      	beq.n	8005138 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800508a:	4b2e      	ldr	r3, [pc, #184]	; (8005144 <xTaskPriorityDisinherit+0xd0>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	429a      	cmp	r2, r3
 8005092:	d00a      	beq.n	80050aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005098:	f383 8811 	msr	BASEPRI, r3
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	60fb      	str	r3, [r7, #12]
}
 80050a6:	bf00      	nop
 80050a8:	e7fe      	b.n	80050a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10a      	bne.n	80050c8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80050b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b6:	f383 8811 	msr	BASEPRI, r3
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	60bb      	str	r3, [r7, #8]
}
 80050c4:	bf00      	nop
 80050c6:	e7fe      	b.n	80050c6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050cc:	1e5a      	subs	r2, r3, #1
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050da:	429a      	cmp	r2, r3
 80050dc:	d02c      	beq.n	8005138 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d128      	bne.n	8005138 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	3304      	adds	r3, #4
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7fe f9ba 	bl	8003464 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005108:	4b0f      	ldr	r3, [pc, #60]	; (8005148 <xTaskPriorityDisinherit+0xd4>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d903      	bls.n	8005118 <xTaskPriorityDisinherit+0xa4>
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005114:	4a0c      	ldr	r2, [pc, #48]	; (8005148 <xTaskPriorityDisinherit+0xd4>)
 8005116:	6013      	str	r3, [r2, #0]
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800511c:	4613      	mov	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4a09      	ldr	r2, [pc, #36]	; (800514c <xTaskPriorityDisinherit+0xd8>)
 8005126:	441a      	add	r2, r3
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	3304      	adds	r3, #4
 800512c:	4619      	mov	r1, r3
 800512e:	4610      	mov	r0, r2
 8005130:	f7fe f93b 	bl	80033aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005134:	2301      	movs	r3, #1
 8005136:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005138:	697b      	ldr	r3, [r7, #20]
	}
 800513a:	4618      	mov	r0, r3
 800513c:	3718      	adds	r7, #24
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20000920 	.word	0x20000920
 8005148:	20000dfc 	.word	0x20000dfc
 800514c:	20000924 	.word	0x20000924

08005150 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005150:	b580      	push	{r7, lr}
 8005152:	b088      	sub	sp, #32
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800515e:	2301      	movs	r3, #1
 8005160:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d06a      	beq.n	800523e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10a      	bne.n	8005186 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	60fb      	str	r3, [r7, #12]
}
 8005182:	bf00      	nop
 8005184:	e7fe      	b.n	8005184 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	429a      	cmp	r2, r3
 800518e:	d902      	bls.n	8005196 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	61fb      	str	r3, [r7, #28]
 8005194:	e002      	b.n	800519c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800519a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a0:	69fa      	ldr	r2, [r7, #28]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d04b      	beq.n	800523e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d146      	bne.n	800523e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80051b0:	4b25      	ldr	r3, [pc, #148]	; (8005248 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d10a      	bne.n	80051d0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80051ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051be:	f383 8811 	msr	BASEPRI, r3
 80051c2:	f3bf 8f6f 	isb	sy
 80051c6:	f3bf 8f4f 	dsb	sy
 80051ca:	60bb      	str	r3, [r7, #8]
}
 80051cc:	bf00      	nop
 80051ce:	e7fe      	b.n	80051ce <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	69fa      	ldr	r2, [r7, #28]
 80051da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	db04      	blt.n	80051ee <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	6959      	ldr	r1, [r3, #20]
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	4613      	mov	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4413      	add	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4a13      	ldr	r2, [pc, #76]	; (800524c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80051fe:	4413      	add	r3, r2
 8005200:	4299      	cmp	r1, r3
 8005202:	d11c      	bne.n	800523e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	3304      	adds	r3, #4
 8005208:	4618      	mov	r0, r3
 800520a:	f7fe f92b 	bl	8003464 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005212:	4b0f      	ldr	r3, [pc, #60]	; (8005250 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	429a      	cmp	r2, r3
 8005218:	d903      	bls.n	8005222 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521e:	4a0c      	ldr	r2, [pc, #48]	; (8005250 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005220:	6013      	str	r3, [r2, #0]
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005226:	4613      	mov	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4a07      	ldr	r2, [pc, #28]	; (800524c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005230:	441a      	add	r2, r3
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	3304      	adds	r3, #4
 8005236:	4619      	mov	r1, r3
 8005238:	4610      	mov	r0, r2
 800523a:	f7fe f8b6 	bl	80033aa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800523e:	bf00      	nop
 8005240:	3720      	adds	r7, #32
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	20000920 	.word	0x20000920
 800524c:	20000924 	.word	0x20000924
 8005250:	20000dfc 	.word	0x20000dfc

08005254 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005254:	b480      	push	{r7}
 8005256:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005258:	4b07      	ldr	r3, [pc, #28]	; (8005278 <pvTaskIncrementMutexHeldCount+0x24>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d004      	beq.n	800526a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005260:	4b05      	ldr	r3, [pc, #20]	; (8005278 <pvTaskIncrementMutexHeldCount+0x24>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005266:	3201      	adds	r2, #1
 8005268:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800526a:	4b03      	ldr	r3, [pc, #12]	; (8005278 <pvTaskIncrementMutexHeldCount+0x24>)
 800526c:	681b      	ldr	r3, [r3, #0]
	}
 800526e:	4618      	mov	r0, r3
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr
 8005278:	20000920 	.word	0x20000920

0800527c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005286:	4b21      	ldr	r3, [pc, #132]	; (800530c <prvAddCurrentTaskToDelayedList+0x90>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800528c:	4b20      	ldr	r3, [pc, #128]	; (8005310 <prvAddCurrentTaskToDelayedList+0x94>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3304      	adds	r3, #4
 8005292:	4618      	mov	r0, r3
 8005294:	f7fe f8e6 	bl	8003464 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800529e:	d10a      	bne.n	80052b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d007      	beq.n	80052b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052a6:	4b1a      	ldr	r3, [pc, #104]	; (8005310 <prvAddCurrentTaskToDelayedList+0x94>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3304      	adds	r3, #4
 80052ac:	4619      	mov	r1, r3
 80052ae:	4819      	ldr	r0, [pc, #100]	; (8005314 <prvAddCurrentTaskToDelayedList+0x98>)
 80052b0:	f7fe f87b 	bl	80033aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80052b4:	e026      	b.n	8005304 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4413      	add	r3, r2
 80052bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80052be:	4b14      	ldr	r3, [pc, #80]	; (8005310 <prvAddCurrentTaskToDelayedList+0x94>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d209      	bcs.n	80052e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052ce:	4b12      	ldr	r3, [pc, #72]	; (8005318 <prvAddCurrentTaskToDelayedList+0x9c>)
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	4b0f      	ldr	r3, [pc, #60]	; (8005310 <prvAddCurrentTaskToDelayedList+0x94>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	3304      	adds	r3, #4
 80052d8:	4619      	mov	r1, r3
 80052da:	4610      	mov	r0, r2
 80052dc:	f7fe f889 	bl	80033f2 <vListInsert>
}
 80052e0:	e010      	b.n	8005304 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052e2:	4b0e      	ldr	r3, [pc, #56]	; (800531c <prvAddCurrentTaskToDelayedList+0xa0>)
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	4b0a      	ldr	r3, [pc, #40]	; (8005310 <prvAddCurrentTaskToDelayedList+0x94>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	3304      	adds	r3, #4
 80052ec:	4619      	mov	r1, r3
 80052ee:	4610      	mov	r0, r2
 80052f0:	f7fe f87f 	bl	80033f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80052f4:	4b0a      	ldr	r3, [pc, #40]	; (8005320 <prvAddCurrentTaskToDelayedList+0xa4>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d202      	bcs.n	8005304 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80052fe:	4a08      	ldr	r2, [pc, #32]	; (8005320 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	6013      	str	r3, [r2, #0]
}
 8005304:	bf00      	nop
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	20000df8 	.word	0x20000df8
 8005310:	20000920 	.word	0x20000920
 8005314:	20000de0 	.word	0x20000de0
 8005318:	20000db0 	.word	0x20000db0
 800531c:	20000dac 	.word	0x20000dac
 8005320:	20000e14 	.word	0x20000e14

08005324 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b08a      	sub	sp, #40	; 0x28
 8005328:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800532a:	2300      	movs	r3, #0
 800532c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800532e:	f000 fb07 	bl	8005940 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005332:	4b1c      	ldr	r3, [pc, #112]	; (80053a4 <xTimerCreateTimerTask+0x80>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d021      	beq.n	800537e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800533a:	2300      	movs	r3, #0
 800533c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800533e:	2300      	movs	r3, #0
 8005340:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005342:	1d3a      	adds	r2, r7, #4
 8005344:	f107 0108 	add.w	r1, r7, #8
 8005348:	f107 030c 	add.w	r3, r7, #12
 800534c:	4618      	mov	r0, r3
 800534e:	f7fd ffe5 	bl	800331c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005352:	6879      	ldr	r1, [r7, #4]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	9202      	str	r2, [sp, #8]
 800535a:	9301      	str	r3, [sp, #4]
 800535c:	2302      	movs	r3, #2
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	2300      	movs	r3, #0
 8005362:	460a      	mov	r2, r1
 8005364:	4910      	ldr	r1, [pc, #64]	; (80053a8 <xTimerCreateTimerTask+0x84>)
 8005366:	4811      	ldr	r0, [pc, #68]	; (80053ac <xTimerCreateTimerTask+0x88>)
 8005368:	f7fe ffa6 	bl	80042b8 <xTaskCreateStatic>
 800536c:	4603      	mov	r3, r0
 800536e:	4a10      	ldr	r2, [pc, #64]	; (80053b0 <xTimerCreateTimerTask+0x8c>)
 8005370:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005372:	4b0f      	ldr	r3, [pc, #60]	; (80053b0 <xTimerCreateTimerTask+0x8c>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800537a:	2301      	movs	r3, #1
 800537c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10a      	bne.n	800539a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005388:	f383 8811 	msr	BASEPRI, r3
 800538c:	f3bf 8f6f 	isb	sy
 8005390:	f3bf 8f4f 	dsb	sy
 8005394:	613b      	str	r3, [r7, #16]
}
 8005396:	bf00      	nop
 8005398:	e7fe      	b.n	8005398 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800539a:	697b      	ldr	r3, [r7, #20]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	20000e50 	.word	0x20000e50
 80053a8:	080065d4 	.word	0x080065d4
 80053ac:	080054e9 	.word	0x080054e9
 80053b0:	20000e54 	.word	0x20000e54

080053b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b08a      	sub	sp, #40	; 0x28
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
 80053c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80053c2:	2300      	movs	r3, #0
 80053c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10a      	bne.n	80053e2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80053cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	623b      	str	r3, [r7, #32]
}
 80053de:	bf00      	nop
 80053e0:	e7fe      	b.n	80053e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80053e2:	4b1a      	ldr	r3, [pc, #104]	; (800544c <xTimerGenericCommand+0x98>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d02a      	beq.n	8005440 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2b05      	cmp	r3, #5
 80053fa:	dc18      	bgt.n	800542e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80053fc:	f7ff fdb4 	bl	8004f68 <xTaskGetSchedulerState>
 8005400:	4603      	mov	r3, r0
 8005402:	2b02      	cmp	r3, #2
 8005404:	d109      	bne.n	800541a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005406:	4b11      	ldr	r3, [pc, #68]	; (800544c <xTimerGenericCommand+0x98>)
 8005408:	6818      	ldr	r0, [r3, #0]
 800540a:	f107 0110 	add.w	r1, r7, #16
 800540e:	2300      	movs	r3, #0
 8005410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005412:	f7fe fa45 	bl	80038a0 <xQueueGenericSend>
 8005416:	6278      	str	r0, [r7, #36]	; 0x24
 8005418:	e012      	b.n	8005440 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800541a:	4b0c      	ldr	r3, [pc, #48]	; (800544c <xTimerGenericCommand+0x98>)
 800541c:	6818      	ldr	r0, [r3, #0]
 800541e:	f107 0110 	add.w	r1, r7, #16
 8005422:	2300      	movs	r3, #0
 8005424:	2200      	movs	r2, #0
 8005426:	f7fe fa3b 	bl	80038a0 <xQueueGenericSend>
 800542a:	6278      	str	r0, [r7, #36]	; 0x24
 800542c:	e008      	b.n	8005440 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800542e:	4b07      	ldr	r3, [pc, #28]	; (800544c <xTimerGenericCommand+0x98>)
 8005430:	6818      	ldr	r0, [r3, #0]
 8005432:	f107 0110 	add.w	r1, r7, #16
 8005436:	2300      	movs	r3, #0
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	f7fe fb2f 	bl	8003a9c <xQueueGenericSendFromISR>
 800543e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005442:	4618      	mov	r0, r3
 8005444:	3728      	adds	r7, #40	; 0x28
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	20000e50 	.word	0x20000e50

08005450 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b088      	sub	sp, #32
 8005454:	af02      	add	r7, sp, #8
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800545a:	4b22      	ldr	r3, [pc, #136]	; (80054e4 <prvProcessExpiredTimer+0x94>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	3304      	adds	r3, #4
 8005468:	4618      	mov	r0, r3
 800546a:	f7fd fffb 	bl	8003464 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005474:	f003 0304 	and.w	r3, r3, #4
 8005478:	2b00      	cmp	r3, #0
 800547a:	d022      	beq.n	80054c2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	699a      	ldr	r2, [r3, #24]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	18d1      	adds	r1, r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	6978      	ldr	r0, [r7, #20]
 800548a:	f000 f8d1 	bl	8005630 <prvInsertTimerInActiveList>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d01f      	beq.n	80054d4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005494:	2300      	movs	r3, #0
 8005496:	9300      	str	r3, [sp, #0]
 8005498:	2300      	movs	r3, #0
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	2100      	movs	r1, #0
 800549e:	6978      	ldr	r0, [r7, #20]
 80054a0:	f7ff ff88 	bl	80053b4 <xTimerGenericCommand>
 80054a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d113      	bne.n	80054d4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80054ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b0:	f383 8811 	msr	BASEPRI, r3
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	60fb      	str	r3, [r7, #12]
}
 80054be:	bf00      	nop
 80054c0:	e7fe      	b.n	80054c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054c8:	f023 0301 	bic.w	r3, r3, #1
 80054cc:	b2da      	uxtb	r2, r3
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	6978      	ldr	r0, [r7, #20]
 80054da:	4798      	blx	r3
}
 80054dc:	bf00      	nop
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	20000e48 	.word	0x20000e48

080054e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80054f0:	f107 0308 	add.w	r3, r7, #8
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 f857 	bl	80055a8 <prvGetNextExpireTime>
 80054fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	4619      	mov	r1, r3
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 f803 	bl	800550c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005506:	f000 f8d5 	bl	80056b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800550a:	e7f1      	b.n	80054f0 <prvTimerTask+0x8>

0800550c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005516:	f7ff f92b 	bl	8004770 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800551a:	f107 0308 	add.w	r3, r7, #8
 800551e:	4618      	mov	r0, r3
 8005520:	f000 f866 	bl	80055f0 <prvSampleTimeNow>
 8005524:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d130      	bne.n	800558e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10a      	bne.n	8005548 <prvProcessTimerOrBlockTask+0x3c>
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	429a      	cmp	r2, r3
 8005538:	d806      	bhi.n	8005548 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800553a:	f7ff f927 	bl	800478c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800553e:	68f9      	ldr	r1, [r7, #12]
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f7ff ff85 	bl	8005450 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005546:	e024      	b.n	8005592 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d008      	beq.n	8005560 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800554e:	4b13      	ldr	r3, [pc, #76]	; (800559c <prvProcessTimerOrBlockTask+0x90>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <prvProcessTimerOrBlockTask+0x50>
 8005558:	2301      	movs	r3, #1
 800555a:	e000      	b.n	800555e <prvProcessTimerOrBlockTask+0x52>
 800555c:	2300      	movs	r3, #0
 800555e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005560:	4b0f      	ldr	r3, [pc, #60]	; (80055a0 <prvProcessTimerOrBlockTask+0x94>)
 8005562:	6818      	ldr	r0, [r3, #0]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	4619      	mov	r1, r3
 800556e:	f7fe fe6f 	bl	8004250 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005572:	f7ff f90b 	bl	800478c <xTaskResumeAll>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10a      	bne.n	8005592 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800557c:	4b09      	ldr	r3, [pc, #36]	; (80055a4 <prvProcessTimerOrBlockTask+0x98>)
 800557e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	f3bf 8f6f 	isb	sy
}
 800558c:	e001      	b.n	8005592 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800558e:	f7ff f8fd 	bl	800478c <xTaskResumeAll>
}
 8005592:	bf00      	nop
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	20000e4c 	.word	0x20000e4c
 80055a0:	20000e50 	.word	0x20000e50
 80055a4:	e000ed04 	.word	0xe000ed04

080055a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80055b0:	4b0e      	ldr	r3, [pc, #56]	; (80055ec <prvGetNextExpireTime+0x44>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <prvGetNextExpireTime+0x16>
 80055ba:	2201      	movs	r2, #1
 80055bc:	e000      	b.n	80055c0 <prvGetNextExpireTime+0x18>
 80055be:	2200      	movs	r2, #0
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d105      	bne.n	80055d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055cc:	4b07      	ldr	r3, [pc, #28]	; (80055ec <prvGetNextExpireTime+0x44>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	60fb      	str	r3, [r7, #12]
 80055d6:	e001      	b.n	80055dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80055d8:	2300      	movs	r3, #0
 80055da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80055dc:	68fb      	ldr	r3, [r7, #12]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	20000e48 	.word	0x20000e48

080055f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80055f8:	f7ff f966 	bl	80048c8 <xTaskGetTickCount>
 80055fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80055fe:	4b0b      	ldr	r3, [pc, #44]	; (800562c <prvSampleTimeNow+0x3c>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	429a      	cmp	r2, r3
 8005606:	d205      	bcs.n	8005614 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005608:	f000 f936 	bl	8005878 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	601a      	str	r2, [r3, #0]
 8005612:	e002      	b.n	800561a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800561a:	4a04      	ldr	r2, [pc, #16]	; (800562c <prvSampleTimeNow+0x3c>)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005620:	68fb      	ldr	r3, [r7, #12]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	20000e58 	.word	0x20000e58

08005630 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
 800563c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800563e:	2300      	movs	r3, #0
 8005640:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	429a      	cmp	r2, r3
 8005654:	d812      	bhi.n	800567c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	1ad2      	subs	r2, r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	429a      	cmp	r2, r3
 8005662:	d302      	bcc.n	800566a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005664:	2301      	movs	r3, #1
 8005666:	617b      	str	r3, [r7, #20]
 8005668:	e01b      	b.n	80056a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800566a:	4b10      	ldr	r3, [pc, #64]	; (80056ac <prvInsertTimerInActiveList+0x7c>)
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	3304      	adds	r3, #4
 8005672:	4619      	mov	r1, r3
 8005674:	4610      	mov	r0, r2
 8005676:	f7fd febc 	bl	80033f2 <vListInsert>
 800567a:	e012      	b.n	80056a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	429a      	cmp	r2, r3
 8005682:	d206      	bcs.n	8005692 <prvInsertTimerInActiveList+0x62>
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	429a      	cmp	r2, r3
 800568a:	d302      	bcc.n	8005692 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800568c:	2301      	movs	r3, #1
 800568e:	617b      	str	r3, [r7, #20]
 8005690:	e007      	b.n	80056a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005692:	4b07      	ldr	r3, [pc, #28]	; (80056b0 <prvInsertTimerInActiveList+0x80>)
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	3304      	adds	r3, #4
 800569a:	4619      	mov	r1, r3
 800569c:	4610      	mov	r0, r2
 800569e:	f7fd fea8 	bl	80033f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80056a2:	697b      	ldr	r3, [r7, #20]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3718      	adds	r7, #24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	20000e4c 	.word	0x20000e4c
 80056b0:	20000e48 	.word	0x20000e48

080056b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b08e      	sub	sp, #56	; 0x38
 80056b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80056ba:	e0ca      	b.n	8005852 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	da18      	bge.n	80056f4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80056c2:	1d3b      	adds	r3, r7, #4
 80056c4:	3304      	adds	r3, #4
 80056c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80056c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10a      	bne.n	80056e4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80056ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	61fb      	str	r3, [r7, #28]
}
 80056e0:	bf00      	nop
 80056e2:	e7fe      	b.n	80056e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80056e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056ea:	6850      	ldr	r0, [r2, #4]
 80056ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056ee:	6892      	ldr	r2, [r2, #8]
 80056f0:	4611      	mov	r1, r2
 80056f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f2c0 80aa 	blt.w	8005850 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005702:	695b      	ldr	r3, [r3, #20]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d004      	beq.n	8005712 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570a:	3304      	adds	r3, #4
 800570c:	4618      	mov	r0, r3
 800570e:	f7fd fea9 	bl	8003464 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005712:	463b      	mov	r3, r7
 8005714:	4618      	mov	r0, r3
 8005716:	f7ff ff6b 	bl	80055f0 <prvSampleTimeNow>
 800571a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b09      	cmp	r3, #9
 8005720:	f200 8097 	bhi.w	8005852 <prvProcessReceivedCommands+0x19e>
 8005724:	a201      	add	r2, pc, #4	; (adr r2, 800572c <prvProcessReceivedCommands+0x78>)
 8005726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572a:	bf00      	nop
 800572c:	08005755 	.word	0x08005755
 8005730:	08005755 	.word	0x08005755
 8005734:	08005755 	.word	0x08005755
 8005738:	080057c9 	.word	0x080057c9
 800573c:	080057dd 	.word	0x080057dd
 8005740:	08005827 	.word	0x08005827
 8005744:	08005755 	.word	0x08005755
 8005748:	08005755 	.word	0x08005755
 800574c:	080057c9 	.word	0x080057c9
 8005750:	080057dd 	.word	0x080057dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005756:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800575a:	f043 0301 	orr.w	r3, r3, #1
 800575e:	b2da      	uxtb	r2, r3
 8005760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005762:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	18d1      	adds	r1, r2, r3
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005772:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005774:	f7ff ff5c 	bl	8005630 <prvInsertTimerInActiveList>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d069      	beq.n	8005852 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800577e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005784:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005788:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800578c:	f003 0304 	and.w	r3, r3, #4
 8005790:	2b00      	cmp	r3, #0
 8005792:	d05e      	beq.n	8005852 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	441a      	add	r2, r3
 800579c:	2300      	movs	r3, #0
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	2300      	movs	r3, #0
 80057a2:	2100      	movs	r1, #0
 80057a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057a6:	f7ff fe05 	bl	80053b4 <xTimerGenericCommand>
 80057aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d14f      	bne.n	8005852 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80057b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b6:	f383 8811 	msr	BASEPRI, r3
 80057ba:	f3bf 8f6f 	isb	sy
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	61bb      	str	r3, [r7, #24]
}
 80057c4:	bf00      	nop
 80057c6:	e7fe      	b.n	80057c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057ce:	f023 0301 	bic.w	r3, r3, #1
 80057d2:	b2da      	uxtb	r2, r3
 80057d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80057da:	e03a      	b.n	8005852 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80057dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057e2:	f043 0301 	orr.w	r3, r3, #1
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80057f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10a      	bne.n	8005812 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80057fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005800:	f383 8811 	msr	BASEPRI, r3
 8005804:	f3bf 8f6f 	isb	sy
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	617b      	str	r3, [r7, #20]
}
 800580e:	bf00      	nop
 8005810:	e7fe      	b.n	8005810 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005814:	699a      	ldr	r2, [r3, #24]
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005818:	18d1      	adds	r1, r2, r3
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800581e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005820:	f7ff ff06 	bl	8005630 <prvInsertTimerInActiveList>
					break;
 8005824:	e015      	b.n	8005852 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005828:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800582c:	f003 0302 	and.w	r3, r3, #2
 8005830:	2b00      	cmp	r3, #0
 8005832:	d103      	bne.n	800583c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005836:	f000 fbdb 	bl	8005ff0 <vPortFree>
 800583a:	e00a      	b.n	8005852 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800583c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005842:	f023 0301 	bic.w	r3, r3, #1
 8005846:	b2da      	uxtb	r2, r3
 8005848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800584e:	e000      	b.n	8005852 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005850:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005852:	4b08      	ldr	r3, [pc, #32]	; (8005874 <prvProcessReceivedCommands+0x1c0>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	1d39      	adds	r1, r7, #4
 8005858:	2200      	movs	r2, #0
 800585a:	4618      	mov	r0, r3
 800585c:	f7fe f9ba 	bl	8003bd4 <xQueueReceive>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	f47f af2a 	bne.w	80056bc <prvProcessReceivedCommands+0x8>
	}
}
 8005868:	bf00      	nop
 800586a:	bf00      	nop
 800586c:	3730      	adds	r7, #48	; 0x30
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	20000e50 	.word	0x20000e50

08005878 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b088      	sub	sp, #32
 800587c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800587e:	e048      	b.n	8005912 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005880:	4b2d      	ldr	r3, [pc, #180]	; (8005938 <prvSwitchTimerLists+0xc0>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800588a:	4b2b      	ldr	r3, [pc, #172]	; (8005938 <prvSwitchTimerLists+0xc0>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	3304      	adds	r3, #4
 8005898:	4618      	mov	r0, r3
 800589a:	f7fd fde3 	bl	8003464 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d02e      	beq.n	8005912 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	4413      	add	r3, r2
 80058bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d90e      	bls.n	80058e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80058d2:	4b19      	ldr	r3, [pc, #100]	; (8005938 <prvSwitchTimerLists+0xc0>)
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	3304      	adds	r3, #4
 80058da:	4619      	mov	r1, r3
 80058dc:	4610      	mov	r0, r2
 80058de:	f7fd fd88 	bl	80033f2 <vListInsert>
 80058e2:	e016      	b.n	8005912 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80058e4:	2300      	movs	r3, #0
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	2300      	movs	r3, #0
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	2100      	movs	r1, #0
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f7ff fd60 	bl	80053b4 <xTimerGenericCommand>
 80058f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10a      	bne.n	8005912 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	603b      	str	r3, [r7, #0]
}
 800590e:	bf00      	nop
 8005910:	e7fe      	b.n	8005910 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005912:	4b09      	ldr	r3, [pc, #36]	; (8005938 <prvSwitchTimerLists+0xc0>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1b1      	bne.n	8005880 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800591c:	4b06      	ldr	r3, [pc, #24]	; (8005938 <prvSwitchTimerLists+0xc0>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005922:	4b06      	ldr	r3, [pc, #24]	; (800593c <prvSwitchTimerLists+0xc4>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a04      	ldr	r2, [pc, #16]	; (8005938 <prvSwitchTimerLists+0xc0>)
 8005928:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800592a:	4a04      	ldr	r2, [pc, #16]	; (800593c <prvSwitchTimerLists+0xc4>)
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	6013      	str	r3, [r2, #0]
}
 8005930:	bf00      	nop
 8005932:	3718      	adds	r7, #24
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	20000e48 	.word	0x20000e48
 800593c:	20000e4c 	.word	0x20000e4c

08005940 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005946:	f000 f965 	bl	8005c14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800594a:	4b15      	ldr	r3, [pc, #84]	; (80059a0 <prvCheckForValidListAndQueue+0x60>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d120      	bne.n	8005994 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005952:	4814      	ldr	r0, [pc, #80]	; (80059a4 <prvCheckForValidListAndQueue+0x64>)
 8005954:	f7fd fcfc 	bl	8003350 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005958:	4813      	ldr	r0, [pc, #76]	; (80059a8 <prvCheckForValidListAndQueue+0x68>)
 800595a:	f7fd fcf9 	bl	8003350 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800595e:	4b13      	ldr	r3, [pc, #76]	; (80059ac <prvCheckForValidListAndQueue+0x6c>)
 8005960:	4a10      	ldr	r2, [pc, #64]	; (80059a4 <prvCheckForValidListAndQueue+0x64>)
 8005962:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005964:	4b12      	ldr	r3, [pc, #72]	; (80059b0 <prvCheckForValidListAndQueue+0x70>)
 8005966:	4a10      	ldr	r2, [pc, #64]	; (80059a8 <prvCheckForValidListAndQueue+0x68>)
 8005968:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800596a:	2300      	movs	r3, #0
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	4b11      	ldr	r3, [pc, #68]	; (80059b4 <prvCheckForValidListAndQueue+0x74>)
 8005970:	4a11      	ldr	r2, [pc, #68]	; (80059b8 <prvCheckForValidListAndQueue+0x78>)
 8005972:	2110      	movs	r1, #16
 8005974:	200a      	movs	r0, #10
 8005976:	f7fd fe07 	bl	8003588 <xQueueGenericCreateStatic>
 800597a:	4603      	mov	r3, r0
 800597c:	4a08      	ldr	r2, [pc, #32]	; (80059a0 <prvCheckForValidListAndQueue+0x60>)
 800597e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005980:	4b07      	ldr	r3, [pc, #28]	; (80059a0 <prvCheckForValidListAndQueue+0x60>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d005      	beq.n	8005994 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005988:	4b05      	ldr	r3, [pc, #20]	; (80059a0 <prvCheckForValidListAndQueue+0x60>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	490b      	ldr	r1, [pc, #44]	; (80059bc <prvCheckForValidListAndQueue+0x7c>)
 800598e:	4618      	mov	r0, r3
 8005990:	f7fe fc34 	bl	80041fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005994:	f000 f96e 	bl	8005c74 <vPortExitCritical>
}
 8005998:	bf00      	nop
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	20000e50 	.word	0x20000e50
 80059a4:	20000e20 	.word	0x20000e20
 80059a8:	20000e34 	.word	0x20000e34
 80059ac:	20000e48 	.word	0x20000e48
 80059b0:	20000e4c 	.word	0x20000e4c
 80059b4:	20000efc 	.word	0x20000efc
 80059b8:	20000e5c 	.word	0x20000e5c
 80059bc:	080065dc 	.word	0x080065dc

080059c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	3b04      	subs	r3, #4
 80059d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80059d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	3b04      	subs	r3, #4
 80059de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	f023 0201 	bic.w	r2, r3, #1
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	3b04      	subs	r3, #4
 80059ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80059f0:	4a0c      	ldr	r2, [pc, #48]	; (8005a24 <pxPortInitialiseStack+0x64>)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	3b14      	subs	r3, #20
 80059fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	3b04      	subs	r3, #4
 8005a06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f06f 0202 	mvn.w	r2, #2
 8005a0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	3b20      	subs	r3, #32
 8005a14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a16:	68fb      	ldr	r3, [r7, #12]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3714      	adds	r7, #20
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	08005a29 	.word	0x08005a29

08005a28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a32:	4b12      	ldr	r3, [pc, #72]	; (8005a7c <prvTaskExitError+0x54>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3a:	d00a      	beq.n	8005a52 <prvTaskExitError+0x2a>
	__asm volatile
 8005a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a40:	f383 8811 	msr	BASEPRI, r3
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	60fb      	str	r3, [r7, #12]
}
 8005a4e:	bf00      	nop
 8005a50:	e7fe      	b.n	8005a50 <prvTaskExitError+0x28>
	__asm volatile
 8005a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a56:	f383 8811 	msr	BASEPRI, r3
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	60bb      	str	r3, [r7, #8]
}
 8005a64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005a66:	bf00      	nop
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d0fc      	beq.n	8005a68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005a6e:	bf00      	nop
 8005a70:	bf00      	nop
 8005a72:	3714      	adds	r7, #20
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	2000000c 	.word	0x2000000c

08005a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005a80:	4b07      	ldr	r3, [pc, #28]	; (8005aa0 <pxCurrentTCBConst2>)
 8005a82:	6819      	ldr	r1, [r3, #0]
 8005a84:	6808      	ldr	r0, [r1, #0]
 8005a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a8a:	f380 8809 	msr	PSP, r0
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f04f 0000 	mov.w	r0, #0
 8005a96:	f380 8811 	msr	BASEPRI, r0
 8005a9a:	4770      	bx	lr
 8005a9c:	f3af 8000 	nop.w

08005aa0 <pxCurrentTCBConst2>:
 8005aa0:	20000920 	.word	0x20000920
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005aa4:	bf00      	nop
 8005aa6:	bf00      	nop

08005aa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005aa8:	4808      	ldr	r0, [pc, #32]	; (8005acc <prvPortStartFirstTask+0x24>)
 8005aaa:	6800      	ldr	r0, [r0, #0]
 8005aac:	6800      	ldr	r0, [r0, #0]
 8005aae:	f380 8808 	msr	MSP, r0
 8005ab2:	f04f 0000 	mov.w	r0, #0
 8005ab6:	f380 8814 	msr	CONTROL, r0
 8005aba:	b662      	cpsie	i
 8005abc:	b661      	cpsie	f
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	f3bf 8f6f 	isb	sy
 8005ac6:	df00      	svc	0
 8005ac8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005aca:	bf00      	nop
 8005acc:	e000ed08 	.word	0xe000ed08

08005ad0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ad6:	4b46      	ldr	r3, [pc, #280]	; (8005bf0 <xPortStartScheduler+0x120>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a46      	ldr	r2, [pc, #280]	; (8005bf4 <xPortStartScheduler+0x124>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d10a      	bne.n	8005af6 <xPortStartScheduler+0x26>
	__asm volatile
 8005ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	613b      	str	r3, [r7, #16]
}
 8005af2:	bf00      	nop
 8005af4:	e7fe      	b.n	8005af4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005af6:	4b3e      	ldr	r3, [pc, #248]	; (8005bf0 <xPortStartScheduler+0x120>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a3f      	ldr	r2, [pc, #252]	; (8005bf8 <xPortStartScheduler+0x128>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d10a      	bne.n	8005b16 <xPortStartScheduler+0x46>
	__asm volatile
 8005b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	60fb      	str	r3, [r7, #12]
}
 8005b12:	bf00      	nop
 8005b14:	e7fe      	b.n	8005b14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b16:	4b39      	ldr	r3, [pc, #228]	; (8005bfc <xPortStartScheduler+0x12c>)
 8005b18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	22ff      	movs	r2, #255	; 0xff
 8005b26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b30:	78fb      	ldrb	r3, [r7, #3]
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	4b31      	ldr	r3, [pc, #196]	; (8005c00 <xPortStartScheduler+0x130>)
 8005b3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b3e:	4b31      	ldr	r3, [pc, #196]	; (8005c04 <xPortStartScheduler+0x134>)
 8005b40:	2207      	movs	r2, #7
 8005b42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b44:	e009      	b.n	8005b5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005b46:	4b2f      	ldr	r3, [pc, #188]	; (8005c04 <xPortStartScheduler+0x134>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	4a2d      	ldr	r2, [pc, #180]	; (8005c04 <xPortStartScheduler+0x134>)
 8005b4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005b50:	78fb      	ldrb	r3, [r7, #3]
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b5a:	78fb      	ldrb	r3, [r7, #3]
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b62:	2b80      	cmp	r3, #128	; 0x80
 8005b64:	d0ef      	beq.n	8005b46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005b66:	4b27      	ldr	r3, [pc, #156]	; (8005c04 <xPortStartScheduler+0x134>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f1c3 0307 	rsb	r3, r3, #7
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	d00a      	beq.n	8005b88 <xPortStartScheduler+0xb8>
	__asm volatile
 8005b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	60bb      	str	r3, [r7, #8]
}
 8005b84:	bf00      	nop
 8005b86:	e7fe      	b.n	8005b86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005b88:	4b1e      	ldr	r3, [pc, #120]	; (8005c04 <xPortStartScheduler+0x134>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	021b      	lsls	r3, r3, #8
 8005b8e:	4a1d      	ldr	r2, [pc, #116]	; (8005c04 <xPortStartScheduler+0x134>)
 8005b90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b92:	4b1c      	ldr	r3, [pc, #112]	; (8005c04 <xPortStartScheduler+0x134>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b9a:	4a1a      	ldr	r2, [pc, #104]	; (8005c04 <xPortStartScheduler+0x134>)
 8005b9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ba6:	4b18      	ldr	r3, [pc, #96]	; (8005c08 <xPortStartScheduler+0x138>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a17      	ldr	r2, [pc, #92]	; (8005c08 <xPortStartScheduler+0x138>)
 8005bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005bb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005bb2:	4b15      	ldr	r3, [pc, #84]	; (8005c08 <xPortStartScheduler+0x138>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a14      	ldr	r2, [pc, #80]	; (8005c08 <xPortStartScheduler+0x138>)
 8005bb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005bbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005bbe:	f000 f8dd 	bl	8005d7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005bc2:	4b12      	ldr	r3, [pc, #72]	; (8005c0c <xPortStartScheduler+0x13c>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005bc8:	f000 f8fc 	bl	8005dc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005bcc:	4b10      	ldr	r3, [pc, #64]	; (8005c10 <xPortStartScheduler+0x140>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a0f      	ldr	r2, [pc, #60]	; (8005c10 <xPortStartScheduler+0x140>)
 8005bd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005bd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005bd8:	f7ff ff66 	bl	8005aa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005bdc:	f7fe ff3e 	bl	8004a5c <vTaskSwitchContext>
	prvTaskExitError();
 8005be0:	f7ff ff22 	bl	8005a28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3718      	adds	r7, #24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	e000ed00 	.word	0xe000ed00
 8005bf4:	410fc271 	.word	0x410fc271
 8005bf8:	410fc270 	.word	0x410fc270
 8005bfc:	e000e400 	.word	0xe000e400
 8005c00:	20000f4c 	.word	0x20000f4c
 8005c04:	20000f50 	.word	0x20000f50
 8005c08:	e000ed20 	.word	0xe000ed20
 8005c0c:	2000000c 	.word	0x2000000c
 8005c10:	e000ef34 	.word	0xe000ef34

08005c14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
	__asm volatile
 8005c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1e:	f383 8811 	msr	BASEPRI, r3
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	f3bf 8f4f 	dsb	sy
 8005c2a:	607b      	str	r3, [r7, #4]
}
 8005c2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c2e:	4b0f      	ldr	r3, [pc, #60]	; (8005c6c <vPortEnterCritical+0x58>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	3301      	adds	r3, #1
 8005c34:	4a0d      	ldr	r2, [pc, #52]	; (8005c6c <vPortEnterCritical+0x58>)
 8005c36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005c38:	4b0c      	ldr	r3, [pc, #48]	; (8005c6c <vPortEnterCritical+0x58>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d10f      	bne.n	8005c60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c40:	4b0b      	ldr	r3, [pc, #44]	; (8005c70 <vPortEnterCritical+0x5c>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00a      	beq.n	8005c60 <vPortEnterCritical+0x4c>
	__asm volatile
 8005c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4e:	f383 8811 	msr	BASEPRI, r3
 8005c52:	f3bf 8f6f 	isb	sy
 8005c56:	f3bf 8f4f 	dsb	sy
 8005c5a:	603b      	str	r3, [r7, #0]
}
 8005c5c:	bf00      	nop
 8005c5e:	e7fe      	b.n	8005c5e <vPortEnterCritical+0x4a>
	}
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr
 8005c6c:	2000000c 	.word	0x2000000c
 8005c70:	e000ed04 	.word	0xe000ed04

08005c74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005c7a:	4b12      	ldr	r3, [pc, #72]	; (8005cc4 <vPortExitCritical+0x50>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10a      	bne.n	8005c98 <vPortExitCritical+0x24>
	__asm volatile
 8005c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c86:	f383 8811 	msr	BASEPRI, r3
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	607b      	str	r3, [r7, #4]
}
 8005c94:	bf00      	nop
 8005c96:	e7fe      	b.n	8005c96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005c98:	4b0a      	ldr	r3, [pc, #40]	; (8005cc4 <vPortExitCritical+0x50>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	4a09      	ldr	r2, [pc, #36]	; (8005cc4 <vPortExitCritical+0x50>)
 8005ca0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005ca2:	4b08      	ldr	r3, [pc, #32]	; (8005cc4 <vPortExitCritical+0x50>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d105      	bne.n	8005cb6 <vPortExitCritical+0x42>
 8005caa:	2300      	movs	r3, #0
 8005cac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	f383 8811 	msr	BASEPRI, r3
}
 8005cb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005cb6:	bf00      	nop
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	2000000c 	.word	0x2000000c
	...

08005cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005cd0:	f3ef 8009 	mrs	r0, PSP
 8005cd4:	f3bf 8f6f 	isb	sy
 8005cd8:	4b15      	ldr	r3, [pc, #84]	; (8005d30 <pxCurrentTCBConst>)
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	f01e 0f10 	tst.w	lr, #16
 8005ce0:	bf08      	it	eq
 8005ce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cea:	6010      	str	r0, [r2, #0]
 8005cec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005cf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005cf4:	f380 8811 	msr	BASEPRI, r0
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	f7fe feac 	bl	8004a5c <vTaskSwitchContext>
 8005d04:	f04f 0000 	mov.w	r0, #0
 8005d08:	f380 8811 	msr	BASEPRI, r0
 8005d0c:	bc09      	pop	{r0, r3}
 8005d0e:	6819      	ldr	r1, [r3, #0]
 8005d10:	6808      	ldr	r0, [r1, #0]
 8005d12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d16:	f01e 0f10 	tst.w	lr, #16
 8005d1a:	bf08      	it	eq
 8005d1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d20:	f380 8809 	msr	PSP, r0
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	f3af 8000 	nop.w

08005d30 <pxCurrentTCBConst>:
 8005d30:	20000920 	.word	0x20000920
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005d34:	bf00      	nop
 8005d36:	bf00      	nop

08005d38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	607b      	str	r3, [r7, #4]
}
 8005d50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d52:	f7fe fdc9 	bl	80048e8 <xTaskIncrementTick>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d003      	beq.n	8005d64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d5c:	4b06      	ldr	r3, [pc, #24]	; (8005d78 <xPortSysTickHandler+0x40>)
 8005d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	2300      	movs	r3, #0
 8005d66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	f383 8811 	msr	BASEPRI, r3
}
 8005d6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005d70:	bf00      	nop
 8005d72:	3708      	adds	r7, #8
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	e000ed04 	.word	0xe000ed04

08005d7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005d80:	4b0b      	ldr	r3, [pc, #44]	; (8005db0 <vPortSetupTimerInterrupt+0x34>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d86:	4b0b      	ldr	r3, [pc, #44]	; (8005db4 <vPortSetupTimerInterrupt+0x38>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d8c:	4b0a      	ldr	r3, [pc, #40]	; (8005db8 <vPortSetupTimerInterrupt+0x3c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a0a      	ldr	r2, [pc, #40]	; (8005dbc <vPortSetupTimerInterrupt+0x40>)
 8005d92:	fba2 2303 	umull	r2, r3, r2, r3
 8005d96:	099b      	lsrs	r3, r3, #6
 8005d98:	4a09      	ldr	r2, [pc, #36]	; (8005dc0 <vPortSetupTimerInterrupt+0x44>)
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d9e:	4b04      	ldr	r3, [pc, #16]	; (8005db0 <vPortSetupTimerInterrupt+0x34>)
 8005da0:	2207      	movs	r2, #7
 8005da2:	601a      	str	r2, [r3, #0]
}
 8005da4:	bf00      	nop
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	e000e010 	.word	0xe000e010
 8005db4:	e000e018 	.word	0xe000e018
 8005db8:	20000000 	.word	0x20000000
 8005dbc:	10624dd3 	.word	0x10624dd3
 8005dc0:	e000e014 	.word	0xe000e014

08005dc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005dc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005dd4 <vPortEnableVFP+0x10>
 8005dc8:	6801      	ldr	r1, [r0, #0]
 8005dca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005dce:	6001      	str	r1, [r0, #0]
 8005dd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005dd2:	bf00      	nop
 8005dd4:	e000ed88 	.word	0xe000ed88

08005dd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005dde:	f3ef 8305 	mrs	r3, IPSR
 8005de2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2b0f      	cmp	r3, #15
 8005de8:	d914      	bls.n	8005e14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005dea:	4a17      	ldr	r2, [pc, #92]	; (8005e48 <vPortValidateInterruptPriority+0x70>)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4413      	add	r3, r2
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005df4:	4b15      	ldr	r3, [pc, #84]	; (8005e4c <vPortValidateInterruptPriority+0x74>)
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	7afa      	ldrb	r2, [r7, #11]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d20a      	bcs.n	8005e14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	607b      	str	r3, [r7, #4]
}
 8005e10:	bf00      	nop
 8005e12:	e7fe      	b.n	8005e12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e14:	4b0e      	ldr	r3, [pc, #56]	; (8005e50 <vPortValidateInterruptPriority+0x78>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e1c:	4b0d      	ldr	r3, [pc, #52]	; (8005e54 <vPortValidateInterruptPriority+0x7c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d90a      	bls.n	8005e3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	603b      	str	r3, [r7, #0]
}
 8005e36:	bf00      	nop
 8005e38:	e7fe      	b.n	8005e38 <vPortValidateInterruptPriority+0x60>
	}
 8005e3a:	bf00      	nop
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	e000e3f0 	.word	0xe000e3f0
 8005e4c:	20000f4c 	.word	0x20000f4c
 8005e50:	e000ed0c 	.word	0xe000ed0c
 8005e54:	20000f50 	.word	0x20000f50

08005e58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b08a      	sub	sp, #40	; 0x28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005e60:	2300      	movs	r3, #0
 8005e62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005e64:	f7fe fc84 	bl	8004770 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005e68:	4b5b      	ldr	r3, [pc, #364]	; (8005fd8 <pvPortMalloc+0x180>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e70:	f000 f920 	bl	80060b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e74:	4b59      	ldr	r3, [pc, #356]	; (8005fdc <pvPortMalloc+0x184>)
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f040 8093 	bne.w	8005fa8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d01d      	beq.n	8005ec4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005e88:	2208      	movs	r2, #8
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f003 0307 	and.w	r3, r3, #7
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d014      	beq.n	8005ec4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f023 0307 	bic.w	r3, r3, #7
 8005ea0:	3308      	adds	r3, #8
 8005ea2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f003 0307 	and.w	r3, r3, #7
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00a      	beq.n	8005ec4 <pvPortMalloc+0x6c>
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	617b      	str	r3, [r7, #20]
}
 8005ec0:	bf00      	nop
 8005ec2:	e7fe      	b.n	8005ec2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d06e      	beq.n	8005fa8 <pvPortMalloc+0x150>
 8005eca:	4b45      	ldr	r3, [pc, #276]	; (8005fe0 <pvPortMalloc+0x188>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d869      	bhi.n	8005fa8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ed4:	4b43      	ldr	r3, [pc, #268]	; (8005fe4 <pvPortMalloc+0x18c>)
 8005ed6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ed8:	4b42      	ldr	r3, [pc, #264]	; (8005fe4 <pvPortMalloc+0x18c>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ede:	e004      	b.n	8005eea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d903      	bls.n	8005efc <pvPortMalloc+0xa4>
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1f1      	bne.n	8005ee0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005efc:	4b36      	ldr	r3, [pc, #216]	; (8005fd8 <pvPortMalloc+0x180>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d050      	beq.n	8005fa8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f06:	6a3b      	ldr	r3, [r7, #32]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2208      	movs	r2, #8
 8005f0c:	4413      	add	r3, r2
 8005f0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	1ad2      	subs	r2, r2, r3
 8005f20:	2308      	movs	r3, #8
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d91f      	bls.n	8005f68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00a      	beq.n	8005f50 <pvPortMalloc+0xf8>
	__asm volatile
 8005f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	613b      	str	r3, [r7, #16]
}
 8005f4c:	bf00      	nop
 8005f4e:	e7fe      	b.n	8005f4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	1ad2      	subs	r2, r2, r3
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f62:	69b8      	ldr	r0, [r7, #24]
 8005f64:	f000 f908 	bl	8006178 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f68:	4b1d      	ldr	r3, [pc, #116]	; (8005fe0 <pvPortMalloc+0x188>)
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	4a1b      	ldr	r2, [pc, #108]	; (8005fe0 <pvPortMalloc+0x188>)
 8005f74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f76:	4b1a      	ldr	r3, [pc, #104]	; (8005fe0 <pvPortMalloc+0x188>)
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	4b1b      	ldr	r3, [pc, #108]	; (8005fe8 <pvPortMalloc+0x190>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d203      	bcs.n	8005f8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f82:	4b17      	ldr	r3, [pc, #92]	; (8005fe0 <pvPortMalloc+0x188>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a18      	ldr	r2, [pc, #96]	; (8005fe8 <pvPortMalloc+0x190>)
 8005f88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	4b13      	ldr	r3, [pc, #76]	; (8005fdc <pvPortMalloc+0x184>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	431a      	orrs	r2, r3
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005f9e:	4b13      	ldr	r3, [pc, #76]	; (8005fec <pvPortMalloc+0x194>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	4a11      	ldr	r2, [pc, #68]	; (8005fec <pvPortMalloc+0x194>)
 8005fa6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005fa8:	f7fe fbf0 	bl	800478c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	f003 0307 	and.w	r3, r3, #7
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00a      	beq.n	8005fcc <pvPortMalloc+0x174>
	__asm volatile
 8005fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fba:	f383 8811 	msr	BASEPRI, r3
 8005fbe:	f3bf 8f6f 	isb	sy
 8005fc2:	f3bf 8f4f 	dsb	sy
 8005fc6:	60fb      	str	r3, [r7, #12]
}
 8005fc8:	bf00      	nop
 8005fca:	e7fe      	b.n	8005fca <pvPortMalloc+0x172>
	return pvReturn;
 8005fcc:	69fb      	ldr	r3, [r7, #28]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3728      	adds	r7, #40	; 0x28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20004b5c 	.word	0x20004b5c
 8005fdc:	20004b70 	.word	0x20004b70
 8005fe0:	20004b60 	.word	0x20004b60
 8005fe4:	20004b54 	.word	0x20004b54
 8005fe8:	20004b64 	.word	0x20004b64
 8005fec:	20004b68 	.word	0x20004b68

08005ff0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d04d      	beq.n	800609e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006002:	2308      	movs	r3, #8
 8006004:	425b      	negs	r3, r3
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	4413      	add	r3, r2
 800600a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	685a      	ldr	r2, [r3, #4]
 8006014:	4b24      	ldr	r3, [pc, #144]	; (80060a8 <vPortFree+0xb8>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4013      	ands	r3, r2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10a      	bne.n	8006034 <vPortFree+0x44>
	__asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	60fb      	str	r3, [r7, #12]
}
 8006030:	bf00      	nop
 8006032:	e7fe      	b.n	8006032 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00a      	beq.n	8006052 <vPortFree+0x62>
	__asm volatile
 800603c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	60bb      	str	r3, [r7, #8]
}
 800604e:	bf00      	nop
 8006050:	e7fe      	b.n	8006050 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	4b14      	ldr	r3, [pc, #80]	; (80060a8 <vPortFree+0xb8>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4013      	ands	r3, r2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d01e      	beq.n	800609e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d11a      	bne.n	800609e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	4b0e      	ldr	r3, [pc, #56]	; (80060a8 <vPortFree+0xb8>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	43db      	mvns	r3, r3
 8006072:	401a      	ands	r2, r3
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006078:	f7fe fb7a 	bl	8004770 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	4b0a      	ldr	r3, [pc, #40]	; (80060ac <vPortFree+0xbc>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4413      	add	r3, r2
 8006086:	4a09      	ldr	r2, [pc, #36]	; (80060ac <vPortFree+0xbc>)
 8006088:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800608a:	6938      	ldr	r0, [r7, #16]
 800608c:	f000 f874 	bl	8006178 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006090:	4b07      	ldr	r3, [pc, #28]	; (80060b0 <vPortFree+0xc0>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	3301      	adds	r3, #1
 8006096:	4a06      	ldr	r2, [pc, #24]	; (80060b0 <vPortFree+0xc0>)
 8006098:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800609a:	f7fe fb77 	bl	800478c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800609e:	bf00      	nop
 80060a0:	3718      	adds	r7, #24
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	20004b70 	.word	0x20004b70
 80060ac:	20004b60 	.word	0x20004b60
 80060b0:	20004b6c 	.word	0x20004b6c

080060b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80060ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80060be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80060c0:	4b27      	ldr	r3, [pc, #156]	; (8006160 <prvHeapInit+0xac>)
 80060c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f003 0307 	and.w	r3, r3, #7
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00c      	beq.n	80060e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	3307      	adds	r3, #7
 80060d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f023 0307 	bic.w	r3, r3, #7
 80060da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	4a1f      	ldr	r2, [pc, #124]	; (8006160 <prvHeapInit+0xac>)
 80060e4:	4413      	add	r3, r2
 80060e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80060ec:	4a1d      	ldr	r2, [pc, #116]	; (8006164 <prvHeapInit+0xb0>)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80060f2:	4b1c      	ldr	r3, [pc, #112]	; (8006164 <prvHeapInit+0xb0>)
 80060f4:	2200      	movs	r2, #0
 80060f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	4413      	add	r3, r2
 80060fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006100:	2208      	movs	r2, #8
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	1a9b      	subs	r3, r3, r2
 8006106:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f023 0307 	bic.w	r3, r3, #7
 800610e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	4a15      	ldr	r2, [pc, #84]	; (8006168 <prvHeapInit+0xb4>)
 8006114:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006116:	4b14      	ldr	r3, [pc, #80]	; (8006168 <prvHeapInit+0xb4>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2200      	movs	r2, #0
 800611c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800611e:	4b12      	ldr	r3, [pc, #72]	; (8006168 <prvHeapInit+0xb4>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2200      	movs	r2, #0
 8006124:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	1ad2      	subs	r2, r2, r3
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006134:	4b0c      	ldr	r3, [pc, #48]	; (8006168 <prvHeapInit+0xb4>)
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	4a0a      	ldr	r2, [pc, #40]	; (800616c <prvHeapInit+0xb8>)
 8006142:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	4a09      	ldr	r2, [pc, #36]	; (8006170 <prvHeapInit+0xbc>)
 800614a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800614c:	4b09      	ldr	r3, [pc, #36]	; (8006174 <prvHeapInit+0xc0>)
 800614e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006152:	601a      	str	r2, [r3, #0]
}
 8006154:	bf00      	nop
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	20000f54 	.word	0x20000f54
 8006164:	20004b54 	.word	0x20004b54
 8006168:	20004b5c 	.word	0x20004b5c
 800616c:	20004b64 	.word	0x20004b64
 8006170:	20004b60 	.word	0x20004b60
 8006174:	20004b70 	.word	0x20004b70

08006178 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006180:	4b28      	ldr	r3, [pc, #160]	; (8006224 <prvInsertBlockIntoFreeList+0xac>)
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	e002      	b.n	800618c <prvInsertBlockIntoFreeList+0x14>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	60fb      	str	r3, [r7, #12]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	429a      	cmp	r2, r3
 8006194:	d8f7      	bhi.n	8006186 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	4413      	add	r3, r2
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d108      	bne.n	80061ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	685a      	ldr	r2, [r3, #4]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	441a      	add	r2, r3
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	441a      	add	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d118      	bne.n	8006200 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	4b15      	ldr	r3, [pc, #84]	; (8006228 <prvInsertBlockIntoFreeList+0xb0>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d00d      	beq.n	80061f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	441a      	add	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	e008      	b.n	8006208 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80061f6:	4b0c      	ldr	r3, [pc, #48]	; (8006228 <prvInsertBlockIntoFreeList+0xb0>)
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	601a      	str	r2, [r3, #0]
 80061fe:	e003      	b.n	8006208 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	429a      	cmp	r2, r3
 800620e:	d002      	beq.n	8006216 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006216:	bf00      	nop
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	20004b54 	.word	0x20004b54
 8006228:	20004b5c 	.word	0x20004b5c

0800622c <__errno>:
 800622c:	4b01      	ldr	r3, [pc, #4]	; (8006234 <__errno+0x8>)
 800622e:	6818      	ldr	r0, [r3, #0]
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	20000010 	.word	0x20000010

08006238 <__libc_init_array>:
 8006238:	b570      	push	{r4, r5, r6, lr}
 800623a:	4d0d      	ldr	r5, [pc, #52]	; (8006270 <__libc_init_array+0x38>)
 800623c:	4c0d      	ldr	r4, [pc, #52]	; (8006274 <__libc_init_array+0x3c>)
 800623e:	1b64      	subs	r4, r4, r5
 8006240:	10a4      	asrs	r4, r4, #2
 8006242:	2600      	movs	r6, #0
 8006244:	42a6      	cmp	r6, r4
 8006246:	d109      	bne.n	800625c <__libc_init_array+0x24>
 8006248:	4d0b      	ldr	r5, [pc, #44]	; (8006278 <__libc_init_array+0x40>)
 800624a:	4c0c      	ldr	r4, [pc, #48]	; (800627c <__libc_init_array+0x44>)
 800624c:	f000 f9a6 	bl	800659c <_init>
 8006250:	1b64      	subs	r4, r4, r5
 8006252:	10a4      	asrs	r4, r4, #2
 8006254:	2600      	movs	r6, #0
 8006256:	42a6      	cmp	r6, r4
 8006258:	d105      	bne.n	8006266 <__libc_init_array+0x2e>
 800625a:	bd70      	pop	{r4, r5, r6, pc}
 800625c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006260:	4798      	blx	r3
 8006262:	3601      	adds	r6, #1
 8006264:	e7ee      	b.n	8006244 <__libc_init_array+0xc>
 8006266:	f855 3b04 	ldr.w	r3, [r5], #4
 800626a:	4798      	blx	r3
 800626c:	3601      	adds	r6, #1
 800626e:	e7f2      	b.n	8006256 <__libc_init_array+0x1e>
 8006270:	08006728 	.word	0x08006728
 8006274:	08006728 	.word	0x08006728
 8006278:	08006728 	.word	0x08006728
 800627c:	0800672c 	.word	0x0800672c

08006280 <__retarget_lock_acquire_recursive>:
 8006280:	4770      	bx	lr

08006282 <__retarget_lock_release_recursive>:
 8006282:	4770      	bx	lr

08006284 <malloc>:
 8006284:	4b02      	ldr	r3, [pc, #8]	; (8006290 <malloc+0xc>)
 8006286:	4601      	mov	r1, r0
 8006288:	6818      	ldr	r0, [r3, #0]
 800628a:	f000 b88d 	b.w	80063a8 <_malloc_r>
 800628e:	bf00      	nop
 8006290:	20000010 	.word	0x20000010

08006294 <free>:
 8006294:	4b02      	ldr	r3, [pc, #8]	; (80062a0 <free+0xc>)
 8006296:	4601      	mov	r1, r0
 8006298:	6818      	ldr	r0, [r3, #0]
 800629a:	f000 b819 	b.w	80062d0 <_free_r>
 800629e:	bf00      	nop
 80062a0:	20000010 	.word	0x20000010

080062a4 <memcpy>:
 80062a4:	440a      	add	r2, r1
 80062a6:	4291      	cmp	r1, r2
 80062a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80062ac:	d100      	bne.n	80062b0 <memcpy+0xc>
 80062ae:	4770      	bx	lr
 80062b0:	b510      	push	{r4, lr}
 80062b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062ba:	4291      	cmp	r1, r2
 80062bc:	d1f9      	bne.n	80062b2 <memcpy+0xe>
 80062be:	bd10      	pop	{r4, pc}

080062c0 <memset>:
 80062c0:	4402      	add	r2, r0
 80062c2:	4603      	mov	r3, r0
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d100      	bne.n	80062ca <memset+0xa>
 80062c8:	4770      	bx	lr
 80062ca:	f803 1b01 	strb.w	r1, [r3], #1
 80062ce:	e7f9      	b.n	80062c4 <memset+0x4>

080062d0 <_free_r>:
 80062d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062d2:	2900      	cmp	r1, #0
 80062d4:	d044      	beq.n	8006360 <_free_r+0x90>
 80062d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062da:	9001      	str	r0, [sp, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f1a1 0404 	sub.w	r4, r1, #4
 80062e2:	bfb8      	it	lt
 80062e4:	18e4      	addlt	r4, r4, r3
 80062e6:	f000 f94d 	bl	8006584 <__malloc_lock>
 80062ea:	4a1e      	ldr	r2, [pc, #120]	; (8006364 <_free_r+0x94>)
 80062ec:	9801      	ldr	r0, [sp, #4]
 80062ee:	6813      	ldr	r3, [r2, #0]
 80062f0:	b933      	cbnz	r3, 8006300 <_free_r+0x30>
 80062f2:	6063      	str	r3, [r4, #4]
 80062f4:	6014      	str	r4, [r2, #0]
 80062f6:	b003      	add	sp, #12
 80062f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062fc:	f000 b948 	b.w	8006590 <__malloc_unlock>
 8006300:	42a3      	cmp	r3, r4
 8006302:	d908      	bls.n	8006316 <_free_r+0x46>
 8006304:	6825      	ldr	r5, [r4, #0]
 8006306:	1961      	adds	r1, r4, r5
 8006308:	428b      	cmp	r3, r1
 800630a:	bf01      	itttt	eq
 800630c:	6819      	ldreq	r1, [r3, #0]
 800630e:	685b      	ldreq	r3, [r3, #4]
 8006310:	1949      	addeq	r1, r1, r5
 8006312:	6021      	streq	r1, [r4, #0]
 8006314:	e7ed      	b.n	80062f2 <_free_r+0x22>
 8006316:	461a      	mov	r2, r3
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	b10b      	cbz	r3, 8006320 <_free_r+0x50>
 800631c:	42a3      	cmp	r3, r4
 800631e:	d9fa      	bls.n	8006316 <_free_r+0x46>
 8006320:	6811      	ldr	r1, [r2, #0]
 8006322:	1855      	adds	r5, r2, r1
 8006324:	42a5      	cmp	r5, r4
 8006326:	d10b      	bne.n	8006340 <_free_r+0x70>
 8006328:	6824      	ldr	r4, [r4, #0]
 800632a:	4421      	add	r1, r4
 800632c:	1854      	adds	r4, r2, r1
 800632e:	42a3      	cmp	r3, r4
 8006330:	6011      	str	r1, [r2, #0]
 8006332:	d1e0      	bne.n	80062f6 <_free_r+0x26>
 8006334:	681c      	ldr	r4, [r3, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	6053      	str	r3, [r2, #4]
 800633a:	4421      	add	r1, r4
 800633c:	6011      	str	r1, [r2, #0]
 800633e:	e7da      	b.n	80062f6 <_free_r+0x26>
 8006340:	d902      	bls.n	8006348 <_free_r+0x78>
 8006342:	230c      	movs	r3, #12
 8006344:	6003      	str	r3, [r0, #0]
 8006346:	e7d6      	b.n	80062f6 <_free_r+0x26>
 8006348:	6825      	ldr	r5, [r4, #0]
 800634a:	1961      	adds	r1, r4, r5
 800634c:	428b      	cmp	r3, r1
 800634e:	bf04      	itt	eq
 8006350:	6819      	ldreq	r1, [r3, #0]
 8006352:	685b      	ldreq	r3, [r3, #4]
 8006354:	6063      	str	r3, [r4, #4]
 8006356:	bf04      	itt	eq
 8006358:	1949      	addeq	r1, r1, r5
 800635a:	6021      	streq	r1, [r4, #0]
 800635c:	6054      	str	r4, [r2, #4]
 800635e:	e7ca      	b.n	80062f6 <_free_r+0x26>
 8006360:	b003      	add	sp, #12
 8006362:	bd30      	pop	{r4, r5, pc}
 8006364:	20004b78 	.word	0x20004b78

08006368 <sbrk_aligned>:
 8006368:	b570      	push	{r4, r5, r6, lr}
 800636a:	4e0e      	ldr	r6, [pc, #56]	; (80063a4 <sbrk_aligned+0x3c>)
 800636c:	460c      	mov	r4, r1
 800636e:	6831      	ldr	r1, [r6, #0]
 8006370:	4605      	mov	r5, r0
 8006372:	b911      	cbnz	r1, 800637a <sbrk_aligned+0x12>
 8006374:	f000 f8f6 	bl	8006564 <_sbrk_r>
 8006378:	6030      	str	r0, [r6, #0]
 800637a:	4621      	mov	r1, r4
 800637c:	4628      	mov	r0, r5
 800637e:	f000 f8f1 	bl	8006564 <_sbrk_r>
 8006382:	1c43      	adds	r3, r0, #1
 8006384:	d00a      	beq.n	800639c <sbrk_aligned+0x34>
 8006386:	1cc4      	adds	r4, r0, #3
 8006388:	f024 0403 	bic.w	r4, r4, #3
 800638c:	42a0      	cmp	r0, r4
 800638e:	d007      	beq.n	80063a0 <sbrk_aligned+0x38>
 8006390:	1a21      	subs	r1, r4, r0
 8006392:	4628      	mov	r0, r5
 8006394:	f000 f8e6 	bl	8006564 <_sbrk_r>
 8006398:	3001      	adds	r0, #1
 800639a:	d101      	bne.n	80063a0 <sbrk_aligned+0x38>
 800639c:	f04f 34ff 	mov.w	r4, #4294967295
 80063a0:	4620      	mov	r0, r4
 80063a2:	bd70      	pop	{r4, r5, r6, pc}
 80063a4:	20004b7c 	.word	0x20004b7c

080063a8 <_malloc_r>:
 80063a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063ac:	1ccd      	adds	r5, r1, #3
 80063ae:	f025 0503 	bic.w	r5, r5, #3
 80063b2:	3508      	adds	r5, #8
 80063b4:	2d0c      	cmp	r5, #12
 80063b6:	bf38      	it	cc
 80063b8:	250c      	movcc	r5, #12
 80063ba:	2d00      	cmp	r5, #0
 80063bc:	4607      	mov	r7, r0
 80063be:	db01      	blt.n	80063c4 <_malloc_r+0x1c>
 80063c0:	42a9      	cmp	r1, r5
 80063c2:	d905      	bls.n	80063d0 <_malloc_r+0x28>
 80063c4:	230c      	movs	r3, #12
 80063c6:	603b      	str	r3, [r7, #0]
 80063c8:	2600      	movs	r6, #0
 80063ca:	4630      	mov	r0, r6
 80063cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063d0:	4e2e      	ldr	r6, [pc, #184]	; (800648c <_malloc_r+0xe4>)
 80063d2:	f000 f8d7 	bl	8006584 <__malloc_lock>
 80063d6:	6833      	ldr	r3, [r6, #0]
 80063d8:	461c      	mov	r4, r3
 80063da:	bb34      	cbnz	r4, 800642a <_malloc_r+0x82>
 80063dc:	4629      	mov	r1, r5
 80063de:	4638      	mov	r0, r7
 80063e0:	f7ff ffc2 	bl	8006368 <sbrk_aligned>
 80063e4:	1c43      	adds	r3, r0, #1
 80063e6:	4604      	mov	r4, r0
 80063e8:	d14d      	bne.n	8006486 <_malloc_r+0xde>
 80063ea:	6834      	ldr	r4, [r6, #0]
 80063ec:	4626      	mov	r6, r4
 80063ee:	2e00      	cmp	r6, #0
 80063f0:	d140      	bne.n	8006474 <_malloc_r+0xcc>
 80063f2:	6823      	ldr	r3, [r4, #0]
 80063f4:	4631      	mov	r1, r6
 80063f6:	4638      	mov	r0, r7
 80063f8:	eb04 0803 	add.w	r8, r4, r3
 80063fc:	f000 f8b2 	bl	8006564 <_sbrk_r>
 8006400:	4580      	cmp	r8, r0
 8006402:	d13a      	bne.n	800647a <_malloc_r+0xd2>
 8006404:	6821      	ldr	r1, [r4, #0]
 8006406:	3503      	adds	r5, #3
 8006408:	1a6d      	subs	r5, r5, r1
 800640a:	f025 0503 	bic.w	r5, r5, #3
 800640e:	3508      	adds	r5, #8
 8006410:	2d0c      	cmp	r5, #12
 8006412:	bf38      	it	cc
 8006414:	250c      	movcc	r5, #12
 8006416:	4629      	mov	r1, r5
 8006418:	4638      	mov	r0, r7
 800641a:	f7ff ffa5 	bl	8006368 <sbrk_aligned>
 800641e:	3001      	adds	r0, #1
 8006420:	d02b      	beq.n	800647a <_malloc_r+0xd2>
 8006422:	6823      	ldr	r3, [r4, #0]
 8006424:	442b      	add	r3, r5
 8006426:	6023      	str	r3, [r4, #0]
 8006428:	e00e      	b.n	8006448 <_malloc_r+0xa0>
 800642a:	6822      	ldr	r2, [r4, #0]
 800642c:	1b52      	subs	r2, r2, r5
 800642e:	d41e      	bmi.n	800646e <_malloc_r+0xc6>
 8006430:	2a0b      	cmp	r2, #11
 8006432:	d916      	bls.n	8006462 <_malloc_r+0xba>
 8006434:	1961      	adds	r1, r4, r5
 8006436:	42a3      	cmp	r3, r4
 8006438:	6025      	str	r5, [r4, #0]
 800643a:	bf18      	it	ne
 800643c:	6059      	strne	r1, [r3, #4]
 800643e:	6863      	ldr	r3, [r4, #4]
 8006440:	bf08      	it	eq
 8006442:	6031      	streq	r1, [r6, #0]
 8006444:	5162      	str	r2, [r4, r5]
 8006446:	604b      	str	r3, [r1, #4]
 8006448:	4638      	mov	r0, r7
 800644a:	f104 060b 	add.w	r6, r4, #11
 800644e:	f000 f89f 	bl	8006590 <__malloc_unlock>
 8006452:	f026 0607 	bic.w	r6, r6, #7
 8006456:	1d23      	adds	r3, r4, #4
 8006458:	1af2      	subs	r2, r6, r3
 800645a:	d0b6      	beq.n	80063ca <_malloc_r+0x22>
 800645c:	1b9b      	subs	r3, r3, r6
 800645e:	50a3      	str	r3, [r4, r2]
 8006460:	e7b3      	b.n	80063ca <_malloc_r+0x22>
 8006462:	6862      	ldr	r2, [r4, #4]
 8006464:	42a3      	cmp	r3, r4
 8006466:	bf0c      	ite	eq
 8006468:	6032      	streq	r2, [r6, #0]
 800646a:	605a      	strne	r2, [r3, #4]
 800646c:	e7ec      	b.n	8006448 <_malloc_r+0xa0>
 800646e:	4623      	mov	r3, r4
 8006470:	6864      	ldr	r4, [r4, #4]
 8006472:	e7b2      	b.n	80063da <_malloc_r+0x32>
 8006474:	4634      	mov	r4, r6
 8006476:	6876      	ldr	r6, [r6, #4]
 8006478:	e7b9      	b.n	80063ee <_malloc_r+0x46>
 800647a:	230c      	movs	r3, #12
 800647c:	603b      	str	r3, [r7, #0]
 800647e:	4638      	mov	r0, r7
 8006480:	f000 f886 	bl	8006590 <__malloc_unlock>
 8006484:	e7a1      	b.n	80063ca <_malloc_r+0x22>
 8006486:	6025      	str	r5, [r4, #0]
 8006488:	e7de      	b.n	8006448 <_malloc_r+0xa0>
 800648a:	bf00      	nop
 800648c:	20004b78 	.word	0x20004b78

08006490 <cleanup_glue>:
 8006490:	b538      	push	{r3, r4, r5, lr}
 8006492:	460c      	mov	r4, r1
 8006494:	6809      	ldr	r1, [r1, #0]
 8006496:	4605      	mov	r5, r0
 8006498:	b109      	cbz	r1, 800649e <cleanup_glue+0xe>
 800649a:	f7ff fff9 	bl	8006490 <cleanup_glue>
 800649e:	4621      	mov	r1, r4
 80064a0:	4628      	mov	r0, r5
 80064a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064a6:	f7ff bf13 	b.w	80062d0 <_free_r>
	...

080064ac <_reclaim_reent>:
 80064ac:	4b2c      	ldr	r3, [pc, #176]	; (8006560 <_reclaim_reent+0xb4>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4283      	cmp	r3, r0
 80064b2:	b570      	push	{r4, r5, r6, lr}
 80064b4:	4604      	mov	r4, r0
 80064b6:	d051      	beq.n	800655c <_reclaim_reent+0xb0>
 80064b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80064ba:	b143      	cbz	r3, 80064ce <_reclaim_reent+0x22>
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d14a      	bne.n	8006558 <_reclaim_reent+0xac>
 80064c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064c4:	6819      	ldr	r1, [r3, #0]
 80064c6:	b111      	cbz	r1, 80064ce <_reclaim_reent+0x22>
 80064c8:	4620      	mov	r0, r4
 80064ca:	f7ff ff01 	bl	80062d0 <_free_r>
 80064ce:	6961      	ldr	r1, [r4, #20]
 80064d0:	b111      	cbz	r1, 80064d8 <_reclaim_reent+0x2c>
 80064d2:	4620      	mov	r0, r4
 80064d4:	f7ff fefc 	bl	80062d0 <_free_r>
 80064d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80064da:	b111      	cbz	r1, 80064e2 <_reclaim_reent+0x36>
 80064dc:	4620      	mov	r0, r4
 80064de:	f7ff fef7 	bl	80062d0 <_free_r>
 80064e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80064e4:	b111      	cbz	r1, 80064ec <_reclaim_reent+0x40>
 80064e6:	4620      	mov	r0, r4
 80064e8:	f7ff fef2 	bl	80062d0 <_free_r>
 80064ec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80064ee:	b111      	cbz	r1, 80064f6 <_reclaim_reent+0x4a>
 80064f0:	4620      	mov	r0, r4
 80064f2:	f7ff feed 	bl	80062d0 <_free_r>
 80064f6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80064f8:	b111      	cbz	r1, 8006500 <_reclaim_reent+0x54>
 80064fa:	4620      	mov	r0, r4
 80064fc:	f7ff fee8 	bl	80062d0 <_free_r>
 8006500:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006502:	b111      	cbz	r1, 800650a <_reclaim_reent+0x5e>
 8006504:	4620      	mov	r0, r4
 8006506:	f7ff fee3 	bl	80062d0 <_free_r>
 800650a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800650c:	b111      	cbz	r1, 8006514 <_reclaim_reent+0x68>
 800650e:	4620      	mov	r0, r4
 8006510:	f7ff fede 	bl	80062d0 <_free_r>
 8006514:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006516:	b111      	cbz	r1, 800651e <_reclaim_reent+0x72>
 8006518:	4620      	mov	r0, r4
 800651a:	f7ff fed9 	bl	80062d0 <_free_r>
 800651e:	69a3      	ldr	r3, [r4, #24]
 8006520:	b1e3      	cbz	r3, 800655c <_reclaim_reent+0xb0>
 8006522:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006524:	4620      	mov	r0, r4
 8006526:	4798      	blx	r3
 8006528:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800652a:	b1b9      	cbz	r1, 800655c <_reclaim_reent+0xb0>
 800652c:	4620      	mov	r0, r4
 800652e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006532:	f7ff bfad 	b.w	8006490 <cleanup_glue>
 8006536:	5949      	ldr	r1, [r1, r5]
 8006538:	b941      	cbnz	r1, 800654c <_reclaim_reent+0xa0>
 800653a:	3504      	adds	r5, #4
 800653c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800653e:	2d80      	cmp	r5, #128	; 0x80
 8006540:	68d9      	ldr	r1, [r3, #12]
 8006542:	d1f8      	bne.n	8006536 <_reclaim_reent+0x8a>
 8006544:	4620      	mov	r0, r4
 8006546:	f7ff fec3 	bl	80062d0 <_free_r>
 800654a:	e7ba      	b.n	80064c2 <_reclaim_reent+0x16>
 800654c:	680e      	ldr	r6, [r1, #0]
 800654e:	4620      	mov	r0, r4
 8006550:	f7ff febe 	bl	80062d0 <_free_r>
 8006554:	4631      	mov	r1, r6
 8006556:	e7ef      	b.n	8006538 <_reclaim_reent+0x8c>
 8006558:	2500      	movs	r5, #0
 800655a:	e7ef      	b.n	800653c <_reclaim_reent+0x90>
 800655c:	bd70      	pop	{r4, r5, r6, pc}
 800655e:	bf00      	nop
 8006560:	20000010 	.word	0x20000010

08006564 <_sbrk_r>:
 8006564:	b538      	push	{r3, r4, r5, lr}
 8006566:	4d06      	ldr	r5, [pc, #24]	; (8006580 <_sbrk_r+0x1c>)
 8006568:	2300      	movs	r3, #0
 800656a:	4604      	mov	r4, r0
 800656c:	4608      	mov	r0, r1
 800656e:	602b      	str	r3, [r5, #0]
 8006570:	f7fa fe44 	bl	80011fc <_sbrk>
 8006574:	1c43      	adds	r3, r0, #1
 8006576:	d102      	bne.n	800657e <_sbrk_r+0x1a>
 8006578:	682b      	ldr	r3, [r5, #0]
 800657a:	b103      	cbz	r3, 800657e <_sbrk_r+0x1a>
 800657c:	6023      	str	r3, [r4, #0]
 800657e:	bd38      	pop	{r3, r4, r5, pc}
 8006580:	20004b80 	.word	0x20004b80

08006584 <__malloc_lock>:
 8006584:	4801      	ldr	r0, [pc, #4]	; (800658c <__malloc_lock+0x8>)
 8006586:	f7ff be7b 	b.w	8006280 <__retarget_lock_acquire_recursive>
 800658a:	bf00      	nop
 800658c:	20004b74 	.word	0x20004b74

08006590 <__malloc_unlock>:
 8006590:	4801      	ldr	r0, [pc, #4]	; (8006598 <__malloc_unlock+0x8>)
 8006592:	f7ff be76 	b.w	8006282 <__retarget_lock_release_recursive>
 8006596:	bf00      	nop
 8006598:	20004b74 	.word	0x20004b74

0800659c <_init>:
 800659c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659e:	bf00      	nop
 80065a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065a2:	bc08      	pop	{r3}
 80065a4:	469e      	mov	lr, r3
 80065a6:	4770      	bx	lr

080065a8 <_fini>:
 80065a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065aa:	bf00      	nop
 80065ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ae:	bc08      	pop	{r3}
 80065b0:	469e      	mov	lr, r3
 80065b2:	4770      	bx	lr
