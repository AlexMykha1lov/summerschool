
SpaceImpact.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000754  08008884  08008884  00018884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fd8  08008fd8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008fd8  08008fd8  00018fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fe0  08008fe0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fe0  08008fe0  00018fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fe4  08008fe4  00018fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b64  20000074  0800905c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004bd8  0800905c  00024bd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000198a4  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035c5  00000000  00000000  00039948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  0003cf10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000056be  00000000  00000000  0003e548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00016f43  00000000  00000000  00043c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a4efb  00000000  00000000  0005ab49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000ffa44  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000014b8  00000000  00000000  000ffa98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006730  00000000  00000000  00100f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800886c 	.word	0x0800886c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800886c 	.word	0x0800886c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <lcd_start_write>:
static uint16_t textsize_x = 1, textsize_y = 1;
static uint16_t textcolor = ST77XX_WHITE;
static uint16_t textbgcolor = ST77XX_BLACK;
static uint8_t wrap = 1;

static void lcd_start_write(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2110      	movs	r1, #16
 800058c:	4802      	ldr	r0, [pc, #8]	; (8000598 <lcd_start_write+0x14>)
 800058e:	f002 fbbb 	bl	8002d08 <HAL_GPIO_WritePin>
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40020000 	.word	0x40020000

0800059c <lcd_end_write>:

static void lcd_end_write(void) {
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2110      	movs	r1, #16
 80005a4:	4802      	ldr	r0, [pc, #8]	; (80005b0 <lcd_end_write+0x14>)
 80005a6:	f002 fbaf 	bl	8002d08 <HAL_GPIO_WritePin>
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020000 	.word	0x40020000

080005b4 <lcd_start_command>:

static void lcd_start_command(void) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2140      	movs	r1, #64	; 0x40
 80005bc:	4802      	ldr	r0, [pc, #8]	; (80005c8 <lcd_start_command+0x14>)
 80005be:	f002 fba3 	bl	8002d08 <HAL_GPIO_WritePin>
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40020000 	.word	0x40020000

080005cc <lcd_start_data>:

static void lcd_start_data(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2140      	movs	r1, #64	; 0x40
 80005d4:	4802      	ldr	r0, [pc, #8]	; (80005e0 <lcd_start_data+0x14>)
 80005d6:	f002 fb97 	bl	8002d08 <HAL_GPIO_WritePin>
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40020000 	.word	0x40020000

080005e4 <lcd_spi_send_com>:

static void lcd_spi_send_com(uint8_t com) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef stat;
	lcd_start_command();
 80005ee:	f7ff ffe1 	bl	80005b4 <lcd_start_command>
	stat = HAL_SPI_Transmit(&hspi1, &com, 1, 1000);
 80005f2:	1df9      	adds	r1, r7, #7
 80005f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f8:	2201      	movs	r2, #1
 80005fa:	4806      	ldr	r0, [pc, #24]	; (8000614 <lcd_spi_send_com+0x30>)
 80005fc:	f003 f863 	bl	80036c6 <HAL_SPI_Transmit>
 8000600:	4603      	mov	r3, r0
 8000602:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d000      	beq.n	800060c <lcd_spi_send_com+0x28>
		while (1) {}
 800060a:	e7fe      	b.n	800060a <lcd_spi_send_com+0x26>
	}
}
 800060c:	bf00      	nop
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	200000e4 	.word	0x200000e4

08000618 <lcd_spi_send_data>:

static void lcd_spi_send_data(uint8_t *data, size_t size) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef stat;
	if (size) {
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d00f      	beq.n	8000648 <lcd_spi_send_data+0x30>
		lcd_start_data();
 8000628:	f7ff ffd0 	bl	80005cc <lcd_start_data>
		stat = HAL_SPI_Transmit(&hspi1, data, size, 1000);
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	b29a      	uxth	r2, r3
 8000630:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000634:	6879      	ldr	r1, [r7, #4]
 8000636:	4806      	ldr	r0, [pc, #24]	; (8000650 <lcd_spi_send_data+0x38>)
 8000638:	f003 f845 	bl	80036c6 <HAL_SPI_Transmit>
 800063c:	4603      	mov	r3, r0
 800063e:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d000      	beq.n	8000648 <lcd_spi_send_data+0x30>
			while (1) {}
 8000646:	e7fe      	b.n	8000646 <lcd_spi_send_data+0x2e>
		}
	}
}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200000e4 	.word	0x200000e4

08000654 <lcd_set_window>:

static void lcd_set_window(uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	4604      	mov	r4, r0
 800065c:	4608      	mov	r0, r1
 800065e:	4611      	mov	r1, r2
 8000660:	461a      	mov	r2, r3
 8000662:	4623      	mov	r3, r4
 8000664:	80fb      	strh	r3, [r7, #6]
 8000666:	4603      	mov	r3, r0
 8000668:	80bb      	strh	r3, [r7, #4]
 800066a:	460b      	mov	r3, r1
 800066c:	807b      	strh	r3, [r7, #2]
 800066e:	4613      	mov	r3, r2
 8000670:	803b      	strh	r3, [r7, #0]
	x += _xstart;
 8000672:	4b29      	ldr	r3, [pc, #164]	; (8000718 <lcd_set_window+0xc4>)
 8000674:	881a      	ldrh	r2, [r3, #0]
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	4413      	add	r3, r2
 800067a:	80fb      	strh	r3, [r7, #6]
	y += _ystart;
 800067c:	4b27      	ldr	r3, [pc, #156]	; (800071c <lcd_set_window+0xc8>)
 800067e:	881a      	ldrh	r2, [r3, #0]
 8000680:	88bb      	ldrh	r3, [r7, #4]
 8000682:	4413      	add	r3, r2
 8000684:	80bb      	strh	r3, [r7, #4]

	uint8_t xa[4] = {x >> 8, x, (x+w-1)>>8, (x+w-1) };
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	0a1b      	lsrs	r3, r3, #8
 800068a:	b29b      	uxth	r3, r3
 800068c:	b2db      	uxtb	r3, r3
 800068e:	733b      	strb	r3, [r7, #12]
 8000690:	88fb      	ldrh	r3, [r7, #6]
 8000692:	b2db      	uxtb	r3, r3
 8000694:	737b      	strb	r3, [r7, #13]
 8000696:	88fa      	ldrh	r2, [r7, #6]
 8000698:	887b      	ldrh	r3, [r7, #2]
 800069a:	4413      	add	r3, r2
 800069c:	3b01      	subs	r3, #1
 800069e:	121b      	asrs	r3, r3, #8
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	73bb      	strb	r3, [r7, #14]
 80006a4:	88fb      	ldrh	r3, [r7, #6]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	887b      	ldrh	r3, [r7, #2]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	4413      	add	r3, r2
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	3b01      	subs	r3, #1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	73fb      	strb	r3, [r7, #15]
	uint8_t ya[4] = {y >> 8, y, (y+h-1)>>8, (y+h-1) };
 80006b6:	88bb      	ldrh	r3, [r7, #4]
 80006b8:	0a1b      	lsrs	r3, r3, #8
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	723b      	strb	r3, [r7, #8]
 80006c0:	88bb      	ldrh	r3, [r7, #4]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	727b      	strb	r3, [r7, #9]
 80006c6:	88ba      	ldrh	r2, [r7, #4]
 80006c8:	883b      	ldrh	r3, [r7, #0]
 80006ca:	4413      	add	r3, r2
 80006cc:	3b01      	subs	r3, #1
 80006ce:	121b      	asrs	r3, r3, #8
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	72bb      	strb	r3, [r7, #10]
 80006d4:	88bb      	ldrh	r3, [r7, #4]
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	883b      	ldrh	r3, [r7, #0]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	4413      	add	r3, r2
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	3b01      	subs	r3, #1
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	72fb      	strb	r3, [r7, #11]

	lcd_spi_send_com(ST77XX_CASET);
 80006e6:	202a      	movs	r0, #42	; 0x2a
 80006e8:	f7ff ff7c 	bl	80005e4 <lcd_spi_send_com>
	lcd_spi_send_data(xa, 4);
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2104      	movs	r1, #4
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ff90 	bl	8000618 <lcd_spi_send_data>
	lcd_spi_send_com(ST77XX_RASET);
 80006f8:	202b      	movs	r0, #43	; 0x2b
 80006fa:	f7ff ff73 	bl	80005e4 <lcd_spi_send_com>
	lcd_spi_send_data(ya, 4);
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	2104      	movs	r1, #4
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff87 	bl	8000618 <lcd_spi_send_data>
	lcd_spi_send_com(ST77XX_RAMWR);
 800070a:	202c      	movs	r0, #44	; 0x2c
 800070c:	f7ff ff6a 	bl	80005e4 <lcd_spi_send_com>
}
 8000710:	bf00      	nop
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	bd90      	pop	{r4, r7, pc}
 8000718:	20000092 	.word	0x20000092
 800071c:	20000094 	.word	0x20000094

08000720 <lcd_init>:

/**
 * -------------------------------------------------------------------
 */
int lcd_init(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
	uint8_t numCommands, cmd, numArgs;
	uint16_t ms;

	const uint8_t *ptr = Rcmd;
 8000726:	4b33      	ldr	r3, [pc, #204]	; (80007f4 <lcd_init+0xd4>)
 8000728:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 800072a:	2201      	movs	r2, #1
 800072c:	2102      	movs	r1, #2
 800072e:	4832      	ldr	r0, [pc, #200]	; (80007f8 <lcd_init+0xd8>)
 8000730:	f002 faea 	bl	8002d08 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000734:	2064      	movs	r0, #100	; 0x64
 8000736:	f001 fc75 	bl	8002024 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2102      	movs	r1, #2
 800073e:	482e      	ldr	r0, [pc, #184]	; (80007f8 <lcd_init+0xd8>)
 8000740:	f002 fae2 	bl	8002d08 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000744:	2064      	movs	r0, #100	; 0x64
 8000746:	f001 fc6d 	bl	8002024 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 800074a:	2201      	movs	r2, #1
 800074c:	2102      	movs	r1, #2
 800074e:	482a      	ldr	r0, [pc, #168]	; (80007f8 <lcd_init+0xd8>)
 8000750:	f002 fada 	bl	8002d08 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000754:	2064      	movs	r0, #100	; 0x64
 8000756:	f001 fc65 	bl	8002024 <HAL_Delay>

	numCommands = *ptr++;
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	1c5a      	adds	r2, r3, #1
 800075e:	60ba      	str	r2, [r7, #8]
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	73fb      	strb	r3, [r7, #15]
	while (numCommands--) {
 8000764:	e035      	b.n	80007d2 <lcd_init+0xb2>
		cmd = *ptr++;
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	1c5a      	adds	r2, r3, #1
 800076a:	60ba      	str	r2, [r7, #8]
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	71fb      	strb	r3, [r7, #7]
		numArgs = *ptr++;
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	1c5a      	adds	r2, r3, #1
 8000774:	60ba      	str	r2, [r7, #8]
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	71bb      	strb	r3, [r7, #6]
		ms = numArgs & ST_CMD_DELAY;
 800077a:	79bb      	ldrb	r3, [r7, #6]
 800077c:	b29b      	uxth	r3, r3
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~ST_CMD_DELAY;
 8000784:	79bb      	ldrb	r3, [r7, #6]
 8000786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800078a:	71bb      	strb	r3, [r7, #6]
		lcd_start_write();
 800078c:	f7ff fefa 	bl	8000584 <lcd_start_write>
		lcd_spi_send_com(cmd);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ff26 	bl	80005e4 <lcd_spi_send_com>
		lcd_spi_send_data((uint8_t*)ptr, numArgs);
 8000798:	79bb      	ldrb	r3, [r7, #6]
 800079a:	4619      	mov	r1, r3
 800079c:	68b8      	ldr	r0, [r7, #8]
 800079e:	f7ff ff3b 	bl	8000618 <lcd_spi_send_data>
		lcd_end_write();
 80007a2:	f7ff fefb 	bl	800059c <lcd_end_write>
		ptr += numArgs;
 80007a6:	79bb      	ldrb	r3, [r7, #6]
 80007a8:	68ba      	ldr	r2, [r7, #8]
 80007aa:	4413      	add	r3, r2
 80007ac:	60bb      	str	r3, [r7, #8]

		if (ms) {
 80007ae:	89bb      	ldrh	r3, [r7, #12]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d00e      	beq.n	80007d2 <lcd_init+0xb2>
			ms = *ptr++;
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	60ba      	str	r2, [r7, #8]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	81bb      	strh	r3, [r7, #12]
			if (ms == 255)
 80007be:	89bb      	ldrh	r3, [r7, #12]
 80007c0:	2bff      	cmp	r3, #255	; 0xff
 80007c2:	d102      	bne.n	80007ca <lcd_init+0xaa>
				ms = 500;
 80007c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007c8:	81bb      	strh	r3, [r7, #12]
			HAL_Delay(ms);
 80007ca:	89bb      	ldrh	r3, [r7, #12]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f001 fc29 	bl	8002024 <HAL_Delay>
	while (numCommands--) {
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
 80007d4:	1e5a      	subs	r2, r3, #1
 80007d6:	73fa      	strb	r2, [r7, #15]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d1c4      	bne.n	8000766 <lcd_init+0x46>
		}
	}

	lcd_start_write();
 80007dc:	f7ff fed2 	bl	8000584 <lcd_start_write>
	lcd_set_rotation(2);
 80007e0:	2002      	movs	r0, #2
 80007e2:	f000 f80b 	bl	80007fc <lcd_set_rotation>
	lcd_end_write();
 80007e6:	f7ff fed9 	bl	800059c <lcd_end_write>

	return 0;
 80007ea:	2300      	movs	r3, #0
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	08008db4 	.word	0x08008db4
 80007f8:	40020000 	.word	0x40020000

080007fc <lcd_set_rotation>:

int lcd_set_rotation(int m) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	uint8_t madctl = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	73fb      	strb	r3, [r7, #15]

	rotation = m & 3; // can't be higher than 3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	b2db      	uxtb	r3, r3
 800080c:	f003 0303 	and.w	r3, r3, #3
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4b35      	ldr	r3, [pc, #212]	; (80008e8 <lcd_set_rotation+0xec>)
 8000814:	701a      	strb	r2, [r3, #0]

	switch (rotation) {
 8000816:	4b34      	ldr	r3, [pc, #208]	; (80008e8 <lcd_set_rotation+0xec>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b03      	cmp	r3, #3
 800081c:	d856      	bhi.n	80008cc <lcd_set_rotation+0xd0>
 800081e:	a201      	add	r2, pc, #4	; (adr r2, 8000824 <lcd_set_rotation+0x28>)
 8000820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000824:	08000835 	.word	0x08000835
 8000828:	0800085b 	.word	0x0800085b
 800082c:	08000881 	.word	0x08000881
 8000830:	080008a7 	.word	0x080008a7
	case 0:
		madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 8000834:	23c0      	movs	r3, #192	; 0xc0
 8000836:	73fb      	strb	r3, [r7, #15]
		_height = ST7735_TFTHEIGHT_160;
 8000838:	4b2c      	ldr	r3, [pc, #176]	; (80008ec <lcd_set_rotation+0xf0>)
 800083a:	22a0      	movs	r2, #160	; 0xa0
 800083c:	801a      	strh	r2, [r3, #0]
		_width = ST7735_TFTWIDTH_128;
 800083e:	4b2c      	ldr	r3, [pc, #176]	; (80008f0 <lcd_set_rotation+0xf4>)
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	801a      	strh	r2, [r3, #0]
		_xstart = _colstart;
 8000844:	4b2b      	ldr	r3, [pc, #172]	; (80008f4 <lcd_set_rotation+0xf8>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	b29a      	uxth	r2, r3
 800084a:	4b2b      	ldr	r3, [pc, #172]	; (80008f8 <lcd_set_rotation+0xfc>)
 800084c:	801a      	strh	r2, [r3, #0]
		_ystart = _rowstart;
 800084e:	4b2b      	ldr	r3, [pc, #172]	; (80008fc <lcd_set_rotation+0x100>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	b29a      	uxth	r2, r3
 8000854:	4b2a      	ldr	r3, [pc, #168]	; (8000900 <lcd_set_rotation+0x104>)
 8000856:	801a      	strh	r2, [r3, #0]
		break;
 8000858:	e038      	b.n	80008cc <lcd_set_rotation+0xd0>
	case 1:
		madctl = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 800085a:	23a0      	movs	r3, #160	; 0xa0
 800085c:	73fb      	strb	r3, [r7, #15]
		_width = ST7735_TFTHEIGHT_160;
 800085e:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <lcd_set_rotation+0xf4>)
 8000860:	22a0      	movs	r2, #160	; 0xa0
 8000862:	801a      	strh	r2, [r3, #0]
		_height = ST7735_TFTWIDTH_128;
 8000864:	4b21      	ldr	r3, [pc, #132]	; (80008ec <lcd_set_rotation+0xf0>)
 8000866:	2280      	movs	r2, #128	; 0x80
 8000868:	801a      	strh	r2, [r3, #0]
		_ystart = _colstart;
 800086a:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <lcd_set_rotation+0xf8>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	b29a      	uxth	r2, r3
 8000870:	4b23      	ldr	r3, [pc, #140]	; (8000900 <lcd_set_rotation+0x104>)
 8000872:	801a      	strh	r2, [r3, #0]
		_xstart = _rowstart;
 8000874:	4b21      	ldr	r3, [pc, #132]	; (80008fc <lcd_set_rotation+0x100>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	b29a      	uxth	r2, r3
 800087a:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <lcd_set_rotation+0xfc>)
 800087c:	801a      	strh	r2, [r3, #0]
		break;
 800087e:	e025      	b.n	80008cc <lcd_set_rotation+0xd0>
	case 2:
		madctl = ST77XX_MADCTL_RGB;
 8000880:	2300      	movs	r3, #0
 8000882:	73fb      	strb	r3, [r7, #15]
		_height = ST7735_TFTHEIGHT_160;
 8000884:	4b19      	ldr	r3, [pc, #100]	; (80008ec <lcd_set_rotation+0xf0>)
 8000886:	22a0      	movs	r2, #160	; 0xa0
 8000888:	801a      	strh	r2, [r3, #0]
		_width = ST7735_TFTWIDTH_128;
 800088a:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <lcd_set_rotation+0xf4>)
 800088c:	2280      	movs	r2, #128	; 0x80
 800088e:	801a      	strh	r2, [r3, #0]
		_xstart = _colstart;
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <lcd_set_rotation+0xf8>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	b29a      	uxth	r2, r3
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <lcd_set_rotation+0xfc>)
 8000898:	801a      	strh	r2, [r3, #0]
		_ystart = _rowstart;
 800089a:	4b18      	ldr	r3, [pc, #96]	; (80008fc <lcd_set_rotation+0x100>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	b29a      	uxth	r2, r3
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <lcd_set_rotation+0x104>)
 80008a2:	801a      	strh	r2, [r3, #0]
		break;
 80008a4:	e012      	b.n	80008cc <lcd_set_rotation+0xd0>
	case 3:
		madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST7735_MADCTL_BGR;
 80008a6:	2368      	movs	r3, #104	; 0x68
 80008a8:	73fb      	strb	r3, [r7, #15]
		_width = ST7735_TFTHEIGHT_160;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <lcd_set_rotation+0xf4>)
 80008ac:	22a0      	movs	r2, #160	; 0xa0
 80008ae:	801a      	strh	r2, [r3, #0]
		_height = ST7735_TFTWIDTH_128;
 80008b0:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <lcd_set_rotation+0xf0>)
 80008b2:	2280      	movs	r2, #128	; 0x80
 80008b4:	801a      	strh	r2, [r3, #0]
		_ystart = _colstart;
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <lcd_set_rotation+0xf8>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	4b10      	ldr	r3, [pc, #64]	; (8000900 <lcd_set_rotation+0x104>)
 80008be:	801a      	strh	r2, [r3, #0]
		_xstart = _rowstart;
 80008c0:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <lcd_set_rotation+0x100>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <lcd_set_rotation+0xfc>)
 80008c8:	801a      	strh	r2, [r3, #0]
		break;
 80008ca:	bf00      	nop
	}

	lcd_spi_send_com(ST77XX_MADCTL);
 80008cc:	2036      	movs	r0, #54	; 0x36
 80008ce:	f7ff fe89 	bl	80005e4 <lcd_spi_send_com>
	lcd_spi_send_data(&madctl, 1);
 80008d2:	f107 030f 	add.w	r3, r7, #15
 80008d6:	2101      	movs	r1, #1
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fe9d 	bl	8000618 <lcd_spi_send_data>
	return 0;
 80008de:	2300      	movs	r3, #0
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000090 	.word	0x20000090
 80008ec:	20000098 	.word	0x20000098
 80008f0:	20000096 	.word	0x20000096
 80008f4:	2000009a 	.word	0x2000009a
 80008f8:	20000092 	.word	0x20000092
 80008fc:	2000009b 	.word	0x2000009b
 8000900:	20000094 	.word	0x20000094

08000904 <lcd_pixel>:

void lcd_pixel(int16_t x, int16_t y, uint16_t color) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	80fb      	strh	r3, [r7, #6]
 800090e:	460b      	mov	r3, r1
 8000910:	80bb      	strh	r3, [r7, #4]
 8000912:	4613      	mov	r3, r2
 8000914:	807b      	strh	r3, [r7, #2]
	if ((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 8000916:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800091a:	2b00      	cmp	r3, #0
 800091c:	db29      	blt.n	8000972 <lcd_pixel+0x6e>
 800091e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000922:	4a16      	ldr	r2, [pc, #88]	; (800097c <lcd_pixel+0x78>)
 8000924:	8812      	ldrh	r2, [r2, #0]
 8000926:	4293      	cmp	r3, r2
 8000928:	da23      	bge.n	8000972 <lcd_pixel+0x6e>
 800092a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800092e:	2b00      	cmp	r3, #0
 8000930:	db1f      	blt.n	8000972 <lcd_pixel+0x6e>
 8000932:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <lcd_pixel+0x7c>)
 8000938:	8812      	ldrh	r2, [r2, #0]
 800093a:	4293      	cmp	r3, r2
 800093c:	da19      	bge.n	8000972 <lcd_pixel+0x6e>
		lcd_start_write();
 800093e:	f7ff fe21 	bl	8000584 <lcd_start_write>
		lcd_set_window(x, y, 1, 1);
 8000942:	88f8      	ldrh	r0, [r7, #6]
 8000944:	88b9      	ldrh	r1, [r7, #4]
 8000946:	2301      	movs	r3, #1
 8000948:	2201      	movs	r2, #1
 800094a:	f7ff fe83 	bl	8000654 <lcd_set_window>
		lcd_start_data();
 800094e:	f7ff fe3d 	bl	80005cc <lcd_start_data>
		uint8_t c[2] = { color >> 8, color};
 8000952:	887b      	ldrh	r3, [r7, #2]
 8000954:	0a1b      	lsrs	r3, r3, #8
 8000956:	b29b      	uxth	r3, r3
 8000958:	b2db      	uxtb	r3, r3
 800095a:	733b      	strb	r3, [r7, #12]
 800095c:	887b      	ldrh	r3, [r7, #2]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	737b      	strb	r3, [r7, #13]
		lcd_spi_send_data(c, 2);
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	2102      	movs	r1, #2
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fe55 	bl	8000618 <lcd_spi_send_data>
		lcd_end_write();
 800096e:	f7ff fe15 	bl	800059c <lcd_end_write>
	}
}
 8000972:	bf00      	nop
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000096 	.word	0x20000096
 8000980:	20000098 	.word	0x20000098

08000984 <lcd_vline>:

void lcd_vline(uint16_t x, uint16_t y, uint16_t h, uint16_t color) {
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	4604      	mov	r4, r0
 800098c:	4608      	mov	r0, r1
 800098e:	4611      	mov	r1, r2
 8000990:	461a      	mov	r2, r3
 8000992:	4623      	mov	r3, r4
 8000994:	80fb      	strh	r3, [r7, #6]
 8000996:	4603      	mov	r3, r0
 8000998:	80bb      	strh	r3, [r7, #4]
 800099a:	460b      	mov	r3, r1
 800099c:	807b      	strh	r3, [r7, #2]
 800099e:	4613      	mov	r3, r2
 80009a0:	803b      	strh	r3, [r7, #0]
	lcd_start_write();
 80009a2:	f7ff fdef 	bl	8000584 <lcd_start_write>
	lcd_set_window(x, y, 1, h);
 80009a6:	887b      	ldrh	r3, [r7, #2]
 80009a8:	88b9      	ldrh	r1, [r7, #4]
 80009aa:	88f8      	ldrh	r0, [r7, #6]
 80009ac:	2201      	movs	r2, #1
 80009ae:	f7ff fe51 	bl	8000654 <lcd_set_window>
	lcd_start_data();
 80009b2:	f7ff fe0b 	bl	80005cc <lcd_start_data>
	uint8_t c[2] = { color >> 8, color};
 80009b6:	883b      	ldrh	r3, [r7, #0]
 80009b8:	0a1b      	lsrs	r3, r3, #8
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	733b      	strb	r3, [r7, #12]
 80009c0:	883b      	ldrh	r3, [r7, #0]
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	737b      	strb	r3, [r7, #13]
	do
		lcd_spi_send_data(c, 2);
 80009c6:	f107 030c 	add.w	r3, r7, #12
 80009ca:	2102      	movs	r1, #2
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fe23 	bl	8000618 <lcd_spi_send_data>
	while (h--);
 80009d2:	887b      	ldrh	r3, [r7, #2]
 80009d4:	1e5a      	subs	r2, r3, #1
 80009d6:	807a      	strh	r2, [r7, #2]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d1f4      	bne.n	80009c6 <lcd_vline+0x42>
	lcd_end_write();
 80009dc:	f7ff fdde 	bl	800059c <lcd_end_write>
}
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd90      	pop	{r4, r7, pc}

080009e8 <lcd_fill_rect>:
	lcd_vline(x+w, y, h, color);
	lcd_hline(x, y, w, color);
	lcd_hline(x, y+h, w, color);
}

void lcd_fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4604      	mov	r4, r0
 80009f0:	4608      	mov	r0, r1
 80009f2:	4611      	mov	r1, r2
 80009f4:	461a      	mov	r2, r3
 80009f6:	4623      	mov	r3, r4
 80009f8:	80fb      	strh	r3, [r7, #6]
 80009fa:	4603      	mov	r3, r0
 80009fc:	80bb      	strh	r3, [r7, #4]
 80009fe:	460b      	mov	r3, r1
 8000a00:	807b      	strh	r3, [r7, #2]
 8000a02:	4613      	mov	r3, r2
 8000a04:	803b      	strh	r3, [r7, #0]
	if (x < 0) x = 0;
 8000a06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	da01      	bge.n	8000a12 <lcd_fill_rect+0x2a>
 8000a0e:	2300      	movs	r3, #0
 8000a10:	80fb      	strh	r3, [r7, #6]
	if (y < 0) y = 0;
 8000a12:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	da01      	bge.n	8000a1e <lcd_fill_rect+0x36>
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	80bb      	strh	r3, [r7, #4]
	if (x + w > _width) w = _width - x;
 8000a1e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000a22:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a26:	4413      	add	r3, r2
 8000a28:	4a20      	ldr	r2, [pc, #128]	; (8000aac <lcd_fill_rect+0xc4>)
 8000a2a:	8812      	ldrh	r2, [r2, #0]
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	dd05      	ble.n	8000a3c <lcd_fill_rect+0x54>
 8000a30:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <lcd_fill_rect+0xc4>)
 8000a32:	881a      	ldrh	r2, [r3, #0]
 8000a34:	88fb      	ldrh	r3, [r7, #6]
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	807b      	strh	r3, [r7, #2]
	if (y + h > _height) h = _height - y;
 8000a3c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000a40:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000a44:	4413      	add	r3, r2
 8000a46:	4a1a      	ldr	r2, [pc, #104]	; (8000ab0 <lcd_fill_rect+0xc8>)
 8000a48:	8812      	ldrh	r2, [r2, #0]
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	dd05      	ble.n	8000a5a <lcd_fill_rect+0x72>
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <lcd_fill_rect+0xc8>)
 8000a50:	881a      	ldrh	r2, [r3, #0]
 8000a52:	88bb      	ldrh	r3, [r7, #4]
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	803b      	strh	r3, [r7, #0]
	lcd_start_write();
 8000a5a:	f7ff fd93 	bl	8000584 <lcd_start_write>
	lcd_set_window(x, y, w, h);
 8000a5e:	88f8      	ldrh	r0, [r7, #6]
 8000a60:	88b9      	ldrh	r1, [r7, #4]
 8000a62:	887a      	ldrh	r2, [r7, #2]
 8000a64:	883b      	ldrh	r3, [r7, #0]
 8000a66:	f7ff fdf5 	bl	8000654 <lcd_set_window>
	uint8_t c[2] = { color >> 8, color};
 8000a6a:	8c3b      	ldrh	r3, [r7, #32]
 8000a6c:	0a1b      	lsrs	r3, r3, #8
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	723b      	strb	r3, [r7, #8]
 8000a74:	8c3b      	ldrh	r3, [r7, #32]
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	727b      	strb	r3, [r7, #9]
	uint32_t cnt = w * h;
 8000a7a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a7e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000a82:	fb02 f303 	mul.w	r3, r2, r3
 8000a86:	60fb      	str	r3, [r7, #12]
	while (cnt--)
 8000a88:	e005      	b.n	8000a96 <lcd_fill_rect+0xae>
		lcd_spi_send_data(c, 2);
 8000a8a:	f107 0308 	add.w	r3, r7, #8
 8000a8e:	2102      	movs	r1, #2
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fdc1 	bl	8000618 <lcd_spi_send_data>
	while (cnt--)
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	1e5a      	subs	r2, r3, #1
 8000a9a:	60fa      	str	r2, [r7, #12]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d1f4      	bne.n	8000a8a <lcd_fill_rect+0xa2>
	lcd_end_write();
 8000aa0:	f7ff fd7c 	bl	800059c <lcd_end_write>
}
 8000aa4:	bf00      	nop
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd90      	pop	{r4, r7, pc}
 8000aac:	20000096 	.word	0x20000096
 8000ab0:	20000098 	.word	0x20000098

08000ab4 <lcd_fill>:

void lcd_fill(uint16_t color) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af02      	add	r7, sp, #8
 8000aba:	4603      	mov	r3, r0
 8000abc:	80fb      	strh	r3, [r7, #6]
	lcd_fill_rect(0, 0, _width, _height, color);
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <lcd_fill+0x2c>)
 8000ac0:	881b      	ldrh	r3, [r3, #0]
 8000ac2:	b21a      	sxth	r2, r3
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <lcd_fill+0x30>)
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	b219      	sxth	r1, r3
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	460b      	mov	r3, r1
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f7ff ff88 	bl	80009e8 <lcd_fill_rect>
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000096 	.word	0x20000096
 8000ae4:	20000098 	.word	0x20000098

08000ae8 <lcd_line>:

void lcd_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b089      	sub	sp, #36	; 0x24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4604      	mov	r4, r0
 8000af0:	4608      	mov	r0, r1
 8000af2:	4611      	mov	r1, r2
 8000af4:	461a      	mov	r2, r3
 8000af6:	4623      	mov	r3, r4
 8000af8:	80fb      	strh	r3, [r7, #6]
 8000afa:	4603      	mov	r3, r0
 8000afc:	80bb      	strh	r3, [r7, #4]
 8000afe:	460b      	mov	r3, r1
 8000b00:	807b      	strh	r3, [r7, #2]
 8000b02:	4613      	mov	r3, r2
 8000b04:	803b      	strh	r3, [r7, #0]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8000b06:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000b0a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b0e:	1ad3      	subs	r3, r2, r3
 8000b10:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000b14:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000b18:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000b1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b20:	1acb      	subs	r3, r1, r3
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	bfb8      	it	lt
 8000b26:	425b      	neglt	r3, r3
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	bfcc      	ite	gt
 8000b2c:	2301      	movgt	r3, #1
 8000b2e:	2300      	movle	r3, #0
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	837b      	strh	r3, [r7, #26]
	if (steep) {
 8000b34:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d00b      	beq.n	8000b54 <lcd_line+0x6c>
		swap16(x0, y0);
 8000b3c:	88fb      	ldrh	r3, [r7, #6]
 8000b3e:	833b      	strh	r3, [r7, #24]
 8000b40:	88bb      	ldrh	r3, [r7, #4]
 8000b42:	80fb      	strh	r3, [r7, #6]
 8000b44:	8b3b      	ldrh	r3, [r7, #24]
 8000b46:	80bb      	strh	r3, [r7, #4]
		swap16(x1, y1);
 8000b48:	887b      	ldrh	r3, [r7, #2]
 8000b4a:	82fb      	strh	r3, [r7, #22]
 8000b4c:	883b      	ldrh	r3, [r7, #0]
 8000b4e:	807b      	strh	r3, [r7, #2]
 8000b50:	8afb      	ldrh	r3, [r7, #22]
 8000b52:	803b      	strh	r3, [r7, #0]
	}

	if (x0 > x1) {
 8000b54:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	dd0b      	ble.n	8000b78 <lcd_line+0x90>
		swap16(x0, x1);
 8000b60:	88fb      	ldrh	r3, [r7, #6]
 8000b62:	82bb      	strh	r3, [r7, #20]
 8000b64:	887b      	ldrh	r3, [r7, #2]
 8000b66:	80fb      	strh	r3, [r7, #6]
 8000b68:	8abb      	ldrh	r3, [r7, #20]
 8000b6a:	807b      	strh	r3, [r7, #2]
		swap16(y0, y1);
 8000b6c:	88bb      	ldrh	r3, [r7, #4]
 8000b6e:	827b      	strh	r3, [r7, #18]
 8000b70:	883b      	ldrh	r3, [r7, #0]
 8000b72:	80bb      	strh	r3, [r7, #4]
 8000b74:	8a7b      	ldrh	r3, [r7, #18]
 8000b76:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x1 - x0;
 8000b78:	887a      	ldrh	r2, [r7, #2]
 8000b7a:	88fb      	ldrh	r3, [r7, #6]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	823b      	strh	r3, [r7, #16]
	dy = abs(y1 - y0);
 8000b82:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000b86:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b8a:	1ad3      	subs	r3, r2, r3
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	bfb8      	it	lt
 8000b90:	425b      	neglt	r3, r3
 8000b92:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 8000b94:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000b98:	0fda      	lsrs	r2, r3, #31
 8000b9a:	4413      	add	r3, r2
 8000b9c:	105b      	asrs	r3, r3, #1
 8000b9e:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y0 < y1) {
 8000ba0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000ba4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	da02      	bge.n	8000bb2 <lcd_line+0xca>
		ystep = 1;
 8000bac:	2301      	movs	r3, #1
 8000bae:	83bb      	strh	r3, [r7, #28]
 8000bb0:	e031      	b.n	8000c16 <lcd_line+0x12e>
	} else {
		ystep = -1;
 8000bb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bb6:	83bb      	strh	r3, [r7, #28]
	}

	for (; x0 <= x1; x0++) {
 8000bb8:	e02d      	b.n	8000c16 <lcd_line+0x12e>
		if (steep) {
 8000bba:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d008      	beq.n	8000bd4 <lcd_line+0xec>
			lcd_pixel(y0, x0, color);
 8000bc2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000bc4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000bc8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fe99 	bl	8000904 <lcd_pixel>
 8000bd2:	e007      	b.n	8000be4 <lcd_line+0xfc>
		} else {
			lcd_pixel(x0, y0, color);
 8000bd4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000bd6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000bda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fe90 	bl	8000904 <lcd_pixel>
		}
		err -= dy;
 8000be4:	8bfa      	ldrh	r2, [r7, #30]
 8000be6:	89fb      	ldrh	r3, [r7, #14]
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	83fb      	strh	r3, [r7, #30]
		if (err < 0) {
 8000bee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	da09      	bge.n	8000c0a <lcd_line+0x122>
			y0 += ystep;
 8000bf6:	88ba      	ldrh	r2, [r7, #4]
 8000bf8:	8bbb      	ldrh	r3, [r7, #28]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	80bb      	strh	r3, [r7, #4]
			err += dx;
 8000c00:	8bfa      	ldrh	r2, [r7, #30]
 8000c02:	8a3b      	ldrh	r3, [r7, #16]
 8000c04:	4413      	add	r3, r2
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	83fb      	strh	r3, [r7, #30]
	for (; x0 <= x1; x0++) {
 8000c0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	3301      	adds	r3, #1
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	80fb      	strh	r3, [r7, #6]
 8000c16:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000c1a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	ddcb      	ble.n	8000bba <lcd_line+0xd2>
		}
	}
}
 8000c22:	bf00      	nop
 8000c24:	bf00      	nop
 8000c26:	3724      	adds	r7, #36	; 0x24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd90      	pop	{r4, r7, pc}

08000c2c <lcd_fill_circle>:
    lcd_pixel(x0 - y, y0 - x, color);
  }
  lcd_end_write();
}

void lcd_fill_circle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b087      	sub	sp, #28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4604      	mov	r4, r0
 8000c34:	4608      	mov	r0, r1
 8000c36:	4611      	mov	r1, r2
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4623      	mov	r3, r4
 8000c3c:	80fb      	strh	r3, [r7, #6]
 8000c3e:	4603      	mov	r3, r0
 8000c40:	80bb      	strh	r3, [r7, #4]
 8000c42:	460b      	mov	r3, r1
 8000c44:	807b      	strh	r3, [r7, #2]
 8000c46:	4613      	mov	r3, r2
 8000c48:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 8000c4a:	887b      	ldrh	r3, [r7, #2]
 8000c4c:	f1c3 0301 	rsb	r3, r3, #1
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8000c54:	2301      	movs	r3, #1
 8000c56:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8000c58:	887b      	ldrh	r3, [r7, #2]
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	03d2      	lsls	r2, r2, #15
 8000c5e:	1ad3      	subs	r3, r2, r3
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8000c6a:	887b      	ldrh	r3, [r7, #2]
 8000c6c:	81fb      	strh	r3, [r7, #14]
	int16_t px = x;
 8000c6e:	8a3b      	ldrh	r3, [r7, #16]
 8000c70:	81bb      	strh	r3, [r7, #12]
	int16_t py = y;
 8000c72:	89fb      	ldrh	r3, [r7, #14]
 8000c74:	817b      	strh	r3, [r7, #10]

	while (x < y) {
 8000c76:	e071      	b.n	8000d5c <lcd_fill_circle+0x130>
		if (f >= 0) {
 8000c78:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	db0e      	blt.n	8000c9e <lcd_fill_circle+0x72>
			y--;
 8000c80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	3b01      	subs	r3, #1
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8000c8c:	8a7b      	ldrh	r3, [r7, #18]
 8000c8e:	3302      	adds	r3, #2
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8000c94:	8afa      	ldrh	r2, [r7, #22]
 8000c96:	8a7b      	ldrh	r3, [r7, #18]
 8000c98:	4413      	add	r3, r2
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8000c9e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8000caa:	8abb      	ldrh	r3, [r7, #20]
 8000cac:	3302      	adds	r3, #2
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8000cb2:	8afa      	ldrh	r2, [r7, #22]
 8000cb4:	8abb      	ldrh	r3, [r7, #20]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	82fb      	strh	r3, [r7, #22]
		if (x < (y + 1)) {
 8000cbc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000cc0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	db1f      	blt.n	8000d08 <lcd_fill_circle+0xdc>
			lcd_vline(x0 + x, y0 - y, 2 * y + 1, color);
 8000cc8:	88fa      	ldrh	r2, [r7, #6]
 8000cca:	8a3b      	ldrh	r3, [r7, #16]
 8000ccc:	4413      	add	r3, r2
 8000cce:	b298      	uxth	r0, r3
 8000cd0:	88ba      	ldrh	r2, [r7, #4]
 8000cd2:	89fb      	ldrh	r3, [r7, #14]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	b299      	uxth	r1, r3
 8000cd8:	89fb      	ldrh	r3, [r7, #14]
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	3301      	adds	r3, #1
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	883b      	ldrh	r3, [r7, #0]
 8000ce4:	f7ff fe4e 	bl	8000984 <lcd_vline>
			lcd_vline(x0 - x, y0 - y, 2 * y + 1, color);
 8000ce8:	88fa      	ldrh	r2, [r7, #6]
 8000cea:	8a3b      	ldrh	r3, [r7, #16]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	b298      	uxth	r0, r3
 8000cf0:	88ba      	ldrh	r2, [r7, #4]
 8000cf2:	89fb      	ldrh	r3, [r7, #14]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	b299      	uxth	r1, r3
 8000cf8:	89fb      	ldrh	r3, [r7, #14]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	3301      	adds	r3, #1
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	883b      	ldrh	r3, [r7, #0]
 8000d04:	f7ff fe3e 	bl	8000984 <lcd_vline>
		}
		if (y != py) {
 8000d08:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000d0c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d021      	beq.n	8000d58 <lcd_fill_circle+0x12c>
			lcd_vline(x0 + py, y0 - px, 2 * px + 1, color);
 8000d14:	88fa      	ldrh	r2, [r7, #6]
 8000d16:	897b      	ldrh	r3, [r7, #10]
 8000d18:	4413      	add	r3, r2
 8000d1a:	b298      	uxth	r0, r3
 8000d1c:	88ba      	ldrh	r2, [r7, #4]
 8000d1e:	89bb      	ldrh	r3, [r7, #12]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	b299      	uxth	r1, r3
 8000d24:	89bb      	ldrh	r3, [r7, #12]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	883b      	ldrh	r3, [r7, #0]
 8000d30:	f7ff fe28 	bl	8000984 <lcd_vline>
			lcd_vline(x0 - py, y0 - px, 2 * px + 1, color);
 8000d34:	88fa      	ldrh	r2, [r7, #6]
 8000d36:	897b      	ldrh	r3, [r7, #10]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	b298      	uxth	r0, r3
 8000d3c:	88ba      	ldrh	r2, [r7, #4]
 8000d3e:	89bb      	ldrh	r3, [r7, #12]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	b299      	uxth	r1, r3
 8000d44:	89bb      	ldrh	r3, [r7, #12]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	883b      	ldrh	r3, [r7, #0]
 8000d50:	f7ff fe18 	bl	8000984 <lcd_vline>
			py = y;
 8000d54:	89fb      	ldrh	r3, [r7, #14]
 8000d56:	817b      	strh	r3, [r7, #10]
		}
		px = x;
 8000d58:	8a3b      	ldrh	r3, [r7, #16]
 8000d5a:	81bb      	strh	r3, [r7, #12]
	while (x < y) {
 8000d5c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000d60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	db87      	blt.n	8000c78 <lcd_fill_circle+0x4c>
	}
	lcd_vline(x0, y0 - r, 2 * r + 1, color);
 8000d68:	88f8      	ldrh	r0, [r7, #6]
 8000d6a:	88ba      	ldrh	r2, [r7, #4]
 8000d6c:	887b      	ldrh	r3, [r7, #2]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	b299      	uxth	r1, r3
 8000d72:	887b      	ldrh	r3, [r7, #2]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	3301      	adds	r3, #1
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	883b      	ldrh	r3, [r7, #0]
 8000d7e:	f7ff fe01 	bl	8000984 <lcd_vline>
}
 8000d82:	bf00      	nop
 8000d84:	371c      	adds	r7, #28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd90      	pop	{r4, r7, pc}
	...

08000d8c <lcd_char>:

void lcd_set_text_bg_color(uint16_t color) {
	textbgcolor = color;
}

void lcd_char(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 8000d8c:	b590      	push	{r4, r7, lr}
 8000d8e:	b087      	sub	sp, #28
 8000d90:	af02      	add	r7, sp, #8
 8000d92:	4604      	mov	r4, r0
 8000d94:	4608      	mov	r0, r1
 8000d96:	4611      	mov	r1, r2
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4623      	mov	r3, r4
 8000d9c:	80fb      	strh	r3, [r7, #6]
 8000d9e:	4603      	mov	r3, r0
 8000da0:	80bb      	strh	r3, [r7, #4]
 8000da2:	460b      	mov	r3, r1
 8000da4:	70fb      	strb	r3, [r7, #3]
 8000da6:	4613      	mov	r3, r2
 8000da8:	803b      	strh	r3, [r7, #0]

	if ((x >= _width) ||
 8000daa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dae:	4a89      	ldr	r2, [pc, #548]	; (8000fd4 <lcd_char+0x248>)
 8000db0:	8812      	ldrh	r2, [r2, #0]
 8000db2:	4293      	cmp	r3, r2
 8000db4:	f280 810a 	bge.w	8000fcc <lcd_char+0x240>
		(y >= _height) ||
 8000db8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000dbc:	4a86      	ldr	r2, [pc, #536]	; (8000fd8 <lcd_char+0x24c>)
 8000dbe:	8812      	ldrh	r2, [r2, #0]
	if ((x >= _width) ||
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	f280 8103 	bge.w	8000fcc <lcd_char+0x240>
		((x + 6 * size_x - 1) < 0) ||
 8000dc6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000dca:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000dce:	4613      	mov	r3, r2
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	4413      	add	r3, r2
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	440b      	add	r3, r1
		(y >= _height) ||
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	f340 80f7 	ble.w	8000fcc <lcd_char+0x240>
		((y + 8 * size_y - 1) < 0))
 8000dde:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000de2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000de6:	00db      	lsls	r3, r3, #3
 8000de8:	4413      	add	r3, r2
		((x + 6 * size_x - 1) < 0) ||
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f340 80ee 	ble.w	8000fcc <lcd_char+0x240>
		return;

	if (c >= 176)
 8000df0:	78fb      	ldrb	r3, [r7, #3]
 8000df2:	2baf      	cmp	r3, #175	; 0xaf
 8000df4:	d902      	bls.n	8000dfc <lcd_char+0x70>
		c++;
 8000df6:	78fb      	ldrb	r3, [r7, #3]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	70fb      	strb	r3, [r7, #3]

	lcd_start_write();
 8000dfc:	f7ff fbc2 	bl	8000584 <lcd_start_write>
	for (int8_t i = 0; i < 5; i++) {
 8000e00:	2300      	movs	r3, #0
 8000e02:	73fb      	strb	r3, [r7, #15]
 8000e04:	e0aa      	b.n	8000f5c <lcd_char+0x1d0>
		uint8_t line = font[c * 5 + i];
 8000e06:	78fa      	ldrb	r2, [r7, #3]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	441a      	add	r2, r3
 8000e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e12:	4413      	add	r3, r2
 8000e14:	4a71      	ldr	r2, [pc, #452]	; (8000fdc <lcd_char+0x250>)
 8000e16:	5cd3      	ldrb	r3, [r2, r3]
 8000e18:	73bb      	strb	r3, [r7, #14]
		for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	737b      	strb	r3, [r7, #13]
 8000e1e:	e092      	b.n	8000f46 <lcd_char+0x1ba>
			if (line & 1) {
 8000e20:	7bbb      	ldrb	r3, [r7, #14]
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d040      	beq.n	8000eac <lcd_char+0x120>
				if (size_x == 1 && size_y == 1)
 8000e2a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d116      	bne.n	8000e60 <lcd_char+0xd4>
 8000e32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d112      	bne.n	8000e60 <lcd_char+0xd4>
					lcd_pixel(x + i, y + j, color);
 8000e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	88fb      	ldrh	r3, [r7, #6]
 8000e42:	4413      	add	r3, r2
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	b218      	sxth	r0, r3
 8000e48:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	88bb      	ldrh	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	b21b      	sxth	r3, r3
 8000e56:	883a      	ldrh	r2, [r7, #0]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f7ff fd53 	bl	8000904 <lcd_pixel>
 8000e5e:	e069      	b.n	8000f34 <lcd_char+0x1a8>
				else
					lcd_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y,
 8000e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	fb12 f303 	smulbb	r3, r2, r3
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	4413      	add	r3, r2
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	b218      	sxth	r0, r3
 8000e7a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	fb12 f303 	smulbb	r3, r2, r3
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	88bb      	ldrh	r3, [r7, #4]
 8000e8e:	4413      	add	r3, r2
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	b219      	sxth	r1, r3
 8000e94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e98:	b21a      	sxth	r2, r3
 8000e9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e9e:	b21c      	sxth	r4, r3
 8000ea0:	883b      	ldrh	r3, [r7, #0]
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	4623      	mov	r3, r4
 8000ea6:	f7ff fd9f 	bl	80009e8 <lcd_fill_rect>
 8000eaa:	e043      	b.n	8000f34 <lcd_char+0x1a8>
				color);
			} else if (bg != color) {
 8000eac:	8c3a      	ldrh	r2, [r7, #32]
 8000eae:	883b      	ldrh	r3, [r7, #0]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d03f      	beq.n	8000f34 <lcd_char+0x1a8>
				if (size_x == 1 && size_y == 1)
 8000eb4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d116      	bne.n	8000eea <lcd_char+0x15e>
 8000ebc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d112      	bne.n	8000eea <lcd_char+0x15e>
					lcd_pixel(x + i, y + j, bg);
 8000ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	88fb      	ldrh	r3, [r7, #6]
 8000ecc:	4413      	add	r3, r2
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	b218      	sxth	r0, r3
 8000ed2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	88bb      	ldrh	r3, [r7, #4]
 8000eda:	4413      	add	r3, r2
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	b21b      	sxth	r3, r3
 8000ee0:	8c3a      	ldrh	r2, [r7, #32]
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f7ff fd0e 	bl	8000904 <lcd_pixel>
 8000ee8:	e024      	b.n	8000f34 <lcd_char+0x1a8>
				else
					lcd_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8000eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	fb12 f303 	smulbb	r3, r2, r3
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	88fb      	ldrh	r3, [r7, #6]
 8000efe:	4413      	add	r3, r2
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	b218      	sxth	r0, r3
 8000f04:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	fb12 f303 	smulbb	r3, r2, r3
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	88bb      	ldrh	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	b219      	sxth	r1, r3
 8000f1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f22:	b21a      	sxth	r2, r3
 8000f24:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f28:	b21c      	sxth	r4, r3
 8000f2a:	8c3b      	ldrh	r3, [r7, #32]
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	4623      	mov	r3, r4
 8000f30:	f7ff fd5a 	bl	80009e8 <lcd_fill_rect>
		for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8000f34:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	737b      	strb	r3, [r7, #13]
 8000f40:	7bbb      	ldrb	r3, [r7, #14]
 8000f42:	085b      	lsrs	r3, r3, #1
 8000f44:	73bb      	strb	r3, [r7, #14]
 8000f46:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000f4a:	2b07      	cmp	r3, #7
 8000f4c:	f77f af68 	ble.w	8000e20 <lcd_char+0x94>
	for (int8_t i = 0; i < 5; i++) {
 8000f50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	3301      	adds	r3, #1
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	73fb      	strb	r3, [r7, #15]
 8000f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f60:	2b04      	cmp	r3, #4
 8000f62:	f77f af50 	ble.w	8000e06 <lcd_char+0x7a>
			}
		}
	}
	if (bg != color) {
 8000f66:	8c3a      	ldrh	r2, [r7, #32]
 8000f68:	883b      	ldrh	r3, [r7, #0]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d02b      	beq.n	8000fc6 <lcd_char+0x23a>
		if (size_x == 1 && size_y == 1)
 8000f6e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d10c      	bne.n	8000f90 <lcd_char+0x204>
 8000f76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d108      	bne.n	8000f90 <lcd_char+0x204>
			lcd_vline(x + 5, y, 8, bg);
 8000f7e:	88fb      	ldrh	r3, [r7, #6]
 8000f80:	3305      	adds	r3, #5
 8000f82:	b298      	uxth	r0, r3
 8000f84:	88b9      	ldrh	r1, [r7, #4]
 8000f86:	8c3b      	ldrh	r3, [r7, #32]
 8000f88:	2208      	movs	r2, #8
 8000f8a:	f7ff fcfb 	bl	8000984 <lcd_vline>
 8000f8e:	e01a      	b.n	8000fc6 <lcd_char+0x23a>
		else
			lcd_fill_rect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 8000f90:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	461a      	mov	r2, r3
 8000f98:	0092      	lsls	r2, r2, #2
 8000f9a:	4413      	add	r3, r2
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	b218      	sxth	r0, r3
 8000fa6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000faa:	b21a      	sxth	r2, r3
 8000fac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	b21c      	sxth	r4, r3
 8000fb8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000fbc:	8c3b      	ldrh	r3, [r7, #32]
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	4623      	mov	r3, r4
 8000fc2:	f7ff fd11 	bl	80009e8 <lcd_fill_rect>
	}
	lcd_end_write();
 8000fc6:	f7ff fae9 	bl	800059c <lcd_end_write>
 8000fca:	e000      	b.n	8000fce <lcd_char+0x242>
		return;
 8000fcc:	bf00      	nop
}
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd90      	pop	{r4, r7, pc}
 8000fd4:	20000096 	.word	0x20000096
 8000fd8:	20000098 	.word	0x20000098
 8000fdc:	080088b4 	.word	0x080088b4

08000fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe4:	f000 ffac 	bl	8001f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe8:	f000 f866 	bl	80010b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fec:	f000 f990 	bl	8001310 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ff0:	f000 f8cc 	bl	800118c <MX_ADC1_Init>
  MX_SPI1_Init();
 8000ff4:	f000 f91c 	bl	8001230 <MX_SPI1_Init>
  MX_TIM9_Init();
 8000ff8:	f000 f950 	bl	800129c <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8000ffc:	4822      	ldr	r0, [pc, #136]	; (8001088 <main+0xa8>)
 8000ffe:	f001 f903 	bl	8002208 <HAL_ADC_Start_IT>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001002:	f04f 31ff 	mov.w	r1, #4294967295
 8001006:	4820      	ldr	r0, [pc, #128]	; (8001088 <main+0xa8>)
 8001008:	f001 f873 	bl	80020f2 <HAL_ADC_PollForConversion>
  srand(HAL_ADC_GetValue(&hadc1));						// Getting seed for RNG from ADC
 800100c:	481e      	ldr	r0, [pc, #120]	; (8001088 <main+0xa8>)
 800100e:	f001 f9b9 	bl	8002384 <HAL_ADC_GetValue>
 8001012:	4603      	mov	r3, r0
 8001014:	4618      	mov	r0, r3
 8001016:	f006 fd3b 	bl	8007a90 <srand>

  bullets.startPtr = NULL;
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <main+0xac>)
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
  bullets.endPtr = NULL;
 8001020:	4b1a      	ldr	r3, [pc, #104]	; (800108c <main+0xac>)
 8001022:	2200      	movs	r2, #0
 8001024:	605a      	str	r2, [r3, #4]
  bullets.cntrElem = 0;
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <main+0xac>)
 8001028:	2200      	movs	r2, #0
 800102a:	721a      	strb	r2, [r3, #8]
  bullets.maxItemNum = BULLETS_MAX_NUM;
 800102c:	4b17      	ldr	r3, [pc, #92]	; (800108c <main+0xac>)
 800102e:	221e      	movs	r2, #30
 8001030:	725a      	strb	r2, [r3, #9]

  mobs.startPtr = NULL;
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <main+0xb0>)
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
  mobs.endPtr = NULL;
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <main+0xb0>)
 800103a:	2200      	movs	r2, #0
 800103c:	605a      	str	r2, [r3, #4]
  mobs.cntrElem = 0;
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <main+0xb0>)
 8001040:	2200      	movs	r2, #0
 8001042:	721a      	strb	r2, [r3, #8]
  mobs.maxItemNum = MOBS_MAX_NUM;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <main+0xb0>)
 8001046:	2203      	movs	r2, #3
 8001048:	725a      	strb	r2, [r3, #9]

  HAL_TIM_Base_Start_IT(&htim9);
 800104a:	4812      	ldr	r0, [pc, #72]	; (8001094 <main+0xb4>)
 800104c:	f002 fd92 	bl	8003b74 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001050:	f003 f94c 	bl	80042ec <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of MTX1 */
  MTX1Handle = osMutexNew(&MTX1_attributes);
 8001054:	4810      	ldr	r0, [pc, #64]	; (8001098 <main+0xb8>)
 8001056:	f003 fa40 	bl	80044da <osMutexNew>
 800105a:	4603      	mov	r3, r0
 800105c:	4a0f      	ldr	r2, [pc, #60]	; (800109c <main+0xbc>)
 800105e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Draw */
  DrawHandle = osThreadNew(StartDraw, NULL, &Draw_attributes);
 8001060:	4a0f      	ldr	r2, [pc, #60]	; (80010a0 <main+0xc0>)
 8001062:	2100      	movs	r1, #0
 8001064:	480f      	ldr	r0, [pc, #60]	; (80010a4 <main+0xc4>)
 8001066:	f003 f98b 	bl	8004380 <osThreadNew>
 800106a:	4603      	mov	r3, r0
 800106c:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <main+0xc8>)
 800106e:	6013      	str	r3, [r2, #0]

  /* creation of Control */
  ControlHandle = osThreadNew(StartControl, NULL, &Control_attributes);
 8001070:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <main+0xcc>)
 8001072:	2100      	movs	r1, #0
 8001074:	480e      	ldr	r0, [pc, #56]	; (80010b0 <main+0xd0>)
 8001076:	f003 f983 	bl	8004380 <osThreadNew>
 800107a:	4603      	mov	r3, r0
 800107c:	4a0d      	ldr	r2, [pc, #52]	; (80010b4 <main+0xd4>)
 800107e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001080:	f003 f958 	bl	8004334 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001084:	e7fe      	b.n	8001084 <main+0xa4>
 8001086:	bf00      	nop
 8001088:	2000009c 	.word	0x2000009c
 800108c:	20000190 	.word	0x20000190
 8001090:	2000019c 	.word	0x2000019c
 8001094:	2000013c 	.word	0x2000013c
 8001098:	08008e70 	.word	0x08008e70
 800109c:	2000018c 	.word	0x2000018c
 80010a0:	08008e28 	.word	0x08008e28
 80010a4:	08001a61 	.word	0x08001a61
 80010a8:	20000184 	.word	0x20000184
 80010ac:	08008e4c 	.word	0x08008e4c
 80010b0:	08001ab5 	.word	0x08001ab5
 80010b4:	20000188 	.word	0x20000188

080010b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b094      	sub	sp, #80	; 0x50
 80010bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010be:	f107 0320 	add.w	r3, r7, #32
 80010c2:	2230      	movs	r2, #48	; 0x30
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f006 fbfa 	bl	80078c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010dc:	2300      	movs	r3, #0
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	4b28      	ldr	r3, [pc, #160]	; (8001184 <SystemClock_Config+0xcc>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	4a27      	ldr	r2, [pc, #156]	; (8001184 <SystemClock_Config+0xcc>)
 80010e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ea:	6413      	str	r3, [r2, #64]	; 0x40
 80010ec:	4b25      	ldr	r3, [pc, #148]	; (8001184 <SystemClock_Config+0xcc>)
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010f8:	2300      	movs	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	4b22      	ldr	r3, [pc, #136]	; (8001188 <SystemClock_Config+0xd0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001104:	4a20      	ldr	r2, [pc, #128]	; (8001188 <SystemClock_Config+0xd0>)
 8001106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <SystemClock_Config+0xd0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001118:	2301      	movs	r3, #1
 800111a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800111c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001122:	2302      	movs	r3, #2
 8001124:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001126:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800112a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800112c:	2319      	movs	r3, #25
 800112e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001130:	23a8      	movs	r3, #168	; 0xa8
 8001132:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001134:	2302      	movs	r3, #2
 8001136:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001138:	2304      	movs	r3, #4
 800113a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800113c:	f107 0320 	add.w	r3, r7, #32
 8001140:	4618      	mov	r0, r3
 8001142:	f001 fe13 	bl	8002d6c <HAL_RCC_OscConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800114c:	f000 fcda 	bl	8001b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001150:	230f      	movs	r3, #15
 8001152:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001154:	2302      	movs	r3, #2
 8001156:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800115c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001160:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	2102      	movs	r1, #2
 800116c:	4618      	mov	r0, r3
 800116e:	f002 f875 	bl	800325c <HAL_RCC_ClockConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001178:	f000 fcc4 	bl	8001b04 <Error_Handler>
  }
}
 800117c:	bf00      	nop
 800117e:	3750      	adds	r7, #80	; 0x50
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40023800 	.word	0x40023800
 8001188:	40007000 	.word	0x40007000

0800118c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001192:	463b      	mov	r3, r7
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800119e:	4b21      	ldr	r3, [pc, #132]	; (8001224 <MX_ADC1_Init+0x98>)
 80011a0:	4a21      	ldr	r2, [pc, #132]	; (8001228 <MX_ADC1_Init+0x9c>)
 80011a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011a4:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <MX_ADC1_Init+0x98>)
 80011a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011ac:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <MX_ADC1_Init+0x98>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011b2:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <MX_ADC1_Init+0x98>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011b8:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <MX_ADC1_Init+0x98>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011be:	4b19      	ldr	r3, [pc, #100]	; (8001224 <MX_ADC1_Init+0x98>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <MX_ADC1_Init+0x98>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <MX_ADC1_Init+0x98>)
 80011ce:	4a17      	ldr	r2, [pc, #92]	; (800122c <MX_ADC1_Init+0xa0>)
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <MX_ADC1_Init+0x98>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <MX_ADC1_Init+0x98>)
 80011da:	2201      	movs	r2, #1
 80011dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_ADC1_Init+0x98>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011e6:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <MX_ADC1_Init+0x98>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011ec:	480d      	ldr	r0, [pc, #52]	; (8001224 <MX_ADC1_Init+0x98>)
 80011ee:	f000 ff3d 	bl	800206c <HAL_ADC_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011f8:	f000 fc84 	bl	8001b04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001200:	2301      	movs	r3, #1
 8001202:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001208:	463b      	mov	r3, r7
 800120a:	4619      	mov	r1, r3
 800120c:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_ADC1_Init+0x98>)
 800120e:	f001 f8c7 	bl	80023a0 <HAL_ADC_ConfigChannel>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001218:	f000 fc74 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	2000009c 	.word	0x2000009c
 8001228:	40012000 	.word	0x40012000
 800122c:	0f000001 	.word	0x0f000001

08001230 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001234:	4b17      	ldr	r3, [pc, #92]	; (8001294 <MX_SPI1_Init+0x64>)
 8001236:	4a18      	ldr	r2, [pc, #96]	; (8001298 <MX_SPI1_Init+0x68>)
 8001238:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800123a:	4b16      	ldr	r3, [pc, #88]	; (8001294 <MX_SPI1_Init+0x64>)
 800123c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001240:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001242:	4b14      	ldr	r3, [pc, #80]	; (8001294 <MX_SPI1_Init+0x64>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <MX_SPI1_Init+0x64>)
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <MX_SPI1_Init+0x64>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <MX_SPI1_Init+0x64>)
 8001256:	2200      	movs	r2, #0
 8001258:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <MX_SPI1_Init+0x64>)
 800125c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001260:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <MX_SPI1_Init+0x64>)
 8001264:	2200      	movs	r2, #0
 8001266:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001268:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <MX_SPI1_Init+0x64>)
 800126a:	2200      	movs	r2, #0
 800126c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <MX_SPI1_Init+0x64>)
 8001270:	2200      	movs	r2, #0
 8001272:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001274:	4b07      	ldr	r3, [pc, #28]	; (8001294 <MX_SPI1_Init+0x64>)
 8001276:	2200      	movs	r2, #0
 8001278:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <MX_SPI1_Init+0x64>)
 800127c:	220a      	movs	r2, #10
 800127e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001280:	4804      	ldr	r0, [pc, #16]	; (8001294 <MX_SPI1_Init+0x64>)
 8001282:	f002 f997 	bl	80035b4 <HAL_SPI_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800128c:	f000 fc3a 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200000e4 	.word	0x200000e4
 8001298:	40013000 	.word	0x40013000

0800129c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a2:	463b      	mov	r3, r7
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80012ae:	4b16      	ldr	r3, [pc, #88]	; (8001308 <MX_TIM9_Init+0x6c>)
 80012b0:	4a16      	ldr	r2, [pc, #88]	; (800130c <MX_TIM9_Init+0x70>)
 80012b2:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 42000;
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <MX_TIM9_Init+0x6c>)
 80012b6:	f24a 4210 	movw	r2, #42000	; 0xa410
 80012ba:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <MX_TIM9_Init+0x6c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 6000;
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <MX_TIM9_Init+0x6c>)
 80012c4:	f241 7270 	movw	r2, #6000	; 0x1770
 80012c8:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <MX_TIM9_Init+0x6c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012d0:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <MX_TIM9_Init+0x6c>)
 80012d2:	2280      	movs	r2, #128	; 0x80
 80012d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80012d6:	480c      	ldr	r0, [pc, #48]	; (8001308 <MX_TIM9_Init+0x6c>)
 80012d8:	f002 fbfc 	bl	8003ad4 <HAL_TIM_Base_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 80012e2:	f000 fc0f 	bl	8001b04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ea:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80012ec:	463b      	mov	r3, r7
 80012ee:	4619      	mov	r1, r3
 80012f0:	4805      	ldr	r0, [pc, #20]	; (8001308 <MX_TIM9_Init+0x6c>)
 80012f2:	f002 fda9 	bl	8003e48 <HAL_TIM_ConfigClockSource>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 80012fc:	f000 fc02 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	2000013c 	.word	0x2000013c
 800130c:	40014000 	.word	0x40014000

08001310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <MX_GPIO_Init+0xd0>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a2c      	ldr	r2, [pc, #176]	; (80013e0 <MX_GPIO_Init+0xd0>)
 8001330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b2a      	ldr	r3, [pc, #168]	; (80013e0 <MX_GPIO_Init+0xd0>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	4b26      	ldr	r3, [pc, #152]	; (80013e0 <MX_GPIO_Init+0xd0>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a25      	ldr	r2, [pc, #148]	; (80013e0 <MX_GPIO_Init+0xd0>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <MX_GPIO_Init+0xd0>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	603b      	str	r3, [r7, #0]
 8001362:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <MX_GPIO_Init+0xd0>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a1e      	ldr	r2, [pc, #120]	; (80013e0 <MX_GPIO_Init+0xd0>)
 8001368:	f043 0302 	orr.w	r3, r3, #2
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <MX_GPIO_Init+0xd0>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	2102      	movs	r1, #2
 800137e:	4819      	ldr	r0, [pc, #100]	; (80013e4 <MX_GPIO_Init+0xd4>)
 8001380:	f001 fcc2 	bl	8002d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin|LCD_A0_Pin, GPIO_PIN_SET);
 8001384:	2201      	movs	r2, #1
 8001386:	2150      	movs	r1, #80	; 0x50
 8001388:	4816      	ldr	r0, [pc, #88]	; (80013e4 <MX_GPIO_Init+0xd4>)
 800138a:	f001 fcbd 	bl	8002d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_CS_Pin LCD_A0_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_CS_Pin|LCD_A0_Pin;
 800138e:	2352      	movs	r3, #82	; 0x52
 8001390:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001392:	2301      	movs	r3, #1
 8001394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139e:	f107 030c 	add.w	r3, r7, #12
 80013a2:	4619      	mov	r1, r3
 80013a4:	480f      	ldr	r0, [pc, #60]	; (80013e4 <MX_GPIO_Init+0xd4>)
 80013a6:	f001 fb2b 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013b0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	4619      	mov	r1, r3
 80013c0:	4809      	ldr	r0, [pc, #36]	; (80013e8 <MX_GPIO_Init+0xd8>)
 80013c2:	f001 fb1d 	bl	8002a00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2105      	movs	r1, #5
 80013ca:	2028      	movs	r0, #40	; 0x28
 80013cc:	f001 fae1 	bl	8002992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013d0:	2028      	movs	r0, #40	; 0x28
 80013d2:	f001 fafa 	bl	80029ca <HAL_NVIC_EnableIRQ>

}
 80013d6:	bf00      	nop
 80013d8:	3720      	adds	r7, #32
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40020400 	.word	0x40020400

080013ec <addQueueFrame>:
/*
 * rand() function doesnt work right
 *
 * */
uint8_t addQueueFrame(item_t *Item)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
    if (Item->cntrElem < Item->maxItemNum)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001400:	429a      	cmp	r2, r3
 8001402:	da2e      	bge.n	8001462 <addQueueFrame+0x76>
    {
        queue *nextBuf = (queue *)malloc(sizeof(queue));
 8001404:	200c      	movs	r0, #12
 8001406:	f006 fa3d 	bl	8007884 <malloc>
 800140a:	4603      	mov	r3, r0
 800140c:	60fb      	str	r3, [r7, #12]
        queue *prevBuf = Item->endPtr;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	60bb      	str	r3, [r7, #8]
        if(nextBuf) {
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d023      	beq.n	8001462 <addQueueFrame+0x76>
          Item->endPtr = (Item->endPtr == NULL)  ?  (Item->startPtr = nextBuf)  :  (queue *)(Item->endPtr->nextElem = (struct queue *)nextBuf);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d105      	bne.n	800142e <addQueueFrame+0x42>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	e004      	b.n	8001438 <addQueueFrame+0x4c>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	6053      	str	r3, [r2, #4]
          Item->endPtr->nextElem = NULL;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	605a      	str	r2, [r3, #4]
          Item->endPtr->prevElem = (struct queue *)prevBuf;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	609a      	str	r2, [r3, #8]
          Item->cntrElem++;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	3301      	adds	r3, #1
 8001456:	b2db      	uxtb	r3, r3
 8001458:	b25a      	sxtb	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	721a      	strb	r2, [r3, #8]
          return 0;
 800145e:	2300      	movs	r3, #0
 8001460:	e000      	b.n	8001464 <addQueueFrame+0x78>
        }
    }
    return 1;
 8001462:	2301      	movs	r3, #1
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <delQueueFrame>:

void delQueueFrame(item_t *Item, queue *frame)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
    if (Item->cntrElem > 0 && frame != NULL)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800147c:	2b00      	cmp	r3, #0
 800147e:	dd45      	ble.n	800150c <delQueueFrame+0xa0>
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d042      	beq.n	800150c <delQueueFrame+0xa0>
    {
        if (Item->startPtr == frame && Item->endPtr == frame) {     // 1 - element queue
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	429a      	cmp	r2, r3
 800148e:	d10b      	bne.n	80014a8 <delQueueFrame+0x3c>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	429a      	cmp	r2, r3
 8001498:	d106      	bne.n	80014a8 <delQueueFrame+0x3c>
            Item->startPtr = NULL;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
            Item->endPtr = NULL;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	e025      	b.n	80014f4 <delQueueFrame+0x88>
        } else if (Item->startPtr == frame) {                       // frame == start
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d108      	bne.n	80014c4 <delQueueFrame+0x58>
            Item->startPtr = (queue*)frame->nextElem;
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	601a      	str	r2, [r3, #0]
            Item->startPtr->prevElem = NULL;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	e017      	b.n	80014f4 <delQueueFrame+0x88>
        } else if (Item->endPtr == frame) {                         // frame == end
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d108      	bne.n	80014e0 <delQueueFrame+0x74>
            Item->endPtr = (queue*)frame->prevElem;
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	605a      	str	r2, [r3, #4]
            Item->endPtr->nextElem = NULL;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	e009      	b.n	80014f4 <delQueueFrame+0x88>
        } else {                                                    // frame is between start and end
            ((queue*)frame->prevElem)->nextElem = frame->nextElem;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	6852      	ldr	r2, [r2, #4]
 80014e8:	605a      	str	r2, [r3, #4]
            ((queue*)frame->nextElem)->prevElem = frame->prevElem;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	6892      	ldr	r2, [r2, #8]
 80014f2:	609a      	str	r2, [r3, #8]
        }

        free(frame);
 80014f4:	6838      	ldr	r0, [r7, #0]
 80014f6:	f006 f9cd 	bl	8007894 <free>
        --(Item->cntrElem);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	3b01      	subs	r3, #1
 8001504:	b2db      	uxtb	r3, r3
 8001506:	b25a      	sxtb	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	721a      	strb	r2, [r3, #8]
    }
}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <protagonistDraw>:

void protagonistDraw()
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af02      	add	r7, sp, #8
	if(POSITION(adc_value) != POSITION(adc_prev_value)) {					// motionless protagonist figure flicker reduction
 800151a:	4b49      	ldr	r3, [pc, #292]	; (8001640 <protagonistDraw+0x12c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001522:	228c      	movs	r2, #140	; 0x8c
 8001524:	fb03 f202 	mul.w	r2, r3, r2
 8001528:	4b46      	ldr	r3, [pc, #280]	; (8001644 <protagonistDraw+0x130>)
 800152a:	fba3 1302 	umull	r1, r3, r3, r2
 800152e:	1ad2      	subs	r2, r2, r3
 8001530:	0852      	lsrs	r2, r2, #1
 8001532:	4413      	add	r3, r2
 8001534:	0ada      	lsrs	r2, r3, #11
 8001536:	4b44      	ldr	r3, [pc, #272]	; (8001648 <protagonistDraw+0x134>)
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800153e:	218c      	movs	r1, #140	; 0x8c
 8001540:	fb01 f303 	mul.w	r3, r1, r3
 8001544:	4941      	ldr	r1, [pc, #260]	; (800164c <protagonistDraw+0x138>)
 8001546:	fb81 0103 	smull	r0, r1, r1, r3
 800154a:	4419      	add	r1, r3
 800154c:	12c9      	asrs	r1, r1, #11
 800154e:	17db      	asrs	r3, r3, #31
 8001550:	1acb      	subs	r3, r1, r3
 8001552:	429a      	cmp	r2, r3
 8001554:	d071      	beq.n	800163a <protagonistDraw+0x126>
			osMutexAcquire(MTX1Handle, osWaitForever);
 8001556:	4b3e      	ldr	r3, [pc, #248]	; (8001650 <protagonistDraw+0x13c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f04f 31ff 	mov.w	r1, #4294967295
 800155e:	4618      	mov	r0, r3
 8001560:	f003 f841 	bl	80045e6 <osMutexAcquire>
			lcd_fill_rect( 3, POSITION(adc_prev_value), 14, 20, ST7735_BLACK);
 8001564:	4b38      	ldr	r3, [pc, #224]	; (8001648 <protagonistDraw+0x134>)
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800156c:	228c      	movs	r2, #140	; 0x8c
 800156e:	fb02 f303 	mul.w	r3, r2, r3
 8001572:	4a36      	ldr	r2, [pc, #216]	; (800164c <protagonistDraw+0x138>)
 8001574:	fb82 1203 	smull	r1, r2, r2, r3
 8001578:	441a      	add	r2, r3
 800157a:	12d2      	asrs	r2, r2, #11
 800157c:	17db      	asrs	r3, r3, #31
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	b219      	sxth	r1, r3
 8001582:	2300      	movs	r3, #0
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	2314      	movs	r3, #20
 8001588:	220e      	movs	r2, #14
 800158a:	2003      	movs	r0, #3
 800158c:	f7ff fa2c 	bl	80009e8 <lcd_fill_rect>
			lcd_fill_rect( 3, POSITION(adc_value),       5, 20, ST7735_CYAN);
 8001590:	4b2b      	ldr	r3, [pc, #172]	; (8001640 <protagonistDraw+0x12c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001598:	228c      	movs	r2, #140	; 0x8c
 800159a:	fb03 f202 	mul.w	r2, r3, r2
 800159e:	4b29      	ldr	r3, [pc, #164]	; (8001644 <protagonistDraw+0x130>)
 80015a0:	fba3 1302 	umull	r1, r3, r3, r2
 80015a4:	1ad2      	subs	r2, r2, r3
 80015a6:	0852      	lsrs	r2, r2, #1
 80015a8:	4413      	add	r3, r2
 80015aa:	0adb      	lsrs	r3, r3, #11
 80015ac:	b219      	sxth	r1, r3
 80015ae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2314      	movs	r3, #20
 80015b6:	2205      	movs	r2, #5
 80015b8:	2003      	movs	r0, #3
 80015ba:	f7ff fa15 	bl	80009e8 <lcd_fill_rect>
			lcd_fill_rect( 8, POSITION(adc_value) + 5,   3, 10, ST7735_CYAN);
 80015be:	4b20      	ldr	r3, [pc, #128]	; (8001640 <protagonistDraw+0x12c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015c6:	228c      	movs	r2, #140	; 0x8c
 80015c8:	fb03 f202 	mul.w	r2, r3, r2
 80015cc:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <protagonistDraw+0x130>)
 80015ce:	fba3 1302 	umull	r1, r3, r3, r2
 80015d2:	1ad2      	subs	r2, r2, r3
 80015d4:	0852      	lsrs	r2, r2, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	0adb      	lsrs	r3, r3, #11
 80015da:	b29b      	uxth	r3, r3
 80015dc:	3305      	adds	r3, #5
 80015de:	b29b      	uxth	r3, r3
 80015e0:	b219      	sxth	r1, r3
 80015e2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	230a      	movs	r3, #10
 80015ea:	2203      	movs	r2, #3
 80015ec:	2008      	movs	r0, #8
 80015ee:	f7ff f9fb 	bl	80009e8 <lcd_fill_rect>
			lcd_fill_rect(11, POSITION(adc_value) + 8,   3,  4, ST7735_CYAN);
 80015f2:	4b13      	ldr	r3, [pc, #76]	; (8001640 <protagonistDraw+0x12c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015fa:	228c      	movs	r2, #140	; 0x8c
 80015fc:	fb03 f202 	mul.w	r2, r3, r2
 8001600:	4b10      	ldr	r3, [pc, #64]	; (8001644 <protagonistDraw+0x130>)
 8001602:	fba3 1302 	umull	r1, r3, r3, r2
 8001606:	1ad2      	subs	r2, r2, r3
 8001608:	0852      	lsrs	r2, r2, #1
 800160a:	4413      	add	r3, r2
 800160c:	0adb      	lsrs	r3, r3, #11
 800160e:	b29b      	uxth	r3, r3
 8001610:	3308      	adds	r3, #8
 8001612:	b29b      	uxth	r3, r3
 8001614:	b219      	sxth	r1, r3
 8001616:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	2304      	movs	r3, #4
 800161e:	2203      	movs	r2, #3
 8001620:	200b      	movs	r0, #11
 8001622:	f7ff f9e1 	bl	80009e8 <lcd_fill_rect>
			adc_prev_value = adc_value;
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <protagonistDraw+0x12c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	b29a      	uxth	r2, r3
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <protagonistDraw+0x134>)
 800162e:	801a      	strh	r2, [r3, #0]
			osMutexRelease(MTX1Handle);
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <protagonistDraw+0x13c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f003 f821 	bl	800467c <osMutexRelease>
	}
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	200001a8 	.word	0x200001a8
 8001644:	00100101 	.word	0x00100101
 8001648:	200001ac 	.word	0x200001ac
 800164c:	80080081 	.word	0x80080081
 8001650:	2000018c 	.word	0x2000018c

08001654 <bulletDraw>:

void bulletDraw()
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af02      	add	r7, sp, #8
	for(queue *buffer = bullets.startPtr; buffer != NULL; buffer = (queue*)(buffer->nextElem)) {
 800165a:	4b20      	ldr	r3, [pc, #128]	; (80016dc <bulletDraw+0x88>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	e034      	b.n	80016cc <bulletDraw+0x78>
		if((buffer->x + 5) < 127) {
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b79      	cmp	r3, #121	; 0x79
 8001668:	d81d      	bhi.n	80016a6 <bulletDraw+0x52>
			lcd_fill_rect(buffer->x++, buffer->y, 5, 2, ST7735_BLACK);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	b2d1      	uxtb	r1, r2
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	7011      	strb	r1, [r2, #0]
 8001676:	b218      	sxth	r0, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	785b      	ldrb	r3, [r3, #1]
 800167c:	b219      	sxth	r1, r3
 800167e:	2300      	movs	r3, #0
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	2302      	movs	r3, #2
 8001684:	2205      	movs	r2, #5
 8001686:	f7ff f9af 	bl	80009e8 <lcd_fill_rect>
			lcd_fill_rect(buffer->x,   buffer->y, 5, 2, ST7735_GREEN);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	b218      	sxth	r0, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	785b      	ldrb	r3, [r3, #1]
 8001694:	b219      	sxth	r1, r3
 8001696:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	2302      	movs	r3, #2
 800169e:	2205      	movs	r2, #5
 80016a0:	f7ff f9a2 	bl	80009e8 <lcd_fill_rect>
 80016a4:	e00f      	b.n	80016c6 <bulletDraw+0x72>
		} else {
			lcd_fill_rect(buffer->x, buffer->y, 5, 2, ST7735_BLACK);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	b218      	sxth	r0, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	785b      	ldrb	r3, [r3, #1]
 80016b0:	b219      	sxth	r1, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	2302      	movs	r3, #2
 80016b8:	2205      	movs	r2, #5
 80016ba:	f7ff f995 	bl	80009e8 <lcd_fill_rect>
			delQueueFrame(&bullets, buffer);
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	4806      	ldr	r0, [pc, #24]	; (80016dc <bulletDraw+0x88>)
 80016c2:	f7ff fed3 	bl	800146c <delQueueFrame>
	for(queue *buffer = bullets.startPtr; buffer != NULL; buffer = (queue*)(buffer->nextElem)) {
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1c7      	bne.n	8001662 <bulletDraw+0xe>
		}
	}
}
 80016d2:	bf00      	nop
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000190 	.word	0x20000190

080016e0 <mobDraw>:

void mobDraw()
{
 80016e0:	b590      	push	{r4, r7, lr}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af02      	add	r7, sp, #8
	for(queue *buffer = mobs.startPtr; buffer != NULL; buffer = (queue*)(buffer->nextElem)) {
 80016e6:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <mobDraw+0xb0>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	e047      	b.n	800177e <mobDraw+0x9e>
			lcd_line(buffer->x - 5, buffer->y - 5, buffer->x + 5, buffer->y + 5, ST7735_RED);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	3b05      	subs	r3, #5
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	b218      	sxth	r0, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	785b      	ldrb	r3, [r3, #1]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	3b05      	subs	r3, #5
 8001702:	b29b      	uxth	r3, r3
 8001704:	b219      	sxth	r1, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	b29b      	uxth	r3, r3
 800170c:	3305      	adds	r3, #5
 800170e:	b29b      	uxth	r3, r3
 8001710:	b21a      	sxth	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	785b      	ldrb	r3, [r3, #1]
 8001716:	b29b      	uxth	r3, r3
 8001718:	3305      	adds	r3, #5
 800171a:	b29b      	uxth	r3, r3
 800171c:	b21b      	sxth	r3, r3
 800171e:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8001722:	9400      	str	r4, [sp, #0]
 8001724:	f7ff f9e0 	bl	8000ae8 <lcd_line>
			lcd_line(buffer->x + 5, buffer->y - 5, buffer->x - 5, buffer->y + 5, ST7735_RED);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	b29b      	uxth	r3, r3
 800172e:	3305      	adds	r3, #5
 8001730:	b29b      	uxth	r3, r3
 8001732:	b218      	sxth	r0, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	785b      	ldrb	r3, [r3, #1]
 8001738:	b29b      	uxth	r3, r3
 800173a:	3b05      	subs	r3, #5
 800173c:	b29b      	uxth	r3, r3
 800173e:	b219      	sxth	r1, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	b29b      	uxth	r3, r3
 8001746:	3b05      	subs	r3, #5
 8001748:	b29b      	uxth	r3, r3
 800174a:	b21a      	sxth	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	785b      	ldrb	r3, [r3, #1]
 8001750:	b29b      	uxth	r3, r3
 8001752:	3305      	adds	r3, #5
 8001754:	b29b      	uxth	r3, r3
 8001756:	b21b      	sxth	r3, r3
 8001758:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800175c:	9400      	str	r4, [sp, #0]
 800175e:	f7ff f9c3 	bl	8000ae8 <lcd_line>
			lcd_fill_circle(buffer->x, buffer->y, 5, ST7735_RED);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	b218      	sxth	r0, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	785b      	ldrb	r3, [r3, #1]
 800176c:	b219      	sxth	r1, r3
 800176e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001772:	2205      	movs	r2, #5
 8001774:	f7ff fa5a 	bl	8000c2c <lcd_fill_circle>
	for(queue *buffer = mobs.startPtr; buffer != NULL; buffer = (queue*)(buffer->nextElem)) {
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1b4      	bne.n	80016ee <mobDraw+0xe>
	}
}
 8001784:	bf00      	nop
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	bd90      	pop	{r4, r7, pc}
 800178e:	bf00      	nop
 8001790:	2000019c 	.word	0x2000019c

08001794 <collisionFinder>:

void collisionFinder()
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af02      	add	r7, sp, #8
	for(queue *bulletBuffer = bullets.startPtr; bulletBuffer != NULL && bulletBuffer->x > TERMINAL_XLINE && bulletBuffer->x < TERMINAL_XLINE + 10; bulletBuffer = (queue*)(bulletBuffer->nextElem))
 800179a:	4b31      	ldr	r3, [pc, #196]	; (8001860 <collisionFinder+0xcc>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	e04f      	b.n	8001842 <collisionFinder+0xae>
		for (queue *mobBuffer = mobs.startPtr; mobBuffer != NULL; mobBuffer = (queue*)(mobBuffer->nextElem))
 80017a2:	4b30      	ldr	r3, [pc, #192]	; (8001864 <collisionFinder+0xd0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	e045      	b.n	8001836 <collisionFinder+0xa2>
			if ((bulletBuffer->y < mobBuffer->y + 5 && bulletBuffer->y > mobBuffer->y - 5) || (bulletBuffer->y + 2 > mobBuffer->y - 5 && bulletBuffer->y + 2 < mobBuffer->y + 5)) {
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	785b      	ldrb	r3, [r3, #1]
 80017ae:	3304      	adds	r3, #4
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	7852      	ldrb	r2, [r2, #1]
 80017b4:	4293      	cmp	r3, r2
 80017b6:	db06      	blt.n	80017c6 <collisionFinder+0x32>
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	785b      	ldrb	r3, [r3, #1]
 80017bc:	3b04      	subs	r3, #4
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	7852      	ldrb	r2, [r2, #1]
 80017c2:	4293      	cmp	r3, r2
 80017c4:	dd0e      	ble.n	80017e4 <collisionFinder+0x50>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	785b      	ldrb	r3, [r3, #1]
 80017ca:	1c5a      	adds	r2, r3, #1
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	785b      	ldrb	r3, [r3, #1]
 80017d0:	3b05      	subs	r3, #5
 80017d2:	429a      	cmp	r2, r3
 80017d4:	db2c      	blt.n	8001830 <collisionFinder+0x9c>
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	785b      	ldrb	r3, [r3, #1]
 80017da:	3302      	adds	r3, #2
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	7852      	ldrb	r2, [r2, #1]
 80017e0:	4293      	cmp	r3, r2
 80017e2:	db25      	blt.n	8001830 <collisionFinder+0x9c>
				lcd_fill_rect(bulletBuffer->x, bulletBuffer->y, 5, 2, ST7735_BLACK);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b218      	sxth	r0, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	785b      	ldrb	r3, [r3, #1]
 80017ee:	b219      	sxth	r1, r3
 80017f0:	2300      	movs	r3, #0
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	2302      	movs	r3, #2
 80017f6:	2205      	movs	r2, #5
 80017f8:	f7ff f8f6 	bl	80009e8 <lcd_fill_rect>
				delQueueFrame(&bullets, bulletBuffer);
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	4818      	ldr	r0, [pc, #96]	; (8001860 <collisionFinder+0xcc>)
 8001800:	f7ff fe34 	bl	800146c <delQueueFrame>
				lcd_fill_rect(mobBuffer->x - 5, mobBuffer->y - 5, 10, 10, ST7735_BLACK);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	b29b      	uxth	r3, r3
 800180a:	3b05      	subs	r3, #5
 800180c:	b29b      	uxth	r3, r3
 800180e:	b218      	sxth	r0, r3
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	785b      	ldrb	r3, [r3, #1]
 8001814:	b29b      	uxth	r3, r3
 8001816:	3b05      	subs	r3, #5
 8001818:	b29b      	uxth	r3, r3
 800181a:	b219      	sxth	r1, r3
 800181c:	2300      	movs	r3, #0
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	230a      	movs	r3, #10
 8001822:	220a      	movs	r2, #10
 8001824:	f7ff f8e0 	bl	80009e8 <lcd_fill_rect>
				delQueueFrame(&mobs, mobBuffer);
 8001828:	6839      	ldr	r1, [r7, #0]
 800182a:	480e      	ldr	r0, [pc, #56]	; (8001864 <collisionFinder+0xd0>)
 800182c:	f7ff fe1e 	bl	800146c <delQueueFrame>
		for (queue *mobBuffer = mobs.startPtr; mobBuffer != NULL; mobBuffer = (queue*)(mobBuffer->nextElem))
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	603b      	str	r3, [r7, #0]
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1b6      	bne.n	80017aa <collisionFinder+0x16>
	for(queue *bulletBuffer = bullets.startPtr; bulletBuffer != NULL && bulletBuffer->x > TERMINAL_XLINE && bulletBuffer->x < TERMINAL_XLINE + 10; bulletBuffer = (queue*)(bulletBuffer->nextElem))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d007      	beq.n	8001858 <collisionFinder+0xc4>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b70      	cmp	r3, #112	; 0x70
 800184e:	d903      	bls.n	8001858 <collisionFinder+0xc4>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b79      	cmp	r3, #121	; 0x79
 8001856:	d9a4      	bls.n	80017a2 <collisionFinder+0xe>
			}
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000190 	.word	0x20000190
 8001864:	2000019c 	.word	0x2000019c

08001868 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	80fb      	strh	r3, [r7, #6]
	if(!addQueueFrame(&bullets)) {
 8001872:	4811      	ldr	r0, [pc, #68]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x50>)
 8001874:	f7ff fdba 	bl	80013ec <addQueueFrame>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d117      	bne.n	80018ae <HAL_GPIO_EXTI_Callback+0x46>
		bullets.endPtr->x = 14;
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x50>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	220e      	movs	r2, #14
 8001884:	701a      	strb	r2, [r3, #0]
		bullets.endPtr->y = POSITION(adc_prev_value) + 9;		// !
 8001886:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <HAL_GPIO_EXTI_Callback+0x54>)
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800188e:	228c      	movs	r2, #140	; 0x8c
 8001890:	fb02 f303 	mul.w	r3, r2, r3
 8001894:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <HAL_GPIO_EXTI_Callback+0x58>)
 8001896:	fb82 1203 	smull	r1, r2, r2, r3
 800189a:	441a      	add	r2, r3
 800189c:	12d2      	asrs	r2, r2, #11
 800189e:	17db      	asrs	r3, r3, #31
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x50>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	3209      	adds	r2, #9
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	705a      	strb	r2, [r3, #1]
	}
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000190 	.word	0x20000190
 80018bc:	200001ac 	.word	0x200001ac
 80018c0:	80080081 	.word	0x80080081

080018c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af04      	add	r7, sp, #16
 80018ca:	6078      	str	r0, [r7, #4]
	if(htim != &htim9)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a5f      	ldr	r2, [pc, #380]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x188>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	f040 80b7 	bne.w	8001a44 <HAL_TIM_PeriodElapsedCallback+0x180>
			return;

	if(!addQueueFrame(&mobs)) {
 80018d6:	485e      	ldr	r0, [pc, #376]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80018d8:	f7ff fd88 	bl	80013ec <addQueueFrame>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f040 8085 	bne.w	80019ee <HAL_TIM_PeriodElapsedCallback+0x12a>
		mobs.endPtr->x = 117;				// x,y - mob`s center coordinates
 80018e4:	4b5a      	ldr	r3, [pc, #360]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2275      	movs	r2, #117	; 0x75
 80018ea:	701a      	strb	r2, [r3, #0]
		mobs.endPtr->y = POSITION(rand());
 80018ec:	f006 f8fe 	bl	8007aec <rand>
 80018f0:	4603      	mov	r3, r0
 80018f2:	425a      	negs	r2, r3
 80018f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80018fc:	bf58      	it	pl
 80018fe:	4253      	negpl	r3, r2
 8001900:	228c      	movs	r2, #140	; 0x8c
 8001902:	fb02 f303 	mul.w	r3, r2, r3
 8001906:	4a53      	ldr	r2, [pc, #332]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001908:	fb82 1203 	smull	r1, r2, r2, r3
 800190c:	441a      	add	r2, r3
 800190e:	12d2      	asrs	r2, r2, #11
 8001910:	17db      	asrs	r3, r3, #31
 8001912:	1ad2      	subs	r2, r2, r3
 8001914:	4b4e      	ldr	r3, [pc, #312]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	705a      	strb	r2, [r3, #1]

		uint8_t cntr = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	73fb      	strb	r3, [r7, #15]

		for(queue *buffer = mobs.startPtr; buffer->nextElem != NULL; buffer = (queue*)(buffer->nextElem))
 8001920:	4b4b      	ldr	r3, [pc, #300]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	e05e      	b.n	80019e6 <HAL_TIM_PeriodElapsedCallback+0x122>
			if((mobs.endPtr->y - 5 <= buffer->y + 6 && mobs.endPtr->y - 5 >= buffer->y - 6) || (mobs.endPtr->y + 5 <= buffer->y + 6 && mobs.endPtr->y + 5 <= buffer->y - 6)){
 8001928:	4b49      	ldr	r3, [pc, #292]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	785b      	ldrb	r3, [r3, #1]
 800192e:	1f5a      	subs	r2, r3, #5
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	785b      	ldrb	r3, [r3, #1]
 8001934:	3306      	adds	r3, #6
 8001936:	429a      	cmp	r2, r3
 8001938:	dc08      	bgt.n	800194c <HAL_TIM_PeriodElapsedCallback+0x88>
 800193a:	4b45      	ldr	r3, [pc, #276]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	785b      	ldrb	r3, [r3, #1]
 8001940:	461a      	mov	r2, r3
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	785b      	ldrb	r3, [r3, #1]
 8001946:	3b01      	subs	r3, #1
 8001948:	429a      	cmp	r2, r3
 800194a:	da11      	bge.n	8001970 <HAL_TIM_PeriodElapsedCallback+0xac>
 800194c:	4b40      	ldr	r3, [pc, #256]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	785b      	ldrb	r3, [r3, #1]
 8001952:	461a      	mov	r2, r3
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	785b      	ldrb	r3, [r3, #1]
 8001958:	3301      	adds	r3, #1
 800195a:	429a      	cmp	r2, r3
 800195c:	dc40      	bgt.n	80019e0 <HAL_TIM_PeriodElapsedCallback+0x11c>
 800195e:	4b3c      	ldr	r3, [pc, #240]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	785b      	ldrb	r3, [r3, #1]
 8001964:	1d1a      	adds	r2, r3, #4
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	785b      	ldrb	r3, [r3, #1]
 800196a:	3b06      	subs	r3, #6
 800196c:	429a      	cmp	r2, r3
 800196e:	da37      	bge.n	80019e0 <HAL_TIM_PeriodElapsedCallback+0x11c>
				mobs.endPtr->y = POSITION(rand());
 8001970:	f006 f8bc 	bl	8007aec <rand>
 8001974:	4603      	mov	r3, r0
 8001976:	425a      	negs	r2, r3
 8001978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800197c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001980:	bf58      	it	pl
 8001982:	4253      	negpl	r3, r2
 8001984:	228c      	movs	r2, #140	; 0x8c
 8001986:	fb02 f303 	mul.w	r3, r2, r3
 800198a:	4a32      	ldr	r2, [pc, #200]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800198c:	fb82 1203 	smull	r1, r2, r2, r3
 8001990:	441a      	add	r2, r3
 8001992:	12d2      	asrs	r2, r2, #11
 8001994:	17db      	asrs	r3, r3, #31
 8001996:	1ad2      	subs	r2, r2, r3
 8001998:	4b2d      	ldr	r3, [pc, #180]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	705a      	strb	r2, [r3, #1]
				buffer = mobs.startPtr;
 80019a0:	4b2b      	ldr	r3, [pc, #172]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	60bb      	str	r3, [r7, #8]
				lcd_char(50, 0, (char)((cntr %= 10) + 48), ST7735_WHITE, ST7735_BLACK, 1, 1);
 80019a6:	7bfa      	ldrb	r2, [r7, #15]
 80019a8:	4b2b      	ldr	r3, [pc, #172]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80019aa:	fba3 1302 	umull	r1, r3, r3, r2
 80019ae:	08d9      	lsrs	r1, r3, #3
 80019b0:	460b      	mov	r3, r1
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	73fb      	strb	r3, [r7, #15]
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	3330      	adds	r3, #48	; 0x30
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	2301      	movs	r3, #1
 80019c4:	9302      	str	r3, [sp, #8]
 80019c6:	2301      	movs	r3, #1
 80019c8:	9301      	str	r3, [sp, #4]
 80019ca:	2300      	movs	r3, #0
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019d2:	2100      	movs	r1, #0
 80019d4:	2032      	movs	r0, #50	; 0x32
 80019d6:	f7ff f9d9 	bl	8000d8c <lcd_char>
				cntr++;
 80019da:	7bfb      	ldrb	r3, [r7, #15]
 80019dc:	3301      	adds	r3, #1
 80019de:	73fb      	strb	r3, [r7, #15]
		for(queue *buffer = mobs.startPtr; buffer->nextElem != NULL; buffer = (queue*)(buffer->nextElem))
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d19c      	bne.n	8001928 <HAL_TIM_PeriodElapsedCallback+0x64>
			}

	}
	__HAL_TIM_SET_AUTORELOAD(&htim9, rand() % 8000 + 2000);
 80019ee:	f006 f87d 	bl	8007aec <rand>
 80019f2:	4602      	mov	r2, r0
 80019f4:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x198>)
 80019f6:	fb83 1302 	smull	r1, r3, r3, r2
 80019fa:	1259      	asrs	r1, r3, #9
 80019fc:	17d3      	asrs	r3, r2, #31
 80019fe:	1acb      	subs	r3, r1, r3
 8001a00:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001a04:	fb01 f303 	mul.w	r3, r1, r3
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8001a0e:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a14:	f006 f86a 	bl	8007aec <rand>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001a1c:	fb83 1302 	smull	r1, r3, r3, r2
 8001a20:	1259      	asrs	r1, r3, #9
 8001a22:	17d3      	asrs	r3, r2, #31
 8001a24:	1acb      	subs	r3, r1, r3
 8001a26:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001a2a:	fb01 f303 	mul.w	r3, r1, r3
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001a38:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COUNTER(&htim9, 0);
 8001a3a:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	625a      	str	r2, [r3, #36]	; 0x24
 8001a42:	e000      	b.n	8001a46 <HAL_TIM_PeriodElapsedCallback+0x182>
			return;
 8001a44:	bf00      	nop
}
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	2000013c 	.word	0x2000013c
 8001a50:	2000019c 	.word	0x2000019c
 8001a54:	80080081 	.word	0x80080081
 8001a58:	cccccccd 	.word	0xcccccccd
 8001a5c:	10624dd3 	.word	0x10624dd3

08001a60 <StartDraw>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDraw */
void StartDraw(void *argument)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	if(lcd_init())
 8001a68:	f7fe fe5a 	bl	8000720 <lcd_init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d000      	beq.n	8001a74 <StartDraw+0x14>
	  while(1){}
 8001a72:	e7fe      	b.n	8001a72 <StartDraw+0x12>
	lcd_fill(ST7735_BLACK);
 8001a74:	2000      	movs	r0, #0
 8001a76:	f7ff f81d 	bl	8000ab4 <lcd_fill>
	adc_value = 2048;
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <StartDraw+0x4c>)
 8001a7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a80:	601a      	str	r2, [r3, #0]
	adc_prev_value = adc_value + 1024;		// adc_prev_value != adc_prev_value at first
 8001a82:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <StartDraw+0x4c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <StartDraw+0x50>)
 8001a90:	801a      	strh	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	protagonistDraw();
 8001a92:	f7ff fd3f 	bl	8001514 <protagonistDraw>
	bulletDraw();
 8001a96:	f7ff fddd 	bl	8001654 <bulletDraw>
	collisionFinder();
 8001a9a:	f7ff fe7b 	bl	8001794 <collisionFinder>
	mobDraw();
 8001a9e:	f7ff fe1f 	bl	80016e0 <mobDraw>

    osDelay(FPS_TO_TICKS(60));
 8001aa2:	2010      	movs	r0, #16
 8001aa4:	f002 fcfe 	bl	80044a4 <osDelay>
	protagonistDraw();
 8001aa8:	e7f3      	b.n	8001a92 <StartDraw+0x32>
 8001aaa:	bf00      	nop
 8001aac:	200001a8 	.word	0x200001a8
 8001ab0:	200001ac 	.word	0x200001ac

08001ab4 <StartControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControl */
void StartControl(void *argument)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControl */
  /* Infinite loop */
  for(;;)
  {
	HAL_ADC_Start_IT(&hadc1);
 8001abc:	480e      	ldr	r0, [pc, #56]	; (8001af8 <StartControl+0x44>)
 8001abe:	f000 fba3 	bl	8002208 <HAL_ADC_Start_IT>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001ac2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac6:	480c      	ldr	r0, [pc, #48]	; (8001af8 <StartControl+0x44>)
 8001ac8:	f000 fb13 	bl	80020f2 <HAL_ADC_PollForConversion>

	osMutexAcquire(MTX1Handle, osWaitForever);
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <StartControl+0x48>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f002 fd86 	bl	80045e6 <osMutexAcquire>
	adc_value = HAL_ADC_GetValue(&hadc1);
 8001ada:	4807      	ldr	r0, [pc, #28]	; (8001af8 <StartControl+0x44>)
 8001adc:	f000 fc52 	bl	8002384 <HAL_ADC_GetValue>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	4a07      	ldr	r2, [pc, #28]	; (8001b00 <StartControl+0x4c>)
 8001ae4:	6013      	str	r3, [r2, #0]
	osMutexRelease(MTX1Handle);
 8001ae6:	4b05      	ldr	r3, [pc, #20]	; (8001afc <StartControl+0x48>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f002 fdc6 	bl	800467c <osMutexRelease>

    osDelay(FPS_TO_TICKS(60));
 8001af0:	2010      	movs	r0, #16
 8001af2:	f002 fcd7 	bl	80044a4 <osDelay>
	HAL_ADC_Start_IT(&hadc1);
 8001af6:	e7e1      	b.n	8001abc <StartControl+0x8>
 8001af8:	2000009c 	.word	0x2000009c
 8001afc:	2000018c 	.word	0x2000018c
 8001b00:	200001a8 	.word	0x200001a8

08001b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b08:	b672      	cpsid	i
}
 8001b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b0c:	e7fe      	b.n	8001b0c <Error_Handler+0x8>
	...

08001b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_MspInit+0x54>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	4a11      	ldr	r2, [pc, #68]	; (8001b64 <HAL_MspInit+0x54>)
 8001b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b24:	6453      	str	r3, [r2, #68]	; 0x44
 8001b26:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <HAL_MspInit+0x54>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b2e:	607b      	str	r3, [r7, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	603b      	str	r3, [r7, #0]
 8001b36:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <HAL_MspInit+0x54>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <HAL_MspInit+0x54>)
 8001b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b40:	6413      	str	r3, [r2, #64]	; 0x40
 8001b42:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <HAL_MspInit+0x54>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	603b      	str	r3, [r7, #0]
 8001b4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	210f      	movs	r1, #15
 8001b52:	f06f 0001 	mvn.w	r0, #1
 8001b56:	f000 ff1c 	bl	8002992 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800

08001b68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08a      	sub	sp, #40	; 0x28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a17      	ldr	r2, [pc, #92]	; (8001be4 <HAL_ADC_MspInit+0x7c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d127      	bne.n	8001bda <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
 8001b8e:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <HAL_ADC_MspInit+0x80>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	4a15      	ldr	r2, [pc, #84]	; (8001be8 <HAL_ADC_MspInit+0x80>)
 8001b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b98:	6453      	str	r3, [r2, #68]	; 0x44
 8001b9a:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <HAL_ADC_MspInit+0x80>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <HAL_ADC_MspInit+0x80>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a0e      	ldr	r2, [pc, #56]	; (8001be8 <HAL_ADC_MspInit+0x80>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <HAL_ADC_MspInit+0x80>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = CONTROL_POT_Pin;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CONTROL_POT_GPIO_Port, &GPIO_InitStruct);
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4805      	ldr	r0, [pc, #20]	; (8001bec <HAL_ADC_MspInit+0x84>)
 8001bd6:	f000 ff13 	bl	8002a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001bda:	bf00      	nop
 8001bdc:	3728      	adds	r7, #40	; 0x28
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40012000 	.word	0x40012000
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40020000 	.word	0x40020000

08001bf0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08a      	sub	sp, #40	; 0x28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a19      	ldr	r2, [pc, #100]	; (8001c74 <HAL_SPI_MspInit+0x84>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d12b      	bne.n	8001c6a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <HAL_SPI_MspInit+0x88>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	4a17      	ldr	r2, [pc, #92]	; (8001c78 <HAL_SPI_MspInit+0x88>)
 8001c1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c20:	6453      	str	r3, [r2, #68]	; 0x44
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <HAL_SPI_MspInit+0x88>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <HAL_SPI_MspInit+0x88>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a10      	ldr	r2, [pc, #64]	; (8001c78 <HAL_SPI_MspInit+0x88>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <HAL_SPI_MspInit+0x88>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_SDA_Pin;
 8001c4a:	23a0      	movs	r3, #160	; 0xa0
 8001c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c56:	2303      	movs	r3, #3
 8001c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c5a:	2305      	movs	r3, #5
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5e:	f107 0314 	add.w	r3, r7, #20
 8001c62:	4619      	mov	r1, r3
 8001c64:	4805      	ldr	r0, [pc, #20]	; (8001c7c <HAL_SPI_MspInit+0x8c>)
 8001c66:	f000 fecb 	bl	8002a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c6a:	bf00      	nop
 8001c6c:	3728      	adds	r7, #40	; 0x28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40013000 	.word	0x40013000
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40020000 	.word	0x40020000

08001c80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a0e      	ldr	r2, [pc, #56]	; (8001cc8 <HAL_TIM_Base_MspInit+0x48>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d115      	bne.n	8001cbe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	4b0d      	ldr	r3, [pc, #52]	; (8001ccc <HAL_TIM_Base_MspInit+0x4c>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	4a0c      	ldr	r2, [pc, #48]	; (8001ccc <HAL_TIM_Base_MspInit+0x4c>)
 8001c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <HAL_TIM_Base_MspInit+0x4c>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2105      	movs	r1, #5
 8001cb2:	2018      	movs	r0, #24
 8001cb4:	f000 fe6d 	bl	8002992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001cb8:	2018      	movs	r0, #24
 8001cba:	f000 fe86 	bl	80029ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40014000 	.word	0x40014000
 8001ccc:	40023800 	.word	0x40023800

08001cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cd4:	e7fe      	b.n	8001cd4 <NMI_Handler+0x4>

08001cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cda:	e7fe      	b.n	8001cda <HardFault_Handler+0x4>

08001cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <MemManage_Handler+0x4>

08001ce2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce6:	e7fe      	b.n	8001ce6 <BusFault_Handler+0x4>

08001ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <UsageFault_Handler+0x4>

08001cee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d00:	f000 f970 	bl	8001fe4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001d04:	f004 fb38 	bl	8006378 <xTaskGetSchedulerState>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d001      	beq.n	8001d12 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001d0e:	f005 fa1b 	bl	8007148 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001d1c:	4802      	ldr	r0, [pc, #8]	; (8001d28 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001d1e:	f001 ff8b 	bl	8003c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	2000013c 	.word	0x2000013c

08001d2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001d30:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001d34:	f001 f802 	bl	8002d3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
	return 1;
 8001d40:	2301      	movs	r3, #1
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <_kill>:

int _kill(int pid, int sig)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d56:	f005 fc71 	bl	800763c <__errno>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2216      	movs	r2, #22
 8001d5e:	601a      	str	r2, [r3, #0]
	return -1;
 8001d60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <_exit>:

void _exit (int status)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d74:	f04f 31ff 	mov.w	r1, #4294967295
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff ffe7 	bl	8001d4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d7e:	e7fe      	b.n	8001d7e <_exit+0x12>

08001d80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	e00a      	b.n	8001da8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d92:	f3af 8000 	nop.w
 8001d96:	4601      	mov	r1, r0
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	60ba      	str	r2, [r7, #8]
 8001d9e:	b2ca      	uxtb	r2, r1
 8001da0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	3301      	adds	r3, #1
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	dbf0      	blt.n	8001d92 <_read+0x12>
	}

return len;
 8001db0:	687b      	ldr	r3, [r7, #4]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b086      	sub	sp, #24
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	e009      	b.n	8001de0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	1c5a      	adds	r2, r3, #1
 8001dd0:	60ba      	str	r2, [r7, #8]
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	dbf1      	blt.n	8001dcc <_write+0x12>
	}
	return len;
 8001de8:	687b      	ldr	r3, [r7, #4]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <_close>:

int _close(int file)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
	return -1;
 8001dfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e1a:	605a      	str	r2, [r3, #4]
	return 0;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <_isatty>:

int _isatty(int file)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
	return 1;
 8001e32:	2301      	movs	r3, #1
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
	return 0;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e64:	4a14      	ldr	r2, [pc, #80]	; (8001eb8 <_sbrk+0x5c>)
 8001e66:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <_sbrk+0x60>)
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e70:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <_sbrk+0x64>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d102      	bne.n	8001e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e78:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <_sbrk+0x64>)
 8001e7a:	4a12      	ldr	r2, [pc, #72]	; (8001ec4 <_sbrk+0x68>)
 8001e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e7e:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <_sbrk+0x64>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d207      	bcs.n	8001e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e8c:	f005 fbd6 	bl	800763c <__errno>
 8001e90:	4603      	mov	r3, r0
 8001e92:	220c      	movs	r2, #12
 8001e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e96:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9a:	e009      	b.n	8001eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e9c:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <_sbrk+0x64>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ea2:	4b07      	ldr	r3, [pc, #28]	; (8001ec0 <_sbrk+0x64>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	4a05      	ldr	r2, [pc, #20]	; (8001ec0 <_sbrk+0x64>)
 8001eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eae:	68fb      	ldr	r3, [r7, #12]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20010000 	.word	0x20010000
 8001ebc:	00000400 	.word	0x00000400
 8001ec0:	200001b0 	.word	0x200001b0
 8001ec4:	20004bd8 	.word	0x20004bd8

08001ec8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <SystemInit+0x20>)
 8001ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed2:	4a05      	ldr	r2, [pc, #20]	; (8001ee8 <SystemInit+0x20>)
 8001ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001eec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ef0:	480d      	ldr	r0, [pc, #52]	; (8001f28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ef2:	490e      	ldr	r1, [pc, #56]	; (8001f2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ef4:	4a0e      	ldr	r2, [pc, #56]	; (8001f30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef8:	e002      	b.n	8001f00 <LoopCopyDataInit>

08001efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001efe:	3304      	adds	r3, #4

08001f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f04:	d3f9      	bcc.n	8001efa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f06:	4a0b      	ldr	r2, [pc, #44]	; (8001f34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f08:	4c0b      	ldr	r4, [pc, #44]	; (8001f38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f0c:	e001      	b.n	8001f12 <LoopFillZerobss>

08001f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f10:	3204      	adds	r2, #4

08001f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f14:	d3fb      	bcc.n	8001f0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f16:	f7ff ffd7 	bl	8001ec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f1a:	f005 fc8b 	bl	8007834 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f1e:	f7ff f85f 	bl	8000fe0 <main>
  bx  lr    
 8001f22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f24:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f2c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001f30:	08008fe8 	.word	0x08008fe8
  ldr r2, =_sbss
 8001f34:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001f38:	20004bd8 	.word	0x20004bd8

08001f3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f3c:	e7fe      	b.n	8001f3c <ADC_IRQHandler>
	...

08001f40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f44:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <HAL_Init+0x40>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a0d      	ldr	r2, [pc, #52]	; (8001f80 <HAL_Init+0x40>)
 8001f4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f50:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <HAL_Init+0x40>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a0a      	ldr	r2, [pc, #40]	; (8001f80 <HAL_Init+0x40>)
 8001f56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f5c:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <HAL_Init+0x40>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a07      	ldr	r2, [pc, #28]	; (8001f80 <HAL_Init+0x40>)
 8001f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f68:	2003      	movs	r0, #3
 8001f6a:	f000 fd07 	bl	800297c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f6e:	200f      	movs	r0, #15
 8001f70:	f000 f808 	bl	8001f84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f74:	f7ff fdcc 	bl	8001b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40023c00 	.word	0x40023c00

08001f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f8c:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <HAL_InitTick+0x54>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <HAL_InitTick+0x58>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	4619      	mov	r1, r3
 8001f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 fd1f 	bl	80029e6 <HAL_SYSTICK_Config>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e00e      	b.n	8001fd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b0f      	cmp	r3, #15
 8001fb6:	d80a      	bhi.n	8001fce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc0:	f000 fce7 	bl	8002992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fc4:	4a06      	ldr	r2, [pc, #24]	; (8001fe0 <HAL_InitTick+0x5c>)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	e000      	b.n	8001fd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000000 	.word	0x20000000
 8001fdc:	20000008 	.word	0x20000008
 8001fe0:	20000004 	.word	0x20000004

08001fe4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_IncTick+0x20>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	461a      	mov	r2, r3
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_IncTick+0x24>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	4a04      	ldr	r2, [pc, #16]	; (8002008 <HAL_IncTick+0x24>)
 8001ff6:	6013      	str	r3, [r2, #0]
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	20000008 	.word	0x20000008
 8002008:	200001b4 	.word	0x200001b4

0800200c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return uwTick;
 8002010:	4b03      	ldr	r3, [pc, #12]	; (8002020 <HAL_GetTick+0x14>)
 8002012:	681b      	ldr	r3, [r3, #0]
}
 8002014:	4618      	mov	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	200001b4 	.word	0x200001b4

08002024 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800202c:	f7ff ffee 	bl	800200c <HAL_GetTick>
 8002030:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800203c:	d005      	beq.n	800204a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800203e:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <HAL_Delay+0x44>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	461a      	mov	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4413      	add	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800204a:	bf00      	nop
 800204c:	f7ff ffde 	bl	800200c <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	429a      	cmp	r2, r3
 800205a:	d8f7      	bhi.n	800204c <HAL_Delay+0x28>
  {
  }
}
 800205c:	bf00      	nop
 800205e:	bf00      	nop
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20000008 	.word	0x20000008

0800206c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e033      	b.n	80020ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	2b00      	cmp	r3, #0
 8002088:	d109      	bne.n	800209e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff fd6c 	bl	8001b68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d118      	bne.n	80020dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020b2:	f023 0302 	bic.w	r3, r3, #2
 80020b6:	f043 0202 	orr.w	r2, r3, #2
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 fa90 	bl	80025e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f023 0303 	bic.w	r3, r3, #3
 80020d2:	f043 0201 	orr.w	r2, r3, #1
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	641a      	str	r2, [r3, #64]	; 0x40
 80020da:	e001      	b.n	80020e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800210e:	d113      	bne.n	8002138 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800211a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800211e:	d10b      	bne.n	8002138 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	f043 0220 	orr.w	r2, r3, #32
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e063      	b.n	8002200 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002138:	f7ff ff68 	bl	800200c <HAL_GetTick>
 800213c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800213e:	e021      	b.n	8002184 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002146:	d01d      	beq.n	8002184 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d007      	beq.n	800215e <HAL_ADC_PollForConversion+0x6c>
 800214e:	f7ff ff5d 	bl	800200c <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d212      	bcs.n	8002184 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b02      	cmp	r3, #2
 800216a:	d00b      	beq.n	8002184 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	f043 0204 	orr.w	r2, r3, #4
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e03d      	b.n	8002200 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b02      	cmp	r3, #2
 8002190:	d1d6      	bne.n	8002140 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f06f 0212 	mvn.w	r2, #18
 800219a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d123      	bne.n	80021fe <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d11f      	bne.n	80021fe <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d006      	beq.n	80021da <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d111      	bne.n	80021fe <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d105      	bne.n	80021fe <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f043 0201 	orr.w	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_ADC_Start_IT+0x1a>
 800221e:	2302      	movs	r3, #2
 8002220:	e0a1      	b.n	8002366 <HAL_ADC_Start_IT+0x15e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b01      	cmp	r3, #1
 8002236:	d018      	beq.n	800226a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0201 	orr.w	r2, r2, #1
 8002246:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002248:	4b4a      	ldr	r3, [pc, #296]	; (8002374 <HAL_ADC_Start_IT+0x16c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a4a      	ldr	r2, [pc, #296]	; (8002378 <HAL_ADC_Start_IT+0x170>)
 800224e:	fba2 2303 	umull	r2, r3, r2, r3
 8002252:	0c9a      	lsrs	r2, r3, #18
 8002254:	4613      	mov	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4413      	add	r3, r2
 800225a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800225c:	e002      	b.n	8002264 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	3b01      	subs	r3, #1
 8002262:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f9      	bne.n	800225e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b01      	cmp	r3, #1
 8002276:	d169      	bne.n	800234c <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002280:	f023 0301 	bic.w	r3, r3, #1
 8002284:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002296:	2b00      	cmp	r3, #0
 8002298:	d007      	beq.n	80022aa <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022b6:	d106      	bne.n	80022c6 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022bc:	f023 0206 	bic.w	r2, r3, #6
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	645a      	str	r2, [r3, #68]	; 0x44
 80022c4:	e002      	b.n	80022cc <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022d4:	4b29      	ldr	r3, [pc, #164]	; (800237c <HAL_ADC_Start_IT+0x174>)
 80022d6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80022e0:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022f0:	f043 0320 	orr.w	r3, r3, #32
 80022f4:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 031f 	and.w	r3, r3, #31
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10f      	bne.n	8002322 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d129      	bne.n	8002364 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	e020      	b.n	8002364 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a16      	ldr	r2, [pc, #88]	; (8002380 <HAL_ADC_Start_IT+0x178>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d11b      	bne.n	8002364 <HAL_ADC_Start_IT+0x15c>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d114      	bne.n	8002364 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002348:	609a      	str	r2, [r3, #8]
 800234a:	e00b      	b.n	8002364 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002350:	f043 0210 	orr.w	r2, r3, #16
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235c:	f043 0201 	orr.w	r2, r3, #1
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	20000000 	.word	0x20000000
 8002378:	431bde83 	.word	0x431bde83
 800237c:	40012300 	.word	0x40012300
 8002380:	40012000 	.word	0x40012000

08002384 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002392:	4618      	mov	r0, r3
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
	...

080023a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x1c>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e105      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x228>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b09      	cmp	r3, #9
 80023ca:	d925      	bls.n	8002418 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68d9      	ldr	r1, [r3, #12]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	461a      	mov	r2, r3
 80023da:	4613      	mov	r3, r2
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	4413      	add	r3, r2
 80023e0:	3b1e      	subs	r3, #30
 80023e2:	2207      	movs	r2, #7
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43da      	mvns	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	400a      	ands	r2, r1
 80023f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68d9      	ldr	r1, [r3, #12]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	b29b      	uxth	r3, r3
 8002402:	4618      	mov	r0, r3
 8002404:	4603      	mov	r3, r0
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	4403      	add	r3, r0
 800240a:	3b1e      	subs	r3, #30
 800240c:	409a      	lsls	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	e022      	b.n	800245e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6919      	ldr	r1, [r3, #16]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	b29b      	uxth	r3, r3
 8002424:	461a      	mov	r2, r3
 8002426:	4613      	mov	r3, r2
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	4413      	add	r3, r2
 800242c:	2207      	movs	r2, #7
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43da      	mvns	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	400a      	ands	r2, r1
 800243a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6919      	ldr	r1, [r3, #16]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	b29b      	uxth	r3, r3
 800244c:	4618      	mov	r0, r3
 800244e:	4603      	mov	r3, r0
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4403      	add	r3, r0
 8002454:	409a      	lsls	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b06      	cmp	r3, #6
 8002464:	d824      	bhi.n	80024b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	3b05      	subs	r3, #5
 8002478:	221f      	movs	r2, #31
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43da      	mvns	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	400a      	ands	r2, r1
 8002486:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	b29b      	uxth	r3, r3
 8002494:	4618      	mov	r0, r3
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	3b05      	subs	r3, #5
 80024a2:	fa00 f203 	lsl.w	r2, r0, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	635a      	str	r2, [r3, #52]	; 0x34
 80024ae:	e04c      	b.n	800254a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b0c      	cmp	r3, #12
 80024b6:	d824      	bhi.n	8002502 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	3b23      	subs	r3, #35	; 0x23
 80024ca:	221f      	movs	r2, #31
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43da      	mvns	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	400a      	ands	r2, r1
 80024d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	4618      	mov	r0, r3
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	3b23      	subs	r3, #35	; 0x23
 80024f4:	fa00 f203 	lsl.w	r2, r0, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	631a      	str	r2, [r3, #48]	; 0x30
 8002500:	e023      	b.n	800254a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	3b41      	subs	r3, #65	; 0x41
 8002514:	221f      	movs	r2, #31
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43da      	mvns	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	400a      	ands	r2, r1
 8002522:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	b29b      	uxth	r3, r3
 8002530:	4618      	mov	r0, r3
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	3b41      	subs	r3, #65	; 0x41
 800253e:	fa00 f203 	lsl.w	r2, r0, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800254a:	4b22      	ldr	r3, [pc, #136]	; (80025d4 <HAL_ADC_ConfigChannel+0x234>)
 800254c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a21      	ldr	r2, [pc, #132]	; (80025d8 <HAL_ADC_ConfigChannel+0x238>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d109      	bne.n	800256c <HAL_ADC_ConfigChannel+0x1cc>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b12      	cmp	r3, #18
 800255e:	d105      	bne.n	800256c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a19      	ldr	r2, [pc, #100]	; (80025d8 <HAL_ADC_ConfigChannel+0x238>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d123      	bne.n	80025be <HAL_ADC_ConfigChannel+0x21e>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2b10      	cmp	r3, #16
 800257c:	d003      	beq.n	8002586 <HAL_ADC_ConfigChannel+0x1e6>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2b11      	cmp	r3, #17
 8002584:	d11b      	bne.n	80025be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2b10      	cmp	r3, #16
 8002598:	d111      	bne.n	80025be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800259a:	4b10      	ldr	r3, [pc, #64]	; (80025dc <HAL_ADC_ConfigChannel+0x23c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a10      	ldr	r2, [pc, #64]	; (80025e0 <HAL_ADC_ConfigChannel+0x240>)
 80025a0:	fba2 2303 	umull	r2, r3, r2, r3
 80025a4:	0c9a      	lsrs	r2, r3, #18
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025b0:	e002      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	3b01      	subs	r3, #1
 80025b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f9      	bne.n	80025b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	40012300 	.word	0x40012300
 80025d8:	40012000 	.word	0x40012000
 80025dc:	20000000 	.word	0x20000000
 80025e0:	431bde83 	.word	0x431bde83

080025e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025ec:	4b79      	ldr	r3, [pc, #484]	; (80027d4 <ADC_Init+0x1f0>)
 80025ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	431a      	orrs	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002618:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6859      	ldr	r1, [r3, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	021a      	lsls	r2, r3, #8
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800263c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6859      	ldr	r1, [r3, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689a      	ldr	r2, [r3, #8]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800265e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6899      	ldr	r1, [r3, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002676:	4a58      	ldr	r2, [pc, #352]	; (80027d8 <ADC_Init+0x1f4>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d022      	beq.n	80026c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800268a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6899      	ldr	r1, [r3, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6899      	ldr	r1, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	e00f      	b.n	80026e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0202 	bic.w	r2, r2, #2
 80026f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6899      	ldr	r1, [r3, #8]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	7e1b      	ldrb	r3, [r3, #24]
 80026fc:	005a      	lsls	r2, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	430a      	orrs	r2, r1
 8002704:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 3020 	ldrb.w	r3, [r3, #32]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d01b      	beq.n	8002748 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800271e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800272e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6859      	ldr	r1, [r3, #4]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	3b01      	subs	r3, #1
 800273c:	035a      	lsls	r2, r3, #13
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	e007      	b.n	8002758 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002756:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002766:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	3b01      	subs	r3, #1
 8002774:	051a      	lsls	r2, r3, #20
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800278c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6899      	ldr	r1, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800279a:	025a      	lsls	r2, r3, #9
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6899      	ldr	r1, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	029a      	lsls	r2, r3, #10
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	609a      	str	r2, [r3, #8]
}
 80027c8:	bf00      	nop
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	40012300 	.word	0x40012300
 80027d8:	0f000001 	.word	0x0f000001

080027dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027ec:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <__NVIC_SetPriorityGrouping+0x44>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027f8:	4013      	ands	r3, r2
 80027fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002804:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800280c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800280e:	4a04      	ldr	r2, [pc, #16]	; (8002820 <__NVIC_SetPriorityGrouping+0x44>)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	60d3      	str	r3, [r2, #12]
}
 8002814:	bf00      	nop
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002828:	4b04      	ldr	r3, [pc, #16]	; (800283c <__NVIC_GetPriorityGrouping+0x18>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	0a1b      	lsrs	r3, r3, #8
 800282e:	f003 0307 	and.w	r3, r3, #7
}
 8002832:	4618      	mov	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	2b00      	cmp	r3, #0
 8002850:	db0b      	blt.n	800286a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	f003 021f 	and.w	r2, r3, #31
 8002858:	4907      	ldr	r1, [pc, #28]	; (8002878 <__NVIC_EnableIRQ+0x38>)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	095b      	lsrs	r3, r3, #5
 8002860:	2001      	movs	r0, #1
 8002862:	fa00 f202 	lsl.w	r2, r0, r2
 8002866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	e000e100 	.word	0xe000e100

0800287c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	6039      	str	r1, [r7, #0]
 8002886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288c:	2b00      	cmp	r3, #0
 800288e:	db0a      	blt.n	80028a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	b2da      	uxtb	r2, r3
 8002894:	490c      	ldr	r1, [pc, #48]	; (80028c8 <__NVIC_SetPriority+0x4c>)
 8002896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289a:	0112      	lsls	r2, r2, #4
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	440b      	add	r3, r1
 80028a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028a4:	e00a      	b.n	80028bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	4908      	ldr	r1, [pc, #32]	; (80028cc <__NVIC_SetPriority+0x50>)
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	3b04      	subs	r3, #4
 80028b4:	0112      	lsls	r2, r2, #4
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	440b      	add	r3, r1
 80028ba:	761a      	strb	r2, [r3, #24]
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	e000e100 	.word	0xe000e100
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b089      	sub	sp, #36	; 0x24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f1c3 0307 	rsb	r3, r3, #7
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	bf28      	it	cs
 80028ee:	2304      	movcs	r3, #4
 80028f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	3304      	adds	r3, #4
 80028f6:	2b06      	cmp	r3, #6
 80028f8:	d902      	bls.n	8002900 <NVIC_EncodePriority+0x30>
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	3b03      	subs	r3, #3
 80028fe:	e000      	b.n	8002902 <NVIC_EncodePriority+0x32>
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002904:	f04f 32ff 	mov.w	r2, #4294967295
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43da      	mvns	r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	401a      	ands	r2, r3
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002918:	f04f 31ff 	mov.w	r1, #4294967295
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	fa01 f303 	lsl.w	r3, r1, r3
 8002922:	43d9      	mvns	r1, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002928:	4313      	orrs	r3, r2
         );
}
 800292a:	4618      	mov	r0, r3
 800292c:	3724      	adds	r7, #36	; 0x24
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
	...

08002938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3b01      	subs	r3, #1
 8002944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002948:	d301      	bcc.n	800294e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800294a:	2301      	movs	r3, #1
 800294c:	e00f      	b.n	800296e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800294e:	4a0a      	ldr	r2, [pc, #40]	; (8002978 <SysTick_Config+0x40>)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3b01      	subs	r3, #1
 8002954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002956:	210f      	movs	r1, #15
 8002958:	f04f 30ff 	mov.w	r0, #4294967295
 800295c:	f7ff ff8e 	bl	800287c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002960:	4b05      	ldr	r3, [pc, #20]	; (8002978 <SysTick_Config+0x40>)
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002966:	4b04      	ldr	r3, [pc, #16]	; (8002978 <SysTick_Config+0x40>)
 8002968:	2207      	movs	r2, #7
 800296a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	e000e010 	.word	0xe000e010

0800297c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff ff29 	bl	80027dc <__NVIC_SetPriorityGrouping>
}
 800298a:	bf00      	nop
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002992:	b580      	push	{r7, lr}
 8002994:	b086      	sub	sp, #24
 8002996:	af00      	add	r7, sp, #0
 8002998:	4603      	mov	r3, r0
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	607a      	str	r2, [r7, #4]
 800299e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029a4:	f7ff ff3e 	bl	8002824 <__NVIC_GetPriorityGrouping>
 80029a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	6978      	ldr	r0, [r7, #20]
 80029b0:	f7ff ff8e 	bl	80028d0 <NVIC_EncodePriority>
 80029b4:	4602      	mov	r2, r0
 80029b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ba:	4611      	mov	r1, r2
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ff5d 	bl	800287c <__NVIC_SetPriority>
}
 80029c2:	bf00      	nop
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b082      	sub	sp, #8
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	4603      	mov	r3, r0
 80029d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff ff31 	bl	8002840 <__NVIC_EnableIRQ>
}
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7ff ffa2 	bl	8002938 <SysTick_Config>
 80029f4:	4603      	mov	r3, r0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b089      	sub	sp, #36	; 0x24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
 8002a1a:	e159      	b.n	8002cd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	f040 8148 	bne.w	8002cca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d005      	beq.n	8002a52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d130      	bne.n	8002ab4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	2203      	movs	r2, #3
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43db      	mvns	r3, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4013      	ands	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a88:	2201      	movs	r2, #1
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	091b      	lsrs	r3, r3, #4
 8002a9e:	f003 0201 	and.w	r2, r3, #1
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 0303 	and.w	r3, r3, #3
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d017      	beq.n	8002af0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	2203      	movs	r2, #3
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d123      	bne.n	8002b44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	08da      	lsrs	r2, r3, #3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3208      	adds	r2, #8
 8002b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	220f      	movs	r2, #15
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	691a      	ldr	r2, [r3, #16]
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	08da      	lsrs	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3208      	adds	r2, #8
 8002b3e:	69b9      	ldr	r1, [r7, #24]
 8002b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	2203      	movs	r2, #3
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 0203 	and.w	r2, r3, #3
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 80a2 	beq.w	8002cca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	4b57      	ldr	r3, [pc, #348]	; (8002ce8 <HAL_GPIO_Init+0x2e8>)
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	4a56      	ldr	r2, [pc, #344]	; (8002ce8 <HAL_GPIO_Init+0x2e8>)
 8002b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b94:	6453      	str	r3, [r2, #68]	; 0x44
 8002b96:	4b54      	ldr	r3, [pc, #336]	; (8002ce8 <HAL_GPIO_Init+0x2e8>)
 8002b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ba2:	4a52      	ldr	r2, [pc, #328]	; (8002cec <HAL_GPIO_Init+0x2ec>)
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	089b      	lsrs	r3, r3, #2
 8002ba8:	3302      	adds	r3, #2
 8002baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	220f      	movs	r2, #15
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a49      	ldr	r2, [pc, #292]	; (8002cf0 <HAL_GPIO_Init+0x2f0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d019      	beq.n	8002c02 <HAL_GPIO_Init+0x202>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a48      	ldr	r2, [pc, #288]	; (8002cf4 <HAL_GPIO_Init+0x2f4>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d013      	beq.n	8002bfe <HAL_GPIO_Init+0x1fe>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a47      	ldr	r2, [pc, #284]	; (8002cf8 <HAL_GPIO_Init+0x2f8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00d      	beq.n	8002bfa <HAL_GPIO_Init+0x1fa>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a46      	ldr	r2, [pc, #280]	; (8002cfc <HAL_GPIO_Init+0x2fc>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d007      	beq.n	8002bf6 <HAL_GPIO_Init+0x1f6>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a45      	ldr	r2, [pc, #276]	; (8002d00 <HAL_GPIO_Init+0x300>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d101      	bne.n	8002bf2 <HAL_GPIO_Init+0x1f2>
 8002bee:	2304      	movs	r3, #4
 8002bf0:	e008      	b.n	8002c04 <HAL_GPIO_Init+0x204>
 8002bf2:	2307      	movs	r3, #7
 8002bf4:	e006      	b.n	8002c04 <HAL_GPIO_Init+0x204>
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e004      	b.n	8002c04 <HAL_GPIO_Init+0x204>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e002      	b.n	8002c04 <HAL_GPIO_Init+0x204>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <HAL_GPIO_Init+0x204>
 8002c02:	2300      	movs	r3, #0
 8002c04:	69fa      	ldr	r2, [r7, #28]
 8002c06:	f002 0203 	and.w	r2, r2, #3
 8002c0a:	0092      	lsls	r2, r2, #2
 8002c0c:	4093      	lsls	r3, r2
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c14:	4935      	ldr	r1, [pc, #212]	; (8002cec <HAL_GPIO_Init+0x2ec>)
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	089b      	lsrs	r3, r3, #2
 8002c1a:	3302      	adds	r3, #2
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c22:	4b38      	ldr	r3, [pc, #224]	; (8002d04 <HAL_GPIO_Init+0x304>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c46:	4a2f      	ldr	r2, [pc, #188]	; (8002d04 <HAL_GPIO_Init+0x304>)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c4c:	4b2d      	ldr	r3, [pc, #180]	; (8002d04 <HAL_GPIO_Init+0x304>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c70:	4a24      	ldr	r2, [pc, #144]	; (8002d04 <HAL_GPIO_Init+0x304>)
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c76:	4b23      	ldr	r3, [pc, #140]	; (8002d04 <HAL_GPIO_Init+0x304>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4013      	ands	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c9a:	4a1a      	ldr	r2, [pc, #104]	; (8002d04 <HAL_GPIO_Init+0x304>)
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ca0:	4b18      	ldr	r3, [pc, #96]	; (8002d04 <HAL_GPIO_Init+0x304>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cc4:	4a0f      	ldr	r2, [pc, #60]	; (8002d04 <HAL_GPIO_Init+0x304>)
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	61fb      	str	r3, [r7, #28]
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	2b0f      	cmp	r3, #15
 8002cd4:	f67f aea2 	bls.w	8002a1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cd8:	bf00      	nop
 8002cda:	bf00      	nop
 8002cdc:	3724      	adds	r7, #36	; 0x24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	40013800 	.word	0x40013800
 8002cf0:	40020000 	.word	0x40020000
 8002cf4:	40020400 	.word	0x40020400
 8002cf8:	40020800 	.word	0x40020800
 8002cfc:	40020c00 	.word	0x40020c00
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40013c00 	.word	0x40013c00

08002d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	807b      	strh	r3, [r7, #2]
 8002d14:	4613      	mov	r3, r2
 8002d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d18:	787b      	ldrb	r3, [r7, #1]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d1e:	887a      	ldrh	r2, [r7, #2]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d24:	e003      	b.n	8002d2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d26:	887b      	ldrh	r3, [r7, #2]
 8002d28:	041a      	lsls	r2, r3, #16
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	619a      	str	r2, [r3, #24]
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
	...

08002d3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d46:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d48:	695a      	ldr	r2, [r3, #20]
 8002d4a:	88fb      	ldrh	r3, [r7, #6]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d006      	beq.n	8002d60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d52:	4a05      	ldr	r2, [pc, #20]	; (8002d68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d54:	88fb      	ldrh	r3, [r7, #6]
 8002d56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d58:	88fb      	ldrh	r3, [r7, #6]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fe fd84 	bl	8001868 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d60:	bf00      	nop
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40013c00 	.word	0x40013c00

08002d6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e267      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d075      	beq.n	8002e76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d8a:	4b88      	ldr	r3, [pc, #544]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 030c 	and.w	r3, r3, #12
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d00c      	beq.n	8002db0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d96:	4b85      	ldr	r3, [pc, #532]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d112      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002da2:	4b82      	ldr	r3, [pc, #520]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002daa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dae:	d10b      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db0:	4b7e      	ldr	r3, [pc, #504]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d05b      	beq.n	8002e74 <HAL_RCC_OscConfig+0x108>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d157      	bne.n	8002e74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e242      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd0:	d106      	bne.n	8002de0 <HAL_RCC_OscConfig+0x74>
 8002dd2:	4b76      	ldr	r3, [pc, #472]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a75      	ldr	r2, [pc, #468]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	e01d      	b.n	8002e1c <HAL_RCC_OscConfig+0xb0>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002de8:	d10c      	bne.n	8002e04 <HAL_RCC_OscConfig+0x98>
 8002dea:	4b70      	ldr	r3, [pc, #448]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a6f      	ldr	r2, [pc, #444]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	4b6d      	ldr	r3, [pc, #436]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a6c      	ldr	r2, [pc, #432]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	e00b      	b.n	8002e1c <HAL_RCC_OscConfig+0xb0>
 8002e04:	4b69      	ldr	r3, [pc, #420]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a68      	ldr	r2, [pc, #416]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e0e:	6013      	str	r3, [r2, #0]
 8002e10:	4b66      	ldr	r3, [pc, #408]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a65      	ldr	r2, [pc, #404]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d013      	beq.n	8002e4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7ff f8f2 	bl	800200c <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e2c:	f7ff f8ee 	bl	800200c <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b64      	cmp	r3, #100	; 0x64
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e207      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3e:	4b5b      	ldr	r3, [pc, #364]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0xc0>
 8002e4a:	e014      	b.n	8002e76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4c:	f7ff f8de 	bl	800200c <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e54:	f7ff f8da 	bl	800200c <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b64      	cmp	r3, #100	; 0x64
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e1f3      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e66:	4b51      	ldr	r3, [pc, #324]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f0      	bne.n	8002e54 <HAL_RCC_OscConfig+0xe8>
 8002e72:	e000      	b.n	8002e76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d063      	beq.n	8002f4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e82:	4b4a      	ldr	r3, [pc, #296]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00b      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e8e:	4b47      	ldr	r3, [pc, #284]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e96:	2b08      	cmp	r3, #8
 8002e98:	d11c      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e9a:	4b44      	ldr	r3, [pc, #272]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d116      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ea6:	4b41      	ldr	r3, [pc, #260]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d005      	beq.n	8002ebe <HAL_RCC_OscConfig+0x152>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d001      	beq.n	8002ebe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e1c7      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ebe:	4b3b      	ldr	r3, [pc, #236]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	4937      	ldr	r1, [pc, #220]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ed2:	e03a      	b.n	8002f4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d020      	beq.n	8002f1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002edc:	4b34      	ldr	r3, [pc, #208]	; (8002fb0 <HAL_RCC_OscConfig+0x244>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee2:	f7ff f893 	bl	800200c <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eea:	f7ff f88f 	bl	800200c <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e1a8      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efc:	4b2b      	ldr	r3, [pc, #172]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0f0      	beq.n	8002eea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f08:	4b28      	ldr	r3, [pc, #160]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	4925      	ldr	r1, [pc, #148]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	600b      	str	r3, [r1, #0]
 8002f1c:	e015      	b.n	8002f4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f1e:	4b24      	ldr	r3, [pc, #144]	; (8002fb0 <HAL_RCC_OscConfig+0x244>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7ff f872 	bl	800200c <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f2c:	f7ff f86e 	bl	800200c <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e187      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3e:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f0      	bne.n	8002f2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d036      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d016      	beq.n	8002f8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f5e:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <HAL_RCC_OscConfig+0x248>)
 8002f60:	2201      	movs	r2, #1
 8002f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f64:	f7ff f852 	bl	800200c <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f6c:	f7ff f84e 	bl	800200c <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e167      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f7e:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCC_OscConfig+0x200>
 8002f8a:	e01b      	b.n	8002fc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f8c:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <HAL_RCC_OscConfig+0x248>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f92:	f7ff f83b 	bl	800200c <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f98:	e00e      	b.n	8002fb8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f9a:	f7ff f837 	bl	800200c <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d907      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e150      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	42470000 	.word	0x42470000
 8002fb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb8:	4b88      	ldr	r3, [pc, #544]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8002fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1ea      	bne.n	8002f9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 8097 	beq.w	8003100 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fd6:	4b81      	ldr	r3, [pc, #516]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10f      	bne.n	8003002 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	4b7d      	ldr	r3, [pc, #500]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	4a7c      	ldr	r2, [pc, #496]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8002fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff2:	4b7a      	ldr	r3, [pc, #488]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	60bb      	str	r3, [r7, #8]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ffe:	2301      	movs	r3, #1
 8003000:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003002:	4b77      	ldr	r3, [pc, #476]	; (80031e0 <HAL_RCC_OscConfig+0x474>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300a:	2b00      	cmp	r3, #0
 800300c:	d118      	bne.n	8003040 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800300e:	4b74      	ldr	r3, [pc, #464]	; (80031e0 <HAL_RCC_OscConfig+0x474>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a73      	ldr	r2, [pc, #460]	; (80031e0 <HAL_RCC_OscConfig+0x474>)
 8003014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800301a:	f7fe fff7 	bl	800200c <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003022:	f7fe fff3 	bl	800200c <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e10c      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003034:	4b6a      	ldr	r3, [pc, #424]	; (80031e0 <HAL_RCC_OscConfig+0x474>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f0      	beq.n	8003022 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d106      	bne.n	8003056 <HAL_RCC_OscConfig+0x2ea>
 8003048:	4b64      	ldr	r3, [pc, #400]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 800304a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304c:	4a63      	ldr	r2, [pc, #396]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	6713      	str	r3, [r2, #112]	; 0x70
 8003054:	e01c      	b.n	8003090 <HAL_RCC_OscConfig+0x324>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	2b05      	cmp	r3, #5
 800305c:	d10c      	bne.n	8003078 <HAL_RCC_OscConfig+0x30c>
 800305e:	4b5f      	ldr	r3, [pc, #380]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003062:	4a5e      	ldr	r2, [pc, #376]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8003064:	f043 0304 	orr.w	r3, r3, #4
 8003068:	6713      	str	r3, [r2, #112]	; 0x70
 800306a:	4b5c      	ldr	r3, [pc, #368]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 800306c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306e:	4a5b      	ldr	r2, [pc, #364]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	6713      	str	r3, [r2, #112]	; 0x70
 8003076:	e00b      	b.n	8003090 <HAL_RCC_OscConfig+0x324>
 8003078:	4b58      	ldr	r3, [pc, #352]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 800307a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307c:	4a57      	ldr	r2, [pc, #348]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 800307e:	f023 0301 	bic.w	r3, r3, #1
 8003082:	6713      	str	r3, [r2, #112]	; 0x70
 8003084:	4b55      	ldr	r3, [pc, #340]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8003086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003088:	4a54      	ldr	r2, [pc, #336]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 800308a:	f023 0304 	bic.w	r3, r3, #4
 800308e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d015      	beq.n	80030c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003098:	f7fe ffb8 	bl	800200c <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309e:	e00a      	b.n	80030b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030a0:	f7fe ffb4 	bl	800200c <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e0cb      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b6:	4b49      	ldr	r3, [pc, #292]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 80030b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0ee      	beq.n	80030a0 <HAL_RCC_OscConfig+0x334>
 80030c2:	e014      	b.n	80030ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c4:	f7fe ffa2 	bl	800200c <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ca:	e00a      	b.n	80030e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030cc:	f7fe ff9e 	bl	800200c <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030da:	4293      	cmp	r3, r2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e0b5      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e2:	4b3e      	ldr	r3, [pc, #248]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 80030e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1ee      	bne.n	80030cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030ee:	7dfb      	ldrb	r3, [r7, #23]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d105      	bne.n	8003100 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f4:	4b39      	ldr	r3, [pc, #228]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	4a38      	ldr	r2, [pc, #224]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 80030fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 80a1 	beq.w	800324c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800310a:	4b34      	ldr	r3, [pc, #208]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	2b08      	cmp	r3, #8
 8003114:	d05c      	beq.n	80031d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	2b02      	cmp	r3, #2
 800311c:	d141      	bne.n	80031a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311e:	4b31      	ldr	r3, [pc, #196]	; (80031e4 <HAL_RCC_OscConfig+0x478>)
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003124:	f7fe ff72 	bl	800200c <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800312c:	f7fe ff6e 	bl	800200c <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e087      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313e:	4b27      	ldr	r3, [pc, #156]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f0      	bne.n	800312c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69da      	ldr	r2, [r3, #28]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	019b      	lsls	r3, r3, #6
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003160:	085b      	lsrs	r3, r3, #1
 8003162:	3b01      	subs	r3, #1
 8003164:	041b      	lsls	r3, r3, #16
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316c:	061b      	lsls	r3, r3, #24
 800316e:	491b      	ldr	r1, [pc, #108]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8003170:	4313      	orrs	r3, r2
 8003172:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003174:	4b1b      	ldr	r3, [pc, #108]	; (80031e4 <HAL_RCC_OscConfig+0x478>)
 8003176:	2201      	movs	r2, #1
 8003178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317a:	f7fe ff47 	bl	800200c <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003182:	f7fe ff43 	bl	800200c <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e05c      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003194:	4b11      	ldr	r3, [pc, #68]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0f0      	beq.n	8003182 <HAL_RCC_OscConfig+0x416>
 80031a0:	e054      	b.n	800324c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a2:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <HAL_RCC_OscConfig+0x478>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a8:	f7fe ff30 	bl	800200c <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b0:	f7fe ff2c 	bl	800200c <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e045      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c2:	4b06      	ldr	r3, [pc, #24]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f0      	bne.n	80031b0 <HAL_RCC_OscConfig+0x444>
 80031ce:	e03d      	b.n	800324c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d107      	bne.n	80031e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e038      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
 80031dc:	40023800 	.word	0x40023800
 80031e0:	40007000 	.word	0x40007000
 80031e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031e8:	4b1b      	ldr	r3, [pc, #108]	; (8003258 <HAL_RCC_OscConfig+0x4ec>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d028      	beq.n	8003248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003200:	429a      	cmp	r2, r3
 8003202:	d121      	bne.n	8003248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320e:	429a      	cmp	r2, r3
 8003210:	d11a      	bne.n	8003248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003218:	4013      	ands	r3, r2
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800321e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003220:	4293      	cmp	r3, r2
 8003222:	d111      	bne.n	8003248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	3b01      	subs	r3, #1
 8003232:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003234:	429a      	cmp	r2, r3
 8003236:	d107      	bne.n	8003248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003242:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e000      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40023800 	.word	0x40023800

0800325c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e0cc      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003270:	4b68      	ldr	r3, [pc, #416]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d90c      	bls.n	8003298 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327e:	4b65      	ldr	r3, [pc, #404]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003286:	4b63      	ldr	r3, [pc, #396]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d001      	beq.n	8003298 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0b8      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d020      	beq.n	80032e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d005      	beq.n	80032bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032b0:	4b59      	ldr	r3, [pc, #356]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	4a58      	ldr	r2, [pc, #352]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032c8:	4b53      	ldr	r3, [pc, #332]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	4a52      	ldr	r2, [pc, #328]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d4:	4b50      	ldr	r3, [pc, #320]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	494d      	ldr	r1, [pc, #308]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d044      	beq.n	800337c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d107      	bne.n	800330a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fa:	4b47      	ldr	r3, [pc, #284]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d119      	bne.n	800333a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e07f      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b02      	cmp	r3, #2
 8003310:	d003      	beq.n	800331a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003316:	2b03      	cmp	r3, #3
 8003318:	d107      	bne.n	800332a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800331a:	4b3f      	ldr	r3, [pc, #252]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d109      	bne.n	800333a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e06f      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332a:	4b3b      	ldr	r3, [pc, #236]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e067      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800333a:	4b37      	ldr	r3, [pc, #220]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f023 0203 	bic.w	r2, r3, #3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	4934      	ldr	r1, [pc, #208]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 8003348:	4313      	orrs	r3, r2
 800334a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800334c:	f7fe fe5e 	bl	800200c <HAL_GetTick>
 8003350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003352:	e00a      	b.n	800336a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003354:	f7fe fe5a 	bl	800200c <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e04f      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336a:	4b2b      	ldr	r3, [pc, #172]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 020c 	and.w	r2, r3, #12
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	429a      	cmp	r2, r3
 800337a:	d1eb      	bne.n	8003354 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800337c:	4b25      	ldr	r3, [pc, #148]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d20c      	bcs.n	80033a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338a:	4b22      	ldr	r3, [pc, #136]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003392:	4b20      	ldr	r3, [pc, #128]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	d001      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e032      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d008      	beq.n	80033c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033b0:	4b19      	ldr	r3, [pc, #100]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	4916      	ldr	r1, [pc, #88]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d009      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ce:	4b12      	ldr	r3, [pc, #72]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	490e      	ldr	r1, [pc, #56]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033e2:	f000 f821 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 80033e6:	4602      	mov	r2, r0
 80033e8:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	091b      	lsrs	r3, r3, #4
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	490a      	ldr	r1, [pc, #40]	; (800341c <HAL_RCC_ClockConfig+0x1c0>)
 80033f4:	5ccb      	ldrb	r3, [r1, r3]
 80033f6:	fa22 f303 	lsr.w	r3, r2, r3
 80033fa:	4a09      	ldr	r2, [pc, #36]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 80033fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033fe:	4b09      	ldr	r3, [pc, #36]	; (8003424 <HAL_RCC_ClockConfig+0x1c8>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7fe fdbe 	bl	8001f84 <HAL_InitTick>

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40023c00 	.word	0x40023c00
 8003418:	40023800 	.word	0x40023800
 800341c:	08008e80 	.word	0x08008e80
 8003420:	20000000 	.word	0x20000000
 8003424:	20000004 	.word	0x20000004

08003428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800342c:	b090      	sub	sp, #64	; 0x40
 800342e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	637b      	str	r3, [r7, #52]	; 0x34
 8003434:	2300      	movs	r3, #0
 8003436:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003438:	2300      	movs	r3, #0
 800343a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003440:	4b59      	ldr	r3, [pc, #356]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 030c 	and.w	r3, r3, #12
 8003448:	2b08      	cmp	r3, #8
 800344a:	d00d      	beq.n	8003468 <HAL_RCC_GetSysClockFreq+0x40>
 800344c:	2b08      	cmp	r3, #8
 800344e:	f200 80a1 	bhi.w	8003594 <HAL_RCC_GetSysClockFreq+0x16c>
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <HAL_RCC_GetSysClockFreq+0x34>
 8003456:	2b04      	cmp	r3, #4
 8003458:	d003      	beq.n	8003462 <HAL_RCC_GetSysClockFreq+0x3a>
 800345a:	e09b      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800345c:	4b53      	ldr	r3, [pc, #332]	; (80035ac <HAL_RCC_GetSysClockFreq+0x184>)
 800345e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003460:	e09b      	b.n	800359a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003462:	4b53      	ldr	r3, [pc, #332]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003464:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003466:	e098      	b.n	800359a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003468:	4b4f      	ldr	r3, [pc, #316]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003470:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003472:	4b4d      	ldr	r3, [pc, #308]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d028      	beq.n	80034d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800347e:	4b4a      	ldr	r3, [pc, #296]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	099b      	lsrs	r3, r3, #6
 8003484:	2200      	movs	r2, #0
 8003486:	623b      	str	r3, [r7, #32]
 8003488:	627a      	str	r2, [r7, #36]	; 0x24
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003490:	2100      	movs	r1, #0
 8003492:	4b47      	ldr	r3, [pc, #284]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003494:	fb03 f201 	mul.w	r2, r3, r1
 8003498:	2300      	movs	r3, #0
 800349a:	fb00 f303 	mul.w	r3, r0, r3
 800349e:	4413      	add	r3, r2
 80034a0:	4a43      	ldr	r2, [pc, #268]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80034a2:	fba0 1202 	umull	r1, r2, r0, r2
 80034a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034a8:	460a      	mov	r2, r1
 80034aa:	62ba      	str	r2, [r7, #40]	; 0x28
 80034ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034ae:	4413      	add	r3, r2
 80034b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b4:	2200      	movs	r2, #0
 80034b6:	61bb      	str	r3, [r7, #24]
 80034b8:	61fa      	str	r2, [r7, #28]
 80034ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80034c2:	f7fc fedd 	bl	8000280 <__aeabi_uldivmod>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4613      	mov	r3, r2
 80034cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034ce:	e053      	b.n	8003578 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034d0:	4b35      	ldr	r3, [pc, #212]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	099b      	lsrs	r3, r3, #6
 80034d6:	2200      	movs	r2, #0
 80034d8:	613b      	str	r3, [r7, #16]
 80034da:	617a      	str	r2, [r7, #20]
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80034e2:	f04f 0b00 	mov.w	fp, #0
 80034e6:	4652      	mov	r2, sl
 80034e8:	465b      	mov	r3, fp
 80034ea:	f04f 0000 	mov.w	r0, #0
 80034ee:	f04f 0100 	mov.w	r1, #0
 80034f2:	0159      	lsls	r1, r3, #5
 80034f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034f8:	0150      	lsls	r0, r2, #5
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	ebb2 080a 	subs.w	r8, r2, sl
 8003502:	eb63 090b 	sbc.w	r9, r3, fp
 8003506:	f04f 0200 	mov.w	r2, #0
 800350a:	f04f 0300 	mov.w	r3, #0
 800350e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003512:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003516:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800351a:	ebb2 0408 	subs.w	r4, r2, r8
 800351e:	eb63 0509 	sbc.w	r5, r3, r9
 8003522:	f04f 0200 	mov.w	r2, #0
 8003526:	f04f 0300 	mov.w	r3, #0
 800352a:	00eb      	lsls	r3, r5, #3
 800352c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003530:	00e2      	lsls	r2, r4, #3
 8003532:	4614      	mov	r4, r2
 8003534:	461d      	mov	r5, r3
 8003536:	eb14 030a 	adds.w	r3, r4, sl
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	eb45 030b 	adc.w	r3, r5, fp
 8003540:	607b      	str	r3, [r7, #4]
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	f04f 0300 	mov.w	r3, #0
 800354a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800354e:	4629      	mov	r1, r5
 8003550:	028b      	lsls	r3, r1, #10
 8003552:	4621      	mov	r1, r4
 8003554:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003558:	4621      	mov	r1, r4
 800355a:	028a      	lsls	r2, r1, #10
 800355c:	4610      	mov	r0, r2
 800355e:	4619      	mov	r1, r3
 8003560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003562:	2200      	movs	r2, #0
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	60fa      	str	r2, [r7, #12]
 8003568:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800356c:	f7fc fe88 	bl	8000280 <__aeabi_uldivmod>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4613      	mov	r3, r2
 8003576:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003578:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	0c1b      	lsrs	r3, r3, #16
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	3301      	adds	r3, #1
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003588:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800358a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003590:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003592:	e002      	b.n	800359a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003594:	4b05      	ldr	r3, [pc, #20]	; (80035ac <HAL_RCC_GetSysClockFreq+0x184>)
 8003596:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003598:	bf00      	nop
    }
  }
  return sysclockfreq;
 800359a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800359c:	4618      	mov	r0, r3
 800359e:	3740      	adds	r7, #64	; 0x40
 80035a0:	46bd      	mov	sp, r7
 80035a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035a6:	bf00      	nop
 80035a8:	40023800 	.word	0x40023800
 80035ac:	00f42400 	.word	0x00f42400
 80035b0:	017d7840 	.word	0x017d7840

080035b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e07b      	b.n	80036be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d108      	bne.n	80035e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035d6:	d009      	beq.n	80035ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	61da      	str	r2, [r3, #28]
 80035de:	e005      	b.n	80035ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d106      	bne.n	800360c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7fe faf2 	bl	8001bf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2202      	movs	r2, #2
 8003610:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003622:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	431a      	orrs	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800365c:	431a      	orrs	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003666:	431a      	orrs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003670:	ea42 0103 	orr.w	r1, r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003678:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	0c1b      	lsrs	r3, r3, #16
 800368a:	f003 0104 	and.w	r1, r3, #4
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	f003 0210 	and.w	r2, r3, #16
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	69da      	ldr	r2, [r3, #28]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b088      	sub	sp, #32
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	603b      	str	r3, [r7, #0]
 80036d2:	4613      	mov	r3, r2
 80036d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_SPI_Transmit+0x22>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e126      	b.n	8003936 <HAL_SPI_Transmit+0x270>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036f0:	f7fe fc8c 	bl	800200c <HAL_GetTick>
 80036f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80036f6:	88fb      	ldrh	r3, [r7, #6]
 80036f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b01      	cmp	r3, #1
 8003704:	d002      	beq.n	800370c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003706:	2302      	movs	r3, #2
 8003708:	77fb      	strb	r3, [r7, #31]
    goto error;
 800370a:	e10b      	b.n	8003924 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <HAL_SPI_Transmit+0x52>
 8003712:	88fb      	ldrh	r3, [r7, #6]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d102      	bne.n	800371e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800371c:	e102      	b.n	8003924 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2203      	movs	r2, #3
 8003722:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	88fa      	ldrh	r2, [r7, #6]
 8003736:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	88fa      	ldrh	r2, [r7, #6]
 800373c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003764:	d10f      	bne.n	8003786 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003774:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003784:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003790:	2b40      	cmp	r3, #64	; 0x40
 8003792:	d007      	beq.n	80037a4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ac:	d14b      	bne.n	8003846 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <HAL_SPI_Transmit+0xf6>
 80037b6:	8afb      	ldrh	r3, [r7, #22]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d13e      	bne.n	800383a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c0:	881a      	ldrh	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	1c9a      	adds	r2, r3, #2
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80037e0:	e02b      	b.n	800383a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d112      	bne.n	8003816 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f4:	881a      	ldrh	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003800:	1c9a      	adds	r2, r3, #2
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800380a:	b29b      	uxth	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	86da      	strh	r2, [r3, #54]	; 0x36
 8003814:	e011      	b.n	800383a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003816:	f7fe fbf9 	bl	800200c <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	429a      	cmp	r2, r3
 8003824:	d803      	bhi.n	800382e <HAL_SPI_Transmit+0x168>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382c:	d102      	bne.n	8003834 <HAL_SPI_Transmit+0x16e>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d102      	bne.n	800383a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003838:	e074      	b.n	8003924 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800383e:	b29b      	uxth	r3, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1ce      	bne.n	80037e2 <HAL_SPI_Transmit+0x11c>
 8003844:	e04c      	b.n	80038e0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d002      	beq.n	8003854 <HAL_SPI_Transmit+0x18e>
 800384e:	8afb      	ldrh	r3, [r7, #22]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d140      	bne.n	80038d6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	330c      	adds	r3, #12
 800385e:	7812      	ldrb	r2, [r2, #0]
 8003860:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	1c5a      	adds	r2, r3, #1
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003870:	b29b      	uxth	r3, r3
 8003872:	3b01      	subs	r3, #1
 8003874:	b29a      	uxth	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800387a:	e02c      	b.n	80038d6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b02      	cmp	r3, #2
 8003888:	d113      	bne.n	80038b2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	330c      	adds	r3, #12
 8003894:	7812      	ldrb	r2, [r2, #0]
 8003896:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80038b0:	e011      	b.n	80038d6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038b2:	f7fe fbab 	bl	800200c <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d803      	bhi.n	80038ca <HAL_SPI_Transmit+0x204>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c8:	d102      	bne.n	80038d0 <HAL_SPI_Transmit+0x20a>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d102      	bne.n	80038d6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80038d4:	e026      	b.n	8003924 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1cd      	bne.n	800387c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	6839      	ldr	r1, [r7, #0]
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 f8b3 	bl	8003a50 <SPI_EndRxTxTransaction>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2220      	movs	r2, #32
 80038f4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10a      	bne.n	8003914 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038fe:	2300      	movs	r3, #0
 8003900:	613b      	str	r3, [r7, #16]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	613b      	str	r3, [r7, #16]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	613b      	str	r3, [r7, #16]
 8003912:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	77fb      	strb	r3, [r7, #31]
 8003920:	e000      	b.n	8003924 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003922:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003934:	7ffb      	ldrb	r3, [r7, #31]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3720      	adds	r7, #32
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
	...

08003940 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	603b      	str	r3, [r7, #0]
 800394c:	4613      	mov	r3, r2
 800394e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003950:	f7fe fb5c 	bl	800200c <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003958:	1a9b      	subs	r3, r3, r2
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	4413      	add	r3, r2
 800395e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003960:	f7fe fb54 	bl	800200c <HAL_GetTick>
 8003964:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003966:	4b39      	ldr	r3, [pc, #228]	; (8003a4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	015b      	lsls	r3, r3, #5
 800396c:	0d1b      	lsrs	r3, r3, #20
 800396e:	69fa      	ldr	r2, [r7, #28]
 8003970:	fb02 f303 	mul.w	r3, r2, r3
 8003974:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003976:	e054      	b.n	8003a22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397e:	d050      	beq.n	8003a22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003980:	f7fe fb44 	bl	800200c <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	69fa      	ldr	r2, [r7, #28]
 800398c:	429a      	cmp	r2, r3
 800398e:	d902      	bls.n	8003996 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d13d      	bne.n	8003a12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039ae:	d111      	bne.n	80039d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039b8:	d004      	beq.n	80039c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039c2:	d107      	bne.n	80039d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039dc:	d10f      	bne.n	80039fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e017      	b.n	8003a42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	bf0c      	ite	eq
 8003a32:	2301      	moveq	r3, #1
 8003a34:	2300      	movne	r3, #0
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	461a      	mov	r2, r3
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d19b      	bne.n	8003978 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3720      	adds	r7, #32
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20000000 	.word	0x20000000

08003a50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af02      	add	r7, sp, #8
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003a5c:	4b1b      	ldr	r3, [pc, #108]	; (8003acc <SPI_EndRxTxTransaction+0x7c>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a1b      	ldr	r2, [pc, #108]	; (8003ad0 <SPI_EndRxTxTransaction+0x80>)
 8003a62:	fba2 2303 	umull	r2, r3, r2, r3
 8003a66:	0d5b      	lsrs	r3, r3, #21
 8003a68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a6c:	fb02 f303 	mul.w	r3, r2, r3
 8003a70:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a7a:	d112      	bne.n	8003aa2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2200      	movs	r2, #0
 8003a84:	2180      	movs	r1, #128	; 0x80
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f7ff ff5a 	bl	8003940 <SPI_WaitFlagStateUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d016      	beq.n	8003ac0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a96:	f043 0220 	orr.w	r2, r3, #32
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e00f      	b.n	8003ac2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00a      	beq.n	8003abe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab8:	2b80      	cmp	r3, #128	; 0x80
 8003aba:	d0f2      	beq.n	8003aa2 <SPI_EndRxTxTransaction+0x52>
 8003abc:	e000      	b.n	8003ac0 <SPI_EndRxTxTransaction+0x70>
        break;
 8003abe:	bf00      	nop
  }

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20000000 	.word	0x20000000
 8003ad0:	165e9f81 	.word	0x165e9f81

08003ad4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e041      	b.n	8003b6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d106      	bne.n	8003b00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7fe f8c0 	bl	8001c80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2202      	movs	r2, #2
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3304      	adds	r3, #4
 8003b10:	4619      	mov	r1, r3
 8003b12:	4610      	mov	r0, r2
 8003b14:	f000 fa88 	bl	8004028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
	...

08003b74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d001      	beq.n	8003b8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e044      	b.n	8003c16 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0201 	orr.w	r2, r2, #1
 8003ba2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a1e      	ldr	r2, [pc, #120]	; (8003c24 <HAL_TIM_Base_Start_IT+0xb0>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d018      	beq.n	8003be0 <HAL_TIM_Base_Start_IT+0x6c>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb6:	d013      	beq.n	8003be0 <HAL_TIM_Base_Start_IT+0x6c>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a1a      	ldr	r2, [pc, #104]	; (8003c28 <HAL_TIM_Base_Start_IT+0xb4>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d00e      	beq.n	8003be0 <HAL_TIM_Base_Start_IT+0x6c>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a19      	ldr	r2, [pc, #100]	; (8003c2c <HAL_TIM_Base_Start_IT+0xb8>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d009      	beq.n	8003be0 <HAL_TIM_Base_Start_IT+0x6c>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a17      	ldr	r2, [pc, #92]	; (8003c30 <HAL_TIM_Base_Start_IT+0xbc>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d004      	beq.n	8003be0 <HAL_TIM_Base_Start_IT+0x6c>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a16      	ldr	r2, [pc, #88]	; (8003c34 <HAL_TIM_Base_Start_IT+0xc0>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d111      	bne.n	8003c04 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b06      	cmp	r3, #6
 8003bf0:	d010      	beq.n	8003c14 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f042 0201 	orr.w	r2, r2, #1
 8003c00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c02:	e007      	b.n	8003c14 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0201 	orr.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	40010000 	.word	0x40010000
 8003c28:	40000400 	.word	0x40000400
 8003c2c:	40000800 	.word	0x40000800
 8003c30:	40000c00 	.word	0x40000c00
 8003c34:	40014000 	.word	0x40014000

08003c38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d122      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d11b      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f06f 0202 	mvn.w	r2, #2
 8003c64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f9b5 	bl	8003fea <HAL_TIM_IC_CaptureCallback>
 8003c80:	e005      	b.n	8003c8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f9a7 	bl	8003fd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f9b8 	bl	8003ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	f003 0304 	and.w	r3, r3, #4
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d122      	bne.n	8003ce8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	d11b      	bne.n	8003ce8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f06f 0204 	mvn.w	r2, #4
 8003cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f98b 	bl	8003fea <HAL_TIM_IC_CaptureCallback>
 8003cd4:	e005      	b.n	8003ce2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f97d 	bl	8003fd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f98e 	bl	8003ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d122      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d11b      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f06f 0208 	mvn.w	r2, #8
 8003d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2204      	movs	r2, #4
 8003d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f961 	bl	8003fea <HAL_TIM_IC_CaptureCallback>
 8003d28:	e005      	b.n	8003d36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f953 	bl	8003fd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f964 	bl	8003ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	2b10      	cmp	r3, #16
 8003d48:	d122      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f003 0310 	and.w	r3, r3, #16
 8003d54:	2b10      	cmp	r3, #16
 8003d56:	d11b      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f06f 0210 	mvn.w	r2, #16
 8003d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2208      	movs	r2, #8
 8003d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f937 	bl	8003fea <HAL_TIM_IC_CaptureCallback>
 8003d7c:	e005      	b.n	8003d8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f929 	bl	8003fd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f93a 	bl	8003ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d10e      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d107      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f06f 0201 	mvn.w	r2, #1
 8003db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7fd fd84 	bl	80018c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc6:	2b80      	cmp	r3, #128	; 0x80
 8003dc8:	d10e      	bne.n	8003de8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd4:	2b80      	cmp	r3, #128	; 0x80
 8003dd6:	d107      	bne.n	8003de8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 fa44 	bl	8004270 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df2:	2b40      	cmp	r3, #64	; 0x40
 8003df4:	d10e      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e00:	2b40      	cmp	r3, #64	; 0x40
 8003e02:	d107      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f8ff 	bl	8004012 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	f003 0320 	and.w	r3, r3, #32
 8003e1e:	2b20      	cmp	r3, #32
 8003e20:	d10e      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f003 0320 	and.w	r3, r3, #32
 8003e2c:	2b20      	cmp	r3, #32
 8003e2e:	d107      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f06f 0220 	mvn.w	r2, #32
 8003e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 fa0e 	bl	800425c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e40:	bf00      	nop
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_TIM_ConfigClockSource+0x1c>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e0b4      	b.n	8003fce <HAL_TIM_ConfigClockSource+0x186>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e9c:	d03e      	beq.n	8003f1c <HAL_TIM_ConfigClockSource+0xd4>
 8003e9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ea2:	f200 8087 	bhi.w	8003fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eaa:	f000 8086 	beq.w	8003fba <HAL_TIM_ConfigClockSource+0x172>
 8003eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb2:	d87f      	bhi.n	8003fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb4:	2b70      	cmp	r3, #112	; 0x70
 8003eb6:	d01a      	beq.n	8003eee <HAL_TIM_ConfigClockSource+0xa6>
 8003eb8:	2b70      	cmp	r3, #112	; 0x70
 8003eba:	d87b      	bhi.n	8003fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ebc:	2b60      	cmp	r3, #96	; 0x60
 8003ebe:	d050      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x11a>
 8003ec0:	2b60      	cmp	r3, #96	; 0x60
 8003ec2:	d877      	bhi.n	8003fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec4:	2b50      	cmp	r3, #80	; 0x50
 8003ec6:	d03c      	beq.n	8003f42 <HAL_TIM_ConfigClockSource+0xfa>
 8003ec8:	2b50      	cmp	r3, #80	; 0x50
 8003eca:	d873      	bhi.n	8003fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ecc:	2b40      	cmp	r3, #64	; 0x40
 8003ece:	d058      	beq.n	8003f82 <HAL_TIM_ConfigClockSource+0x13a>
 8003ed0:	2b40      	cmp	r3, #64	; 0x40
 8003ed2:	d86f      	bhi.n	8003fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed4:	2b30      	cmp	r3, #48	; 0x30
 8003ed6:	d064      	beq.n	8003fa2 <HAL_TIM_ConfigClockSource+0x15a>
 8003ed8:	2b30      	cmp	r3, #48	; 0x30
 8003eda:	d86b      	bhi.n	8003fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003edc:	2b20      	cmp	r3, #32
 8003ede:	d060      	beq.n	8003fa2 <HAL_TIM_ConfigClockSource+0x15a>
 8003ee0:	2b20      	cmp	r3, #32
 8003ee2:	d867      	bhi.n	8003fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d05c      	beq.n	8003fa2 <HAL_TIM_ConfigClockSource+0x15a>
 8003ee8:	2b10      	cmp	r3, #16
 8003eea:	d05a      	beq.n	8003fa2 <HAL_TIM_ConfigClockSource+0x15a>
 8003eec:	e062      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6818      	ldr	r0, [r3, #0]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	6899      	ldr	r1, [r3, #8]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f000 f98d 	bl	800421c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	609a      	str	r2, [r3, #8]
      break;
 8003f1a:	e04f      	b.n	8003fbc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6818      	ldr	r0, [r3, #0]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	6899      	ldr	r1, [r3, #8]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f000 f976 	bl	800421c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689a      	ldr	r2, [r3, #8]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f3e:	609a      	str	r2, [r3, #8]
      break;
 8003f40:	e03c      	b.n	8003fbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6818      	ldr	r0, [r3, #0]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	6859      	ldr	r1, [r3, #4]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f000 f8ea 	bl	8004128 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2150      	movs	r1, #80	; 0x50
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 f943 	bl	80041e6 <TIM_ITRx_SetConfig>
      break;
 8003f60:	e02c      	b.n	8003fbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6818      	ldr	r0, [r3, #0]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	6859      	ldr	r1, [r3, #4]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f000 f909 	bl	8004186 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2160      	movs	r1, #96	; 0x60
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 f933 	bl	80041e6 <TIM_ITRx_SetConfig>
      break;
 8003f80:	e01c      	b.n	8003fbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6818      	ldr	r0, [r3, #0]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	6859      	ldr	r1, [r3, #4]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f000 f8ca 	bl	8004128 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2140      	movs	r1, #64	; 0x40
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 f923 	bl	80041e6 <TIM_ITRx_SetConfig>
      break;
 8003fa0:	e00c      	b.n	8003fbc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4619      	mov	r1, r3
 8003fac:	4610      	mov	r0, r2
 8003fae:	f000 f91a 	bl	80041e6 <TIM_ITRx_SetConfig>
      break;
 8003fb2:	e003      	b.n	8003fbc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8003fb8:	e000      	b.n	8003fbc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b083      	sub	sp, #12
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
	...

08004028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a34      	ldr	r2, [pc, #208]	; (800410c <TIM_Base_SetConfig+0xe4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d00f      	beq.n	8004060 <TIM_Base_SetConfig+0x38>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004046:	d00b      	beq.n	8004060 <TIM_Base_SetConfig+0x38>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a31      	ldr	r2, [pc, #196]	; (8004110 <TIM_Base_SetConfig+0xe8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d007      	beq.n	8004060 <TIM_Base_SetConfig+0x38>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a30      	ldr	r2, [pc, #192]	; (8004114 <TIM_Base_SetConfig+0xec>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d003      	beq.n	8004060 <TIM_Base_SetConfig+0x38>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a2f      	ldr	r2, [pc, #188]	; (8004118 <TIM_Base_SetConfig+0xf0>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d108      	bne.n	8004072 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004066:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a25      	ldr	r2, [pc, #148]	; (800410c <TIM_Base_SetConfig+0xe4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d01b      	beq.n	80040b2 <TIM_Base_SetConfig+0x8a>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004080:	d017      	beq.n	80040b2 <TIM_Base_SetConfig+0x8a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a22      	ldr	r2, [pc, #136]	; (8004110 <TIM_Base_SetConfig+0xe8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d013      	beq.n	80040b2 <TIM_Base_SetConfig+0x8a>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a21      	ldr	r2, [pc, #132]	; (8004114 <TIM_Base_SetConfig+0xec>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00f      	beq.n	80040b2 <TIM_Base_SetConfig+0x8a>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a20      	ldr	r2, [pc, #128]	; (8004118 <TIM_Base_SetConfig+0xf0>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d00b      	beq.n	80040b2 <TIM_Base_SetConfig+0x8a>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a1f      	ldr	r2, [pc, #124]	; (800411c <TIM_Base_SetConfig+0xf4>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d007      	beq.n	80040b2 <TIM_Base_SetConfig+0x8a>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a1e      	ldr	r2, [pc, #120]	; (8004120 <TIM_Base_SetConfig+0xf8>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d003      	beq.n	80040b2 <TIM_Base_SetConfig+0x8a>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a1d      	ldr	r2, [pc, #116]	; (8004124 <TIM_Base_SetConfig+0xfc>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d108      	bne.n	80040c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	689a      	ldr	r2, [r3, #8]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a08      	ldr	r2, [pc, #32]	; (800410c <TIM_Base_SetConfig+0xe4>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d103      	bne.n	80040f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	615a      	str	r2, [r3, #20]
}
 80040fe:	bf00      	nop
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40010000 	.word	0x40010000
 8004110:	40000400 	.word	0x40000400
 8004114:	40000800 	.word	0x40000800
 8004118:	40000c00 	.word	0x40000c00
 800411c:	40014000 	.word	0x40014000
 8004120:	40014400 	.word	0x40014400
 8004124:	40014800 	.word	0x40014800

08004128 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	f023 0201 	bic.w	r2, r3, #1
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	011b      	lsls	r3, r3, #4
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	4313      	orrs	r3, r2
 800415c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f023 030a 	bic.w	r3, r3, #10
 8004164:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	4313      	orrs	r3, r2
 800416c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	621a      	str	r2, [r3, #32]
}
 800417a:	bf00      	nop
 800417c:	371c      	adds	r7, #28
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004186:	b480      	push	{r7}
 8004188:	b087      	sub	sp, #28
 800418a:	af00      	add	r7, sp, #0
 800418c:	60f8      	str	r0, [r7, #12]
 800418e:	60b9      	str	r1, [r7, #8]
 8004190:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	f023 0210 	bic.w	r2, r3, #16
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	031b      	lsls	r3, r3, #12
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	621a      	str	r2, [r3, #32]
}
 80041da:	bf00      	nop
 80041dc:	371c      	adds	r7, #28
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b085      	sub	sp, #20
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
 80041ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4313      	orrs	r3, r2
 8004204:	f043 0307 	orr.w	r3, r3, #7
 8004208:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	609a      	str	r2, [r3, #8]
}
 8004210:	bf00      	nop
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
 8004228:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004236:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	021a      	lsls	r2, r3, #8
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	431a      	orrs	r2, r3
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	4313      	orrs	r3, r2
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	4313      	orrs	r3, r2
 8004248:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	609a      	str	r2, [r3, #8]
}
 8004250:	bf00      	nop
 8004252:	371c      	adds	r7, #28
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <__NVIC_SetPriority>:
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	4603      	mov	r3, r0
 800428c:	6039      	str	r1, [r7, #0]
 800428e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004294:	2b00      	cmp	r3, #0
 8004296:	db0a      	blt.n	80042ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	b2da      	uxtb	r2, r3
 800429c:	490c      	ldr	r1, [pc, #48]	; (80042d0 <__NVIC_SetPriority+0x4c>)
 800429e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a2:	0112      	lsls	r2, r2, #4
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	440b      	add	r3, r1
 80042a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80042ac:	e00a      	b.n	80042c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	4908      	ldr	r1, [pc, #32]	; (80042d4 <__NVIC_SetPriority+0x50>)
 80042b4:	79fb      	ldrb	r3, [r7, #7]
 80042b6:	f003 030f 	and.w	r3, r3, #15
 80042ba:	3b04      	subs	r3, #4
 80042bc:	0112      	lsls	r2, r2, #4
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	440b      	add	r3, r1
 80042c2:	761a      	strb	r2, [r3, #24]
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	e000e100 	.word	0xe000e100
 80042d4:	e000ed00 	.word	0xe000ed00

080042d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80042dc:	2100      	movs	r1, #0
 80042de:	f06f 0004 	mvn.w	r0, #4
 80042e2:	f7ff ffcf 	bl	8004284 <__NVIC_SetPriority>
#endif
}
 80042e6:	bf00      	nop
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042f2:	f3ef 8305 	mrs	r3, IPSR
 80042f6:	603b      	str	r3, [r7, #0]
  return(result);
 80042f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80042fe:	f06f 0305 	mvn.w	r3, #5
 8004302:	607b      	str	r3, [r7, #4]
 8004304:	e00c      	b.n	8004320 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004306:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <osKernelInitialize+0x44>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d105      	bne.n	800431a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800430e:	4b08      	ldr	r3, [pc, #32]	; (8004330 <osKernelInitialize+0x44>)
 8004310:	2201      	movs	r2, #1
 8004312:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004314:	2300      	movs	r3, #0
 8004316:	607b      	str	r3, [r7, #4]
 8004318:	e002      	b.n	8004320 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800431a:	f04f 33ff 	mov.w	r3, #4294967295
 800431e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004320:	687b      	ldr	r3, [r7, #4]
}
 8004322:	4618      	mov	r0, r3
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	200001b8 	.word	0x200001b8

08004334 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800433a:	f3ef 8305 	mrs	r3, IPSR
 800433e:	603b      	str	r3, [r7, #0]
  return(result);
 8004340:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004346:	f06f 0305 	mvn.w	r3, #5
 800434a:	607b      	str	r3, [r7, #4]
 800434c:	e010      	b.n	8004370 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800434e:	4b0b      	ldr	r3, [pc, #44]	; (800437c <osKernelStart+0x48>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d109      	bne.n	800436a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004356:	f7ff ffbf 	bl	80042d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800435a:	4b08      	ldr	r3, [pc, #32]	; (800437c <osKernelStart+0x48>)
 800435c:	2202      	movs	r2, #2
 800435e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004360:	f001 fb9e 	bl	8005aa0 <vTaskStartScheduler>
      stat = osOK;
 8004364:	2300      	movs	r3, #0
 8004366:	607b      	str	r3, [r7, #4]
 8004368:	e002      	b.n	8004370 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800436a:	f04f 33ff 	mov.w	r3, #4294967295
 800436e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004370:	687b      	ldr	r3, [r7, #4]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	200001b8 	.word	0x200001b8

08004380 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004380:	b580      	push	{r7, lr}
 8004382:	b08e      	sub	sp, #56	; 0x38
 8004384:	af04      	add	r7, sp, #16
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800438c:	2300      	movs	r3, #0
 800438e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004390:	f3ef 8305 	mrs	r3, IPSR
 8004394:	617b      	str	r3, [r7, #20]
  return(result);
 8004396:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004398:	2b00      	cmp	r3, #0
 800439a:	d17e      	bne.n	800449a <osThreadNew+0x11a>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d07b      	beq.n	800449a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80043a2:	2380      	movs	r3, #128	; 0x80
 80043a4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80043a6:	2318      	movs	r3, #24
 80043a8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80043aa:	2300      	movs	r3, #0
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80043ae:	f04f 33ff 	mov.w	r3, #4294967295
 80043b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d045      	beq.n	8004446 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d002      	beq.n	80043c8 <osThreadNew+0x48>
        name = attr->name;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d002      	beq.n	80043d6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d008      	beq.n	80043ee <osThreadNew+0x6e>
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	2b38      	cmp	r3, #56	; 0x38
 80043e0:	d805      	bhi.n	80043ee <osThreadNew+0x6e>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <osThreadNew+0x72>
        return (NULL);
 80043ee:	2300      	movs	r3, #0
 80043f0:	e054      	b.n	800449c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	089b      	lsrs	r3, r3, #2
 8004400:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00e      	beq.n	8004428 <osThreadNew+0xa8>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	2bbb      	cmp	r3, #187	; 0xbb
 8004410:	d90a      	bls.n	8004428 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004416:	2b00      	cmp	r3, #0
 8004418:	d006      	beq.n	8004428 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d002      	beq.n	8004428 <osThreadNew+0xa8>
        mem = 1;
 8004422:	2301      	movs	r3, #1
 8004424:	61bb      	str	r3, [r7, #24]
 8004426:	e010      	b.n	800444a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10c      	bne.n	800444a <osThreadNew+0xca>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d108      	bne.n	800444a <osThreadNew+0xca>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d104      	bne.n	800444a <osThreadNew+0xca>
          mem = 0;
 8004440:	2300      	movs	r3, #0
 8004442:	61bb      	str	r3, [r7, #24]
 8004444:	e001      	b.n	800444a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004446:	2300      	movs	r3, #0
 8004448:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d110      	bne.n	8004472 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004458:	9202      	str	r2, [sp, #8]
 800445a:	9301      	str	r3, [sp, #4]
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	6a3a      	ldr	r2, [r7, #32]
 8004464:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f001 f92e 	bl	80056c8 <xTaskCreateStatic>
 800446c:	4603      	mov	r3, r0
 800446e:	613b      	str	r3, [r7, #16]
 8004470:	e013      	b.n	800449a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d110      	bne.n	800449a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	b29a      	uxth	r2, r3
 800447c:	f107 0310 	add.w	r3, r7, #16
 8004480:	9301      	str	r3, [sp, #4]
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f001 f979 	bl	8005782 <xTaskCreate>
 8004490:	4603      	mov	r3, r0
 8004492:	2b01      	cmp	r3, #1
 8004494:	d001      	beq.n	800449a <osThreadNew+0x11a>
            hTask = NULL;
 8004496:	2300      	movs	r3, #0
 8004498:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800449a:	693b      	ldr	r3, [r7, #16]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3728      	adds	r7, #40	; 0x28
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044ac:	f3ef 8305 	mrs	r3, IPSR
 80044b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80044b2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <osDelay+0x1c>
    stat = osErrorISR;
 80044b8:	f06f 0305 	mvn.w	r3, #5
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	e007      	b.n	80044d0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80044c0:	2300      	movs	r3, #0
 80044c2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f001 fab4 	bl	8005a38 <vTaskDelay>
    }
  }

  return (stat);
 80044d0:	68fb      	ldr	r3, [r7, #12]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80044da:	b580      	push	{r7, lr}
 80044dc:	b088      	sub	sp, #32
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80044e2:	2300      	movs	r3, #0
 80044e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044e6:	f3ef 8305 	mrs	r3, IPSR
 80044ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80044ec:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d174      	bne.n	80045dc <osMutexNew+0x102>
    if (attr != NULL) {
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d003      	beq.n	8004500 <osMutexNew+0x26>
      type = attr->attr_bits;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	61bb      	str	r3, [r7, #24]
 80044fe:	e001      	b.n	8004504 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b00      	cmp	r3, #0
 800450c:	d002      	beq.n	8004514 <osMutexNew+0x3a>
      rmtx = 1U;
 800450e:	2301      	movs	r3, #1
 8004510:	617b      	str	r3, [r7, #20]
 8004512:	e001      	b.n	8004518 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	f003 0308 	and.w	r3, r3, #8
 800451e:	2b00      	cmp	r3, #0
 8004520:	d15c      	bne.n	80045dc <osMutexNew+0x102>
      mem = -1;
 8004522:	f04f 33ff 	mov.w	r3, #4294967295
 8004526:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d015      	beq.n	800455a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d006      	beq.n	8004544 <osMutexNew+0x6a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	2b4f      	cmp	r3, #79	; 0x4f
 800453c:	d902      	bls.n	8004544 <osMutexNew+0x6a>
          mem = 1;
 800453e:	2301      	movs	r3, #1
 8004540:	613b      	str	r3, [r7, #16]
 8004542:	e00c      	b.n	800455e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d108      	bne.n	800455e <osMutexNew+0x84>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d104      	bne.n	800455e <osMutexNew+0x84>
            mem = 0;
 8004554:	2300      	movs	r3, #0
 8004556:	613b      	str	r3, [r7, #16]
 8004558:	e001      	b.n	800455e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800455a:	2300      	movs	r3, #0
 800455c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d112      	bne.n	800458a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d007      	beq.n	800457a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	4619      	mov	r1, r3
 8004570:	2004      	movs	r0, #4
 8004572:	f000 fb18 	bl	8004ba6 <xQueueCreateMutexStatic>
 8004576:	61f8      	str	r0, [r7, #28]
 8004578:	e016      	b.n	80045a8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	4619      	mov	r1, r3
 8004580:	2001      	movs	r0, #1
 8004582:	f000 fb10 	bl	8004ba6 <xQueueCreateMutexStatic>
 8004586:	61f8      	str	r0, [r7, #28]
 8004588:	e00e      	b.n	80045a8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10b      	bne.n	80045a8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d004      	beq.n	80045a0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004596:	2004      	movs	r0, #4
 8004598:	f000 faed 	bl	8004b76 <xQueueCreateMutex>
 800459c:	61f8      	str	r0, [r7, #28]
 800459e:	e003      	b.n	80045a8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80045a0:	2001      	movs	r0, #1
 80045a2:	f000 fae8 	bl	8004b76 <xQueueCreateMutex>
 80045a6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00c      	beq.n	80045c8 <osMutexNew+0xee>
        if (attr != NULL) {
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <osMutexNew+0xe2>
          name = attr->name;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	e001      	b.n	80045c0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80045bc:	2300      	movs	r3, #0
 80045be:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80045c0:	68f9      	ldr	r1, [r7, #12]
 80045c2:	69f8      	ldr	r0, [r7, #28]
 80045c4:	f001 f822 	bl	800560c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d006      	beq.n	80045dc <osMutexNew+0x102>
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	f043 0301 	orr.w	r3, r3, #1
 80045da:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80045dc:	69fb      	ldr	r3, [r7, #28]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3720      	adds	r7, #32
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b086      	sub	sp, #24
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f023 0301 	bic.w	r3, r3, #1
 80045f6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004600:	2300      	movs	r3, #0
 8004602:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004604:	f3ef 8305 	mrs	r3, IPSR
 8004608:	60bb      	str	r3, [r7, #8]
  return(result);
 800460a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800460c:	2b00      	cmp	r3, #0
 800460e:	d003      	beq.n	8004618 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004610:	f06f 0305 	mvn.w	r3, #5
 8004614:	617b      	str	r3, [r7, #20]
 8004616:	e02c      	b.n	8004672 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d103      	bne.n	8004626 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800461e:	f06f 0303 	mvn.w	r3, #3
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	e025      	b.n	8004672 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d011      	beq.n	8004650 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800462c:	6839      	ldr	r1, [r7, #0]
 800462e:	6938      	ldr	r0, [r7, #16]
 8004630:	f000 fb08 	bl	8004c44 <xQueueTakeMutexRecursive>
 8004634:	4603      	mov	r3, r0
 8004636:	2b01      	cmp	r3, #1
 8004638:	d01b      	beq.n	8004672 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d003      	beq.n	8004648 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8004640:	f06f 0301 	mvn.w	r3, #1
 8004644:	617b      	str	r3, [r7, #20]
 8004646:	e014      	b.n	8004672 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004648:	f06f 0302 	mvn.w	r3, #2
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	e010      	b.n	8004672 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004650:	6839      	ldr	r1, [r7, #0]
 8004652:	6938      	ldr	r0, [r7, #16]
 8004654:	f000 fda6 	bl	80051a4 <xQueueSemaphoreTake>
 8004658:	4603      	mov	r3, r0
 800465a:	2b01      	cmp	r3, #1
 800465c:	d009      	beq.n	8004672 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8004664:	f06f 0301 	mvn.w	r3, #1
 8004668:	617b      	str	r3, [r7, #20]
 800466a:	e002      	b.n	8004672 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800466c:	f06f 0302 	mvn.w	r3, #2
 8004670:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8004672:	697b      	ldr	r3, [r7, #20]
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f023 0301 	bic.w	r3, r3, #1
 800468a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004698:	f3ef 8305 	mrs	r3, IPSR
 800469c:	60bb      	str	r3, [r7, #8]
  return(result);
 800469e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <osMutexRelease+0x30>
    stat = osErrorISR;
 80046a4:	f06f 0305 	mvn.w	r3, #5
 80046a8:	617b      	str	r3, [r7, #20]
 80046aa:	e01f      	b.n	80046ec <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d103      	bne.n	80046ba <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80046b2:	f06f 0303 	mvn.w	r3, #3
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	e018      	b.n	80046ec <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d009      	beq.n	80046d4 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80046c0:	6938      	ldr	r0, [r7, #16]
 80046c2:	f000 fa8b 	bl	8004bdc <xQueueGiveMutexRecursive>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d00f      	beq.n	80046ec <osMutexRelease+0x70>
        stat = osErrorResource;
 80046cc:	f06f 0302 	mvn.w	r3, #2
 80046d0:	617b      	str	r3, [r7, #20]
 80046d2:	e00b      	b.n	80046ec <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80046d4:	2300      	movs	r3, #0
 80046d6:	2200      	movs	r2, #0
 80046d8:	2100      	movs	r1, #0
 80046da:	6938      	ldr	r0, [r7, #16]
 80046dc:	f000 fae8 	bl	8004cb0 <xQueueGenericSend>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d002      	beq.n	80046ec <osMutexRelease+0x70>
        stat = osErrorResource;
 80046e6:	f06f 0302 	mvn.w	r3, #2
 80046ea:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80046ec:	697b      	ldr	r3, [r7, #20]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3718      	adds	r7, #24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	4a07      	ldr	r2, [pc, #28]	; (8004724 <vApplicationGetIdleTaskMemory+0x2c>)
 8004708:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	4a06      	ldr	r2, [pc, #24]	; (8004728 <vApplicationGetIdleTaskMemory+0x30>)
 800470e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2280      	movs	r2, #128	; 0x80
 8004714:	601a      	str	r2, [r3, #0]
}
 8004716:	bf00      	nop
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	200001bc 	.word	0x200001bc
 8004728:	20000278 	.word	0x20000278

0800472c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4a07      	ldr	r2, [pc, #28]	; (8004758 <vApplicationGetTimerTaskMemory+0x2c>)
 800473c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	4a06      	ldr	r2, [pc, #24]	; (800475c <vApplicationGetTimerTaskMemory+0x30>)
 8004742:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f44f 7280 	mov.w	r2, #256	; 0x100
 800474a:	601a      	str	r2, [r3, #0]
}
 800474c:	bf00      	nop
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	20000478 	.word	0x20000478
 800475c:	20000534 	.word	0x20000534

08004760 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f103 0208 	add.w	r2, r3, #8
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f04f 32ff 	mov.w	r2, #4294967295
 8004778:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f103 0208 	add.w	r2, r3, #8
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f103 0208 	add.w	r2, r3, #8
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047ba:	b480      	push	{r7}
 80047bc:	b085      	sub	sp, #20
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	601a      	str	r2, [r3, #0]
}
 80047f6:	bf00      	nop
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004802:	b480      	push	{r7}
 8004804:	b085      	sub	sp, #20
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004818:	d103      	bne.n	8004822 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	e00c      	b.n	800483c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3308      	adds	r3, #8
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	e002      	b.n	8004830 <vListInsert+0x2e>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	60fb      	str	r3, [r7, #12]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	429a      	cmp	r2, r3
 800483a:	d2f6      	bcs.n	800482a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	1c5a      	adds	r2, r3, #1
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	601a      	str	r2, [r3, #0]
}
 8004868:	bf00      	nop
 800486a:	3714      	adds	r7, #20
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6892      	ldr	r2, [r2, #8]
 800488a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6852      	ldr	r2, [r2, #4]
 8004894:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	429a      	cmp	r2, r3
 800489e:	d103      	bne.n	80048a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	1e5a      	subs	r2, r3, #1
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10a      	bne.n	80048f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80048dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e0:	f383 8811 	msr	BASEPRI, r3
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80048ee:	bf00      	nop
 80048f0:	e7fe      	b.n	80048f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80048f2:	f002 fb97 	bl	8007024 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fe:	68f9      	ldr	r1, [r7, #12]
 8004900:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004902:	fb01 f303 	mul.w	r3, r1, r3
 8004906:	441a      	add	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004922:	3b01      	subs	r3, #1
 8004924:	68f9      	ldr	r1, [r7, #12]
 8004926:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004928:	fb01 f303 	mul.w	r3, r1, r3
 800492c:	441a      	add	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	22ff      	movs	r2, #255	; 0xff
 8004936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	22ff      	movs	r2, #255	; 0xff
 800493e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d114      	bne.n	8004972 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d01a      	beq.n	8004986 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	3310      	adds	r3, #16
 8004954:	4618      	mov	r0, r3
 8004956:	f001 fb3d 	bl	8005fd4 <xTaskRemoveFromEventList>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d012      	beq.n	8004986 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004960:	4b0c      	ldr	r3, [pc, #48]	; (8004994 <xQueueGenericReset+0xcc>)
 8004962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	f3bf 8f6f 	isb	sy
 8004970:	e009      	b.n	8004986 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	3310      	adds	r3, #16
 8004976:	4618      	mov	r0, r3
 8004978:	f7ff fef2 	bl	8004760 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	3324      	adds	r3, #36	; 0x24
 8004980:	4618      	mov	r0, r3
 8004982:	f7ff feed 	bl	8004760 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004986:	f002 fb7d 	bl	8007084 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800498a:	2301      	movs	r3, #1
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	e000ed04 	.word	0xe000ed04

08004998 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004998:	b580      	push	{r7, lr}
 800499a:	b08e      	sub	sp, #56	; 0x38
 800499c:	af02      	add	r7, sp, #8
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
 80049a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10a      	bne.n	80049c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80049ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80049be:	bf00      	nop
 80049c0:	e7fe      	b.n	80049c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10a      	bne.n	80049de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80049c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80049da:	bf00      	nop
 80049dc:	e7fe      	b.n	80049dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <xQueueGenericCreateStatic+0x52>
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <xQueueGenericCreateStatic+0x56>
 80049ea:	2301      	movs	r3, #1
 80049ec:	e000      	b.n	80049f0 <xQueueGenericCreateStatic+0x58>
 80049ee:	2300      	movs	r3, #0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10a      	bne.n	8004a0a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80049f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	623b      	str	r3, [r7, #32]
}
 8004a06:	bf00      	nop
 8004a08:	e7fe      	b.n	8004a08 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d102      	bne.n	8004a16 <xQueueGenericCreateStatic+0x7e>
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <xQueueGenericCreateStatic+0x82>
 8004a16:	2301      	movs	r3, #1
 8004a18:	e000      	b.n	8004a1c <xQueueGenericCreateStatic+0x84>
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10a      	bne.n	8004a36 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	61fb      	str	r3, [r7, #28]
}
 8004a32:	bf00      	nop
 8004a34:	e7fe      	b.n	8004a34 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a36:	2350      	movs	r3, #80	; 0x50
 8004a38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2b50      	cmp	r3, #80	; 0x50
 8004a3e:	d00a      	beq.n	8004a56 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	61bb      	str	r3, [r7, #24]
}
 8004a52:	bf00      	nop
 8004a54:	e7fe      	b.n	8004a54 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004a56:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00d      	beq.n	8004a7e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a6a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	4613      	mov	r3, r2
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	68b9      	ldr	r1, [r7, #8]
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 f83f 	bl	8004afc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3730      	adds	r7, #48	; 0x30
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b08a      	sub	sp, #40	; 0x28
 8004a8c:	af02      	add	r7, sp, #8
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	4613      	mov	r3, r2
 8004a94:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10a      	bne.n	8004ab2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	613b      	str	r3, [r7, #16]
}
 8004aae:	bf00      	nop
 8004ab0:	e7fe      	b.n	8004ab0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	fb02 f303 	mul.w	r3, r2, r3
 8004aba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	3350      	adds	r3, #80	; 0x50
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f002 fbd1 	bl	8007268 <pvPortMalloc>
 8004ac6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d011      	beq.n	8004af2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	3350      	adds	r3, #80	; 0x50
 8004ad6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ae0:	79fa      	ldrb	r2, [r7, #7]
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	68b9      	ldr	r1, [r7, #8]
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 f805 	bl	8004afc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004af2:	69bb      	ldr	r3, [r7, #24]
	}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3720      	adds	r7, #32
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
 8004b08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d103      	bne.n	8004b18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	e002      	b.n	8004b1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	69b8      	ldr	r0, [r7, #24]
 8004b2e:	f7ff fecb 	bl	80048c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	78fa      	ldrb	r2, [r7, #3]
 8004b36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b3a:	bf00      	nop
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b082      	sub	sp, #8
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00e      	beq.n	8004b6e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004b62:	2300      	movs	r3, #0
 8004b64:	2200      	movs	r2, #0
 8004b66:	2100      	movs	r1, #0
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f8a1 	bl	8004cb0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004b6e:	bf00      	nop
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b086      	sub	sp, #24
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004b80:	2301      	movs	r3, #1
 8004b82:	617b      	str	r3, [r7, #20]
 8004b84:	2300      	movs	r3, #0
 8004b86:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004b88:	79fb      	ldrb	r3, [r7, #7]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	6939      	ldr	r1, [r7, #16]
 8004b8e:	6978      	ldr	r0, [r7, #20]
 8004b90:	f7ff ff7a 	bl	8004a88 <xQueueGenericCreate>
 8004b94:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f7ff ffd3 	bl	8004b42 <prvInitialiseMutex>

		return xNewQueue;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
	}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b088      	sub	sp, #32
 8004baa:	af02      	add	r7, sp, #8
 8004bac:	4603      	mov	r3, r0
 8004bae:	6039      	str	r1, [r7, #0]
 8004bb0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	617b      	str	r3, [r7, #20]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004bba:	79fb      	ldrb	r3, [r7, #7]
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	6939      	ldr	r1, [r7, #16]
 8004bc4:	6978      	ldr	r0, [r7, #20]
 8004bc6:	f7ff fee7 	bl	8004998 <xQueueGenericCreateStatic>
 8004bca:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f7ff ffb8 	bl	8004b42 <prvInitialiseMutex>

		return xNewQueue;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
	}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004bdc:	b590      	push	{r4, r7, lr}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10a      	bne.n	8004c04 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8004bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf2:	f383 8811 	msr	BASEPRI, r3
 8004bf6:	f3bf 8f6f 	isb	sy
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	60fb      	str	r3, [r7, #12]
}
 8004c00:	bf00      	nop
 8004c02:	e7fe      	b.n	8004c02 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	689c      	ldr	r4, [r3, #8]
 8004c08:	f001 fba6 	bl	8006358 <xTaskGetCurrentTaskHandle>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	429c      	cmp	r4, r3
 8004c10:	d111      	bne.n	8004c36 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	1e5a      	subs	r2, r3, #1
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d105      	bne.n	8004c30 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004c24:	2300      	movs	r3, #0
 8004c26:	2200      	movs	r2, #0
 8004c28:	2100      	movs	r1, #0
 8004c2a:	6938      	ldr	r0, [r7, #16]
 8004c2c:	f000 f840 	bl	8004cb0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004c30:	2301      	movs	r3, #1
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	e001      	b.n	8004c3a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004c36:	2300      	movs	r3, #0
 8004c38:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004c3a:	697b      	ldr	r3, [r7, #20]
	}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	371c      	adds	r7, #28
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd90      	pop	{r4, r7, pc}

08004c44 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004c44:	b590      	push	{r4, r7, lr}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10a      	bne.n	8004c6e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8004c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5c:	f383 8811 	msr	BASEPRI, r3
 8004c60:	f3bf 8f6f 	isb	sy
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	60fb      	str	r3, [r7, #12]
}
 8004c6a:	bf00      	nop
 8004c6c:	e7fe      	b.n	8004c6c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	689c      	ldr	r4, [r3, #8]
 8004c72:	f001 fb71 	bl	8006358 <xTaskGetCurrentTaskHandle>
 8004c76:	4603      	mov	r3, r0
 8004c78:	429c      	cmp	r4, r3
 8004c7a:	d107      	bne.n	8004c8c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	1c5a      	adds	r2, r3, #1
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8004c86:	2301      	movs	r3, #1
 8004c88:	617b      	str	r3, [r7, #20]
 8004c8a:	e00c      	b.n	8004ca6 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004c8c:	6839      	ldr	r1, [r7, #0]
 8004c8e:	6938      	ldr	r0, [r7, #16]
 8004c90:	f000 fa88 	bl	80051a4 <xQueueSemaphoreTake>
 8004c94:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d004      	beq.n	8004ca6 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	1c5a      	adds	r2, r3, #1
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8004ca6:	697b      	ldr	r3, [r7, #20]
	}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	371c      	adds	r7, #28
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd90      	pop	{r4, r7, pc}

08004cb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b08e      	sub	sp, #56	; 0x38
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
 8004cbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10a      	bne.n	8004ce2 <xQueueGenericSend+0x32>
	__asm volatile
 8004ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd0:	f383 8811 	msr	BASEPRI, r3
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004cde:	bf00      	nop
 8004ce0:	e7fe      	b.n	8004ce0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d103      	bne.n	8004cf0 <xQueueGenericSend+0x40>
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <xQueueGenericSend+0x44>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e000      	b.n	8004cf6 <xQueueGenericSend+0x46>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10a      	bne.n	8004d10 <xQueueGenericSend+0x60>
	__asm volatile
 8004cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfe:	f383 8811 	msr	BASEPRI, r3
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d0c:	bf00      	nop
 8004d0e:	e7fe      	b.n	8004d0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d103      	bne.n	8004d1e <xQueueGenericSend+0x6e>
 8004d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d101      	bne.n	8004d22 <xQueueGenericSend+0x72>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e000      	b.n	8004d24 <xQueueGenericSend+0x74>
 8004d22:	2300      	movs	r3, #0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d10a      	bne.n	8004d3e <xQueueGenericSend+0x8e>
	__asm volatile
 8004d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2c:	f383 8811 	msr	BASEPRI, r3
 8004d30:	f3bf 8f6f 	isb	sy
 8004d34:	f3bf 8f4f 	dsb	sy
 8004d38:	623b      	str	r3, [r7, #32]
}
 8004d3a:	bf00      	nop
 8004d3c:	e7fe      	b.n	8004d3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d3e:	f001 fb1b 	bl	8006378 <xTaskGetSchedulerState>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d102      	bne.n	8004d4e <xQueueGenericSend+0x9e>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <xQueueGenericSend+0xa2>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e000      	b.n	8004d54 <xQueueGenericSend+0xa4>
 8004d52:	2300      	movs	r3, #0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10a      	bne.n	8004d6e <xQueueGenericSend+0xbe>
	__asm volatile
 8004d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5c:	f383 8811 	msr	BASEPRI, r3
 8004d60:	f3bf 8f6f 	isb	sy
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	61fb      	str	r3, [r7, #28]
}
 8004d6a:	bf00      	nop
 8004d6c:	e7fe      	b.n	8004d6c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d6e:	f002 f959 	bl	8007024 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d302      	bcc.n	8004d84 <xQueueGenericSend+0xd4>
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d129      	bne.n	8004dd8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	68b9      	ldr	r1, [r7, #8]
 8004d88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d8a:	f000 fb2f 	bl	80053ec <prvCopyDataToQueue>
 8004d8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d010      	beq.n	8004dba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9a:	3324      	adds	r3, #36	; 0x24
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f001 f919 	bl	8005fd4 <xTaskRemoveFromEventList>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d013      	beq.n	8004dd0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004da8:	4b3f      	ldr	r3, [pc, #252]	; (8004ea8 <xQueueGenericSend+0x1f8>)
 8004daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	e00a      	b.n	8004dd0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d007      	beq.n	8004dd0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004dc0:	4b39      	ldr	r3, [pc, #228]	; (8004ea8 <xQueueGenericSend+0x1f8>)
 8004dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004dd0:	f002 f958 	bl	8007084 <vPortExitCritical>
				return pdPASS;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e063      	b.n	8004ea0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d103      	bne.n	8004de6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004dde:	f002 f951 	bl	8007084 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004de2:	2300      	movs	r3, #0
 8004de4:	e05c      	b.n	8004ea0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d106      	bne.n	8004dfa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004dec:	f107 0314 	add.w	r3, r7, #20
 8004df0:	4618      	mov	r0, r3
 8004df2:	f001 f953 	bl	800609c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004df6:	2301      	movs	r3, #1
 8004df8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004dfa:	f002 f943 	bl	8007084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004dfe:	f000 febf 	bl	8005b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e02:	f002 f90f 	bl	8007024 <vPortEnterCritical>
 8004e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e0c:	b25b      	sxtb	r3, r3
 8004e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e12:	d103      	bne.n	8004e1c <xQueueGenericSend+0x16c>
 8004e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e22:	b25b      	sxtb	r3, r3
 8004e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e28:	d103      	bne.n	8004e32 <xQueueGenericSend+0x182>
 8004e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e32:	f002 f927 	bl	8007084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e36:	1d3a      	adds	r2, r7, #4
 8004e38:	f107 0314 	add.w	r3, r7, #20
 8004e3c:	4611      	mov	r1, r2
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f001 f942 	bl	80060c8 <xTaskCheckForTimeOut>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d124      	bne.n	8004e94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e4c:	f000 fbc6 	bl	80055dc <prvIsQueueFull>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d018      	beq.n	8004e88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e58:	3310      	adds	r3, #16
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	4611      	mov	r1, r2
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f001 f868 	bl	8005f34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e66:	f000 fb51 	bl	800550c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e6a:	f000 fe97 	bl	8005b9c <xTaskResumeAll>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f47f af7c 	bne.w	8004d6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004e76:	4b0c      	ldr	r3, [pc, #48]	; (8004ea8 <xQueueGenericSend+0x1f8>)
 8004e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	e772      	b.n	8004d6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e8a:	f000 fb3f 	bl	800550c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e8e:	f000 fe85 	bl	8005b9c <xTaskResumeAll>
 8004e92:	e76c      	b.n	8004d6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e96:	f000 fb39 	bl	800550c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e9a:	f000 fe7f 	bl	8005b9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3738      	adds	r7, #56	; 0x38
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	e000ed04 	.word	0xe000ed04

08004eac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b090      	sub	sp, #64	; 0x40
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
 8004eb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10a      	bne.n	8004eda <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec8:	f383 8811 	msr	BASEPRI, r3
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004ed6:	bf00      	nop
 8004ed8:	e7fe      	b.n	8004ed8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d103      	bne.n	8004ee8 <xQueueGenericSendFromISR+0x3c>
 8004ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <xQueueGenericSendFromISR+0x40>
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e000      	b.n	8004eee <xQueueGenericSendFromISR+0x42>
 8004eec:	2300      	movs	r3, #0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10a      	bne.n	8004f08 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef6:	f383 8811 	msr	BASEPRI, r3
 8004efa:	f3bf 8f6f 	isb	sy
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f04:	bf00      	nop
 8004f06:	e7fe      	b.n	8004f06 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d103      	bne.n	8004f16 <xQueueGenericSendFromISR+0x6a>
 8004f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d101      	bne.n	8004f1a <xQueueGenericSendFromISR+0x6e>
 8004f16:	2301      	movs	r3, #1
 8004f18:	e000      	b.n	8004f1c <xQueueGenericSendFromISR+0x70>
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10a      	bne.n	8004f36 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f24:	f383 8811 	msr	BASEPRI, r3
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	623b      	str	r3, [r7, #32]
}
 8004f32:	bf00      	nop
 8004f34:	e7fe      	b.n	8004f34 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f36:	f002 f957 	bl	80071e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004f3a:	f3ef 8211 	mrs	r2, BASEPRI
 8004f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	61fa      	str	r2, [r7, #28]
 8004f50:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004f52:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f54:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d302      	bcc.n	8004f68 <xQueueGenericSendFromISR+0xbc>
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d12f      	bne.n	8004fc8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f76:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	68b9      	ldr	r1, [r7, #8]
 8004f7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f7e:	f000 fa35 	bl	80053ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f82:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8a:	d112      	bne.n	8004fb2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d016      	beq.n	8004fc2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f96:	3324      	adds	r3, #36	; 0x24
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f001 f81b 	bl	8005fd4 <xTaskRemoveFromEventList>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00e      	beq.n	8004fc2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00b      	beq.n	8004fc2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	601a      	str	r2, [r3, #0]
 8004fb0:	e007      	b.n	8004fc2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004fb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	b25a      	sxtb	r2, r3
 8004fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004fc6:	e001      	b.n	8004fcc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004fd6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3740      	adds	r7, #64	; 0x40
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08c      	sub	sp, #48	; 0x30
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10a      	bne.n	8005014 <xQueueReceive+0x30>
	__asm volatile
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	623b      	str	r3, [r7, #32]
}
 8005010:	bf00      	nop
 8005012:	e7fe      	b.n	8005012 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d103      	bne.n	8005022 <xQueueReceive+0x3e>
 800501a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <xQueueReceive+0x42>
 8005022:	2301      	movs	r3, #1
 8005024:	e000      	b.n	8005028 <xQueueReceive+0x44>
 8005026:	2300      	movs	r3, #0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10a      	bne.n	8005042 <xQueueReceive+0x5e>
	__asm volatile
 800502c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005030:	f383 8811 	msr	BASEPRI, r3
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	61fb      	str	r3, [r7, #28]
}
 800503e:	bf00      	nop
 8005040:	e7fe      	b.n	8005040 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005042:	f001 f999 	bl	8006378 <xTaskGetSchedulerState>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d102      	bne.n	8005052 <xQueueReceive+0x6e>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <xQueueReceive+0x72>
 8005052:	2301      	movs	r3, #1
 8005054:	e000      	b.n	8005058 <xQueueReceive+0x74>
 8005056:	2300      	movs	r3, #0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10a      	bne.n	8005072 <xQueueReceive+0x8e>
	__asm volatile
 800505c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005060:	f383 8811 	msr	BASEPRI, r3
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	f3bf 8f4f 	dsb	sy
 800506c:	61bb      	str	r3, [r7, #24]
}
 800506e:	bf00      	nop
 8005070:	e7fe      	b.n	8005070 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005072:	f001 ffd7 	bl	8007024 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	2b00      	cmp	r3, #0
 8005080:	d01f      	beq.n	80050c2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005082:	68b9      	ldr	r1, [r7, #8]
 8005084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005086:	f000 fa1b 	bl	80054c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	1e5a      	subs	r2, r3, #1
 800508e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005090:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00f      	beq.n	80050ba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800509a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509c:	3310      	adds	r3, #16
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 ff98 	bl	8005fd4 <xTaskRemoveFromEventList>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d007      	beq.n	80050ba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80050aa:	4b3d      	ldr	r3, [pc, #244]	; (80051a0 <xQueueReceive+0x1bc>)
 80050ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80050ba:	f001 ffe3 	bl	8007084 <vPortExitCritical>
				return pdPASS;
 80050be:	2301      	movs	r3, #1
 80050c0:	e069      	b.n	8005196 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d103      	bne.n	80050d0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050c8:	f001 ffdc 	bl	8007084 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80050cc:	2300      	movs	r3, #0
 80050ce:	e062      	b.n	8005196 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d106      	bne.n	80050e4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050d6:	f107 0310 	add.w	r3, r7, #16
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 ffde 	bl	800609c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050e0:	2301      	movs	r3, #1
 80050e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050e4:	f001 ffce 	bl	8007084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050e8:	f000 fd4a 	bl	8005b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050ec:	f001 ff9a 	bl	8007024 <vPortEnterCritical>
 80050f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050f6:	b25b      	sxtb	r3, r3
 80050f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050fc:	d103      	bne.n	8005106 <xQueueReceive+0x122>
 80050fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005100:	2200      	movs	r2, #0
 8005102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005108:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800510c:	b25b      	sxtb	r3, r3
 800510e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005112:	d103      	bne.n	800511c <xQueueReceive+0x138>
 8005114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800511c:	f001 ffb2 	bl	8007084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005120:	1d3a      	adds	r2, r7, #4
 8005122:	f107 0310 	add.w	r3, r7, #16
 8005126:	4611      	mov	r1, r2
 8005128:	4618      	mov	r0, r3
 800512a:	f000 ffcd 	bl	80060c8 <xTaskCheckForTimeOut>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d123      	bne.n	800517c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005136:	f000 fa3b 	bl	80055b0 <prvIsQueueEmpty>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d017      	beq.n	8005170 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005142:	3324      	adds	r3, #36	; 0x24
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	4611      	mov	r1, r2
 8005148:	4618      	mov	r0, r3
 800514a:	f000 fef3 	bl	8005f34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800514e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005150:	f000 f9dc 	bl	800550c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005154:	f000 fd22 	bl	8005b9c <xTaskResumeAll>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d189      	bne.n	8005072 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800515e:	4b10      	ldr	r3, [pc, #64]	; (80051a0 <xQueueReceive+0x1bc>)
 8005160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	f3bf 8f4f 	dsb	sy
 800516a:	f3bf 8f6f 	isb	sy
 800516e:	e780      	b.n	8005072 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005172:	f000 f9cb 	bl	800550c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005176:	f000 fd11 	bl	8005b9c <xTaskResumeAll>
 800517a:	e77a      	b.n	8005072 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800517c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800517e:	f000 f9c5 	bl	800550c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005182:	f000 fd0b 	bl	8005b9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005188:	f000 fa12 	bl	80055b0 <prvIsQueueEmpty>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	f43f af6f 	beq.w	8005072 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005194:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005196:	4618      	mov	r0, r3
 8005198:	3730      	adds	r7, #48	; 0x30
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	e000ed04 	.word	0xe000ed04

080051a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08e      	sub	sp, #56	; 0x38
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80051ae:	2300      	movs	r3, #0
 80051b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80051b6:	2300      	movs	r3, #0
 80051b8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80051ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10a      	bne.n	80051d6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80051c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	623b      	str	r3, [r7, #32]
}
 80051d2:	bf00      	nop
 80051d4:	e7fe      	b.n	80051d4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80051d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80051de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	61fb      	str	r3, [r7, #28]
}
 80051f0:	bf00      	nop
 80051f2:	e7fe      	b.n	80051f2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051f4:	f001 f8c0 	bl	8006378 <xTaskGetSchedulerState>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d102      	bne.n	8005204 <xQueueSemaphoreTake+0x60>
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <xQueueSemaphoreTake+0x64>
 8005204:	2301      	movs	r3, #1
 8005206:	e000      	b.n	800520a <xQueueSemaphoreTake+0x66>
 8005208:	2300      	movs	r3, #0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10a      	bne.n	8005224 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800520e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005212:	f383 8811 	msr	BASEPRI, r3
 8005216:	f3bf 8f6f 	isb	sy
 800521a:	f3bf 8f4f 	dsb	sy
 800521e:	61bb      	str	r3, [r7, #24]
}
 8005220:	bf00      	nop
 8005222:	e7fe      	b.n	8005222 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005224:	f001 fefe 	bl	8007024 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800522e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005230:	2b00      	cmp	r3, #0
 8005232:	d024      	beq.n	800527e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005236:	1e5a      	subs	r2, r3, #1
 8005238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800523a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800523c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d104      	bne.n	800524e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005244:	f001 fa0e 	bl	8006664 <pvTaskIncrementMutexHeldCount>
 8005248:	4602      	mov	r2, r0
 800524a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800524e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00f      	beq.n	8005276 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005258:	3310      	adds	r3, #16
 800525a:	4618      	mov	r0, r3
 800525c:	f000 feba 	bl	8005fd4 <xTaskRemoveFromEventList>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d007      	beq.n	8005276 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005266:	4b54      	ldr	r3, [pc, #336]	; (80053b8 <xQueueSemaphoreTake+0x214>)
 8005268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005276:	f001 ff05 	bl	8007084 <vPortExitCritical>
				return pdPASS;
 800527a:	2301      	movs	r3, #1
 800527c:	e097      	b.n	80053ae <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d111      	bne.n	80052a8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	617b      	str	r3, [r7, #20]
}
 800529c:	bf00      	nop
 800529e:	e7fe      	b.n	800529e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80052a0:	f001 fef0 	bl	8007084 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80052a4:	2300      	movs	r3, #0
 80052a6:	e082      	b.n	80053ae <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d106      	bne.n	80052bc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052ae:	f107 030c 	add.w	r3, r7, #12
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fef2 	bl	800609c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052b8:	2301      	movs	r3, #1
 80052ba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052bc:	f001 fee2 	bl	8007084 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052c0:	f000 fc5e 	bl	8005b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052c4:	f001 feae 	bl	8007024 <vPortEnterCritical>
 80052c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052ce:	b25b      	sxtb	r3, r3
 80052d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d4:	d103      	bne.n	80052de <xQueueSemaphoreTake+0x13a>
 80052d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052e4:	b25b      	sxtb	r3, r3
 80052e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ea:	d103      	bne.n	80052f4 <xQueueSemaphoreTake+0x150>
 80052ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052f4:	f001 fec6 	bl	8007084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052f8:	463a      	mov	r2, r7
 80052fa:	f107 030c 	add.w	r3, r7, #12
 80052fe:	4611      	mov	r1, r2
 8005300:	4618      	mov	r0, r3
 8005302:	f000 fee1 	bl	80060c8 <xTaskCheckForTimeOut>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d132      	bne.n	8005372 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800530c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800530e:	f000 f94f 	bl	80055b0 <prvIsQueueEmpty>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d026      	beq.n	8005366 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d109      	bne.n	8005334 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005320:	f001 fe80 	bl	8007024 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	4618      	mov	r0, r3
 800532a:	f001 f843 	bl	80063b4 <xTaskPriorityInherit>
 800532e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005330:	f001 fea8 	bl	8007084 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005336:	3324      	adds	r3, #36	; 0x24
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	4611      	mov	r1, r2
 800533c:	4618      	mov	r0, r3
 800533e:	f000 fdf9 	bl	8005f34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005342:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005344:	f000 f8e2 	bl	800550c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005348:	f000 fc28 	bl	8005b9c <xTaskResumeAll>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	f47f af68 	bne.w	8005224 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005354:	4b18      	ldr	r3, [pc, #96]	; (80053b8 <xQueueSemaphoreTake+0x214>)
 8005356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800535a:	601a      	str	r2, [r3, #0]
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	f3bf 8f6f 	isb	sy
 8005364:	e75e      	b.n	8005224 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005366:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005368:	f000 f8d0 	bl	800550c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800536c:	f000 fc16 	bl	8005b9c <xTaskResumeAll>
 8005370:	e758      	b.n	8005224 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005372:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005374:	f000 f8ca 	bl	800550c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005378:	f000 fc10 	bl	8005b9c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800537c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800537e:	f000 f917 	bl	80055b0 <prvIsQueueEmpty>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	f43f af4d 	beq.w	8005224 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800538a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00d      	beq.n	80053ac <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005390:	f001 fe48 	bl	8007024 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005394:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005396:	f000 f811 	bl	80053bc <prvGetDisinheritPriorityAfterTimeout>
 800539a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800539c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053a2:	4618      	mov	r0, r3
 80053a4:	f001 f8dc 	bl	8006560 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80053a8:	f001 fe6c 	bl	8007084 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80053ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3738      	adds	r7, #56	; 0x38
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	e000ed04 	.word	0xe000ed04

080053bc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d006      	beq.n	80053da <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	e001      	b.n	80053de <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80053da:	2300      	movs	r3, #0
 80053dc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80053de:	68fb      	ldr	r3, [r7, #12]
	}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80053f8:	2300      	movs	r3, #0
 80053fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005400:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10d      	bne.n	8005426 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d14d      	bne.n	80054ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	4618      	mov	r0, r3
 8005418:	f001 f834 	bl	8006484 <xTaskPriorityDisinherit>
 800541c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	609a      	str	r2, [r3, #8]
 8005424:	e043      	b.n	80054ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d119      	bne.n	8005460 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6858      	ldr	r0, [r3, #4]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005434:	461a      	mov	r2, r3
 8005436:	68b9      	ldr	r1, [r7, #8]
 8005438:	f002 fa34 	bl	80078a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005444:	441a      	add	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	429a      	cmp	r2, r3
 8005454:	d32b      	bcc.n	80054ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	605a      	str	r2, [r3, #4]
 800545e:	e026      	b.n	80054ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	68d8      	ldr	r0, [r3, #12]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005468:	461a      	mov	r2, r3
 800546a:	68b9      	ldr	r1, [r7, #8]
 800546c:	f002 fa1a 	bl	80078a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	68da      	ldr	r2, [r3, #12]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005478:	425b      	negs	r3, r3
 800547a:	441a      	add	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	68da      	ldr	r2, [r3, #12]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	429a      	cmp	r2, r3
 800548a:	d207      	bcs.n	800549c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	689a      	ldr	r2, [r3, #8]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005494:	425b      	negs	r3, r3
 8005496:	441a      	add	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d105      	bne.n	80054ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d002      	beq.n	80054ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80054b6:	697b      	ldr	r3, [r7, #20]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d018      	beq.n	8005504 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	441a      	add	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d303      	bcc.n	80054f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68d9      	ldr	r1, [r3, #12]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fc:	461a      	mov	r2, r3
 80054fe:	6838      	ldr	r0, [r7, #0]
 8005500:	f002 f9d0 	bl	80078a4 <memcpy>
	}
}
 8005504:	bf00      	nop
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005514:	f001 fd86 	bl	8007024 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800551e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005520:	e011      	b.n	8005546 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	2b00      	cmp	r3, #0
 8005528:	d012      	beq.n	8005550 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	3324      	adds	r3, #36	; 0x24
 800552e:	4618      	mov	r0, r3
 8005530:	f000 fd50 	bl	8005fd4 <xTaskRemoveFromEventList>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800553a:	f000 fe27 	bl	800618c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800553e:	7bfb      	ldrb	r3, [r7, #15]
 8005540:	3b01      	subs	r3, #1
 8005542:	b2db      	uxtb	r3, r3
 8005544:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800554a:	2b00      	cmp	r3, #0
 800554c:	dce9      	bgt.n	8005522 <prvUnlockQueue+0x16>
 800554e:	e000      	b.n	8005552 <prvUnlockQueue+0x46>
					break;
 8005550:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	22ff      	movs	r2, #255	; 0xff
 8005556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800555a:	f001 fd93 	bl	8007084 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800555e:	f001 fd61 	bl	8007024 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005568:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800556a:	e011      	b.n	8005590 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d012      	beq.n	800559a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3310      	adds	r3, #16
 8005578:	4618      	mov	r0, r3
 800557a:	f000 fd2b 	bl	8005fd4 <xTaskRemoveFromEventList>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005584:	f000 fe02 	bl	800618c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005588:	7bbb      	ldrb	r3, [r7, #14]
 800558a:	3b01      	subs	r3, #1
 800558c:	b2db      	uxtb	r3, r3
 800558e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005590:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005594:	2b00      	cmp	r3, #0
 8005596:	dce9      	bgt.n	800556c <prvUnlockQueue+0x60>
 8005598:	e000      	b.n	800559c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800559a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	22ff      	movs	r2, #255	; 0xff
 80055a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80055a4:	f001 fd6e 	bl	8007084 <vPortExitCritical>
}
 80055a8:	bf00      	nop
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055b8:	f001 fd34 	bl	8007024 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d102      	bne.n	80055ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80055c4:	2301      	movs	r3, #1
 80055c6:	60fb      	str	r3, [r7, #12]
 80055c8:	e001      	b.n	80055ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80055ca:	2300      	movs	r3, #0
 80055cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055ce:	f001 fd59 	bl	8007084 <vPortExitCritical>

	return xReturn;
 80055d2:	68fb      	ldr	r3, [r7, #12]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055e4:	f001 fd1e 	bl	8007024 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d102      	bne.n	80055fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80055f4:	2301      	movs	r3, #1
 80055f6:	60fb      	str	r3, [r7, #12]
 80055f8:	e001      	b.n	80055fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80055fa:	2300      	movs	r3, #0
 80055fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055fe:	f001 fd41 	bl	8007084 <vPortExitCritical>

	return xReturn;
 8005602:	68fb      	ldr	r3, [r7, #12]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005616:	2300      	movs	r3, #0
 8005618:	60fb      	str	r3, [r7, #12]
 800561a:	e014      	b.n	8005646 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800561c:	4a0f      	ldr	r2, [pc, #60]	; (800565c <vQueueAddToRegistry+0x50>)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10b      	bne.n	8005640 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005628:	490c      	ldr	r1, [pc, #48]	; (800565c <vQueueAddToRegistry+0x50>)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	683a      	ldr	r2, [r7, #0]
 800562e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005632:	4a0a      	ldr	r2, [pc, #40]	; (800565c <vQueueAddToRegistry+0x50>)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	4413      	add	r3, r2
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800563e:	e006      	b.n	800564e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	3301      	adds	r3, #1
 8005644:	60fb      	str	r3, [r7, #12]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2b07      	cmp	r3, #7
 800564a:	d9e7      	bls.n	800561c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800564c:	bf00      	nop
 800564e:	bf00      	nop
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	20000934 	.word	0x20000934

08005660 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005670:	f001 fcd8 	bl	8007024 <vPortEnterCritical>
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800567a:	b25b      	sxtb	r3, r3
 800567c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005680:	d103      	bne.n	800568a <vQueueWaitForMessageRestricted+0x2a>
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005690:	b25b      	sxtb	r3, r3
 8005692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005696:	d103      	bne.n	80056a0 <vQueueWaitForMessageRestricted+0x40>
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056a0:	f001 fcf0 	bl	8007084 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d106      	bne.n	80056ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	3324      	adds	r3, #36	; 0x24
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	68b9      	ldr	r1, [r7, #8]
 80056b4:	4618      	mov	r0, r3
 80056b6:	f000 fc61 	bl	8005f7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80056ba:	6978      	ldr	r0, [r7, #20]
 80056bc:	f7ff ff26 	bl	800550c <prvUnlockQueue>
	}
 80056c0:	bf00      	nop
 80056c2:	3718      	adds	r7, #24
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08e      	sub	sp, #56	; 0x38
 80056cc:	af04      	add	r7, sp, #16
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
 80056d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80056d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10a      	bne.n	80056f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80056dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e0:	f383 8811 	msr	BASEPRI, r3
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	623b      	str	r3, [r7, #32]
}
 80056ee:	bf00      	nop
 80056f0:	e7fe      	b.n	80056f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80056f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10a      	bne.n	800570e <xTaskCreateStatic+0x46>
	__asm volatile
 80056f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fc:	f383 8811 	msr	BASEPRI, r3
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	61fb      	str	r3, [r7, #28]
}
 800570a:	bf00      	nop
 800570c:	e7fe      	b.n	800570c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800570e:	23bc      	movs	r3, #188	; 0xbc
 8005710:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	2bbc      	cmp	r3, #188	; 0xbc
 8005716:	d00a      	beq.n	800572e <xTaskCreateStatic+0x66>
	__asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	61bb      	str	r3, [r7, #24]
}
 800572a:	bf00      	nop
 800572c:	e7fe      	b.n	800572c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800572e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005732:	2b00      	cmp	r3, #0
 8005734:	d01e      	beq.n	8005774 <xTaskCreateStatic+0xac>
 8005736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005738:	2b00      	cmp	r3, #0
 800573a:	d01b      	beq.n	8005774 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800573c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005744:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005748:	2202      	movs	r2, #2
 800574a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800574e:	2300      	movs	r3, #0
 8005750:	9303      	str	r3, [sp, #12]
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	9302      	str	r3, [sp, #8]
 8005756:	f107 0314 	add.w	r3, r7, #20
 800575a:	9301      	str	r3, [sp, #4]
 800575c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	68b9      	ldr	r1, [r7, #8]
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f000 f850 	bl	800580c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800576c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800576e:	f000 f8f3 	bl	8005958 <prvAddNewTaskToReadyList>
 8005772:	e001      	b.n	8005778 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005774:	2300      	movs	r3, #0
 8005776:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005778:	697b      	ldr	r3, [r7, #20]
	}
 800577a:	4618      	mov	r0, r3
 800577c:	3728      	adds	r7, #40	; 0x28
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005782:	b580      	push	{r7, lr}
 8005784:	b08c      	sub	sp, #48	; 0x30
 8005786:	af04      	add	r7, sp, #16
 8005788:	60f8      	str	r0, [r7, #12]
 800578a:	60b9      	str	r1, [r7, #8]
 800578c:	603b      	str	r3, [r7, #0]
 800578e:	4613      	mov	r3, r2
 8005790:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005792:	88fb      	ldrh	r3, [r7, #6]
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4618      	mov	r0, r3
 8005798:	f001 fd66 	bl	8007268 <pvPortMalloc>
 800579c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00e      	beq.n	80057c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80057a4:	20bc      	movs	r0, #188	; 0xbc
 80057a6:	f001 fd5f 	bl	8007268 <pvPortMalloc>
 80057aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	631a      	str	r2, [r3, #48]	; 0x30
 80057b8:	e005      	b.n	80057c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80057ba:	6978      	ldr	r0, [r7, #20]
 80057bc:	f001 fe20 	bl	8007400 <vPortFree>
 80057c0:	e001      	b.n	80057c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80057c2:	2300      	movs	r3, #0
 80057c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d017      	beq.n	80057fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80057d4:	88fa      	ldrh	r2, [r7, #6]
 80057d6:	2300      	movs	r3, #0
 80057d8:	9303      	str	r3, [sp, #12]
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	9302      	str	r3, [sp, #8]
 80057de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e0:	9301      	str	r3, [sp, #4]
 80057e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	68b9      	ldr	r1, [r7, #8]
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f000 f80e 	bl	800580c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057f0:	69f8      	ldr	r0, [r7, #28]
 80057f2:	f000 f8b1 	bl	8005958 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80057f6:	2301      	movs	r3, #1
 80057f8:	61bb      	str	r3, [r7, #24]
 80057fa:	e002      	b.n	8005802 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005800:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005802:	69bb      	ldr	r3, [r7, #24]
	}
 8005804:	4618      	mov	r0, r3
 8005806:	3720      	adds	r7, #32
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b088      	sub	sp, #32
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800581a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	461a      	mov	r2, r3
 8005824:	21a5      	movs	r1, #165	; 0xa5
 8005826:	f002 f84b 	bl	80078c0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800582a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005834:	3b01      	subs	r3, #1
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	f023 0307 	bic.w	r3, r3, #7
 8005842:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	f003 0307 	and.w	r3, r3, #7
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00a      	beq.n	8005864 <prvInitialiseNewTask+0x58>
	__asm volatile
 800584e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	617b      	str	r3, [r7, #20]
}
 8005860:	bf00      	nop
 8005862:	e7fe      	b.n	8005862 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d01f      	beq.n	80058aa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800586a:	2300      	movs	r3, #0
 800586c:	61fb      	str	r3, [r7, #28]
 800586e:	e012      	b.n	8005896 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	4413      	add	r3, r2
 8005876:	7819      	ldrb	r1, [r3, #0]
 8005878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	4413      	add	r3, r2
 800587e:	3334      	adds	r3, #52	; 0x34
 8005880:	460a      	mov	r2, r1
 8005882:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	4413      	add	r3, r2
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d006      	beq.n	800589e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	3301      	adds	r3, #1
 8005894:	61fb      	str	r3, [r7, #28]
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	2b0f      	cmp	r3, #15
 800589a:	d9e9      	bls.n	8005870 <prvInitialiseNewTask+0x64>
 800589c:	e000      	b.n	80058a0 <prvInitialiseNewTask+0x94>
			{
				break;
 800589e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80058a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058a8:	e003      	b.n	80058b2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80058aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80058b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b4:	2b37      	cmp	r3, #55	; 0x37
 80058b6:	d901      	bls.n	80058bc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80058b8:	2337      	movs	r3, #55	; 0x37
 80058ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80058bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80058c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80058c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ca:	2200      	movs	r2, #0
 80058cc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80058ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d0:	3304      	adds	r3, #4
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fe ff64 	bl	80047a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80058d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058da:	3318      	adds	r3, #24
 80058dc:	4618      	mov	r0, r3
 80058de:	f7fe ff5f 	bl	80047a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80058e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80058ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80058f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80058f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fa:	2200      	movs	r2, #0
 80058fc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005902:	2200      	movs	r2, #0
 8005904:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590a:	3354      	adds	r3, #84	; 0x54
 800590c:	2260      	movs	r2, #96	; 0x60
 800590e:	2100      	movs	r1, #0
 8005910:	4618      	mov	r0, r3
 8005912:	f001 ffd5 	bl	80078c0 <memset>
 8005916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005918:	4a0c      	ldr	r2, [pc, #48]	; (800594c <prvInitialiseNewTask+0x140>)
 800591a:	659a      	str	r2, [r3, #88]	; 0x58
 800591c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591e:	4a0c      	ldr	r2, [pc, #48]	; (8005950 <prvInitialiseNewTask+0x144>)
 8005920:	65da      	str	r2, [r3, #92]	; 0x5c
 8005922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005924:	4a0b      	ldr	r2, [pc, #44]	; (8005954 <prvInitialiseNewTask+0x148>)
 8005926:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	68f9      	ldr	r1, [r7, #12]
 800592c:	69b8      	ldr	r0, [r7, #24]
 800592e:	f001 fa4f 	bl	8006dd0 <pxPortInitialiseStack>
 8005932:	4602      	mov	r2, r0
 8005934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005936:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593a:	2b00      	cmp	r3, #0
 800593c:	d002      	beq.n	8005944 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800593e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005942:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005944:	bf00      	nop
 8005946:	3720      	adds	r7, #32
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	08008eb0 	.word	0x08008eb0
 8005950:	08008ed0 	.word	0x08008ed0
 8005954:	08008e90 	.word	0x08008e90

08005958 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005960:	f001 fb60 	bl	8007024 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005964:	4b2d      	ldr	r3, [pc, #180]	; (8005a1c <prvAddNewTaskToReadyList+0xc4>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	3301      	adds	r3, #1
 800596a:	4a2c      	ldr	r2, [pc, #176]	; (8005a1c <prvAddNewTaskToReadyList+0xc4>)
 800596c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800596e:	4b2c      	ldr	r3, [pc, #176]	; (8005a20 <prvAddNewTaskToReadyList+0xc8>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d109      	bne.n	800598a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005976:	4a2a      	ldr	r2, [pc, #168]	; (8005a20 <prvAddNewTaskToReadyList+0xc8>)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800597c:	4b27      	ldr	r3, [pc, #156]	; (8005a1c <prvAddNewTaskToReadyList+0xc4>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d110      	bne.n	80059a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005984:	f000 fc26 	bl	80061d4 <prvInitialiseTaskLists>
 8005988:	e00d      	b.n	80059a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800598a:	4b26      	ldr	r3, [pc, #152]	; (8005a24 <prvAddNewTaskToReadyList+0xcc>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d109      	bne.n	80059a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005992:	4b23      	ldr	r3, [pc, #140]	; (8005a20 <prvAddNewTaskToReadyList+0xc8>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599c:	429a      	cmp	r2, r3
 800599e:	d802      	bhi.n	80059a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80059a0:	4a1f      	ldr	r2, [pc, #124]	; (8005a20 <prvAddNewTaskToReadyList+0xc8>)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80059a6:	4b20      	ldr	r3, [pc, #128]	; (8005a28 <prvAddNewTaskToReadyList+0xd0>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	3301      	adds	r3, #1
 80059ac:	4a1e      	ldr	r2, [pc, #120]	; (8005a28 <prvAddNewTaskToReadyList+0xd0>)
 80059ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80059b0:	4b1d      	ldr	r3, [pc, #116]	; (8005a28 <prvAddNewTaskToReadyList+0xd0>)
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059bc:	4b1b      	ldr	r3, [pc, #108]	; (8005a2c <prvAddNewTaskToReadyList+0xd4>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d903      	bls.n	80059cc <prvAddNewTaskToReadyList+0x74>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c8:	4a18      	ldr	r2, [pc, #96]	; (8005a2c <prvAddNewTaskToReadyList+0xd4>)
 80059ca:	6013      	str	r3, [r2, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d0:	4613      	mov	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4a15      	ldr	r2, [pc, #84]	; (8005a30 <prvAddNewTaskToReadyList+0xd8>)
 80059da:	441a      	add	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	3304      	adds	r3, #4
 80059e0:	4619      	mov	r1, r3
 80059e2:	4610      	mov	r0, r2
 80059e4:	f7fe fee9 	bl	80047ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80059e8:	f001 fb4c 	bl	8007084 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80059ec:	4b0d      	ldr	r3, [pc, #52]	; (8005a24 <prvAddNewTaskToReadyList+0xcc>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00e      	beq.n	8005a12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80059f4:	4b0a      	ldr	r3, [pc, #40]	; (8005a20 <prvAddNewTaskToReadyList+0xc8>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d207      	bcs.n	8005a12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a02:	4b0c      	ldr	r3, [pc, #48]	; (8005a34 <prvAddNewTaskToReadyList+0xdc>)
 8005a04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a12:	bf00      	nop
 8005a14:	3708      	adds	r7, #8
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	20000e48 	.word	0x20000e48
 8005a20:	20000974 	.word	0x20000974
 8005a24:	20000e54 	.word	0x20000e54
 8005a28:	20000e64 	.word	0x20000e64
 8005a2c:	20000e50 	.word	0x20000e50
 8005a30:	20000978 	.word	0x20000978
 8005a34:	e000ed04 	.word	0xe000ed04

08005a38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005a40:	2300      	movs	r3, #0
 8005a42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d017      	beq.n	8005a7a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005a4a:	4b13      	ldr	r3, [pc, #76]	; (8005a98 <vTaskDelay+0x60>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <vTaskDelay+0x30>
	__asm volatile
 8005a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a56:	f383 8811 	msr	BASEPRI, r3
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	60bb      	str	r3, [r7, #8]
}
 8005a64:	bf00      	nop
 8005a66:	e7fe      	b.n	8005a66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005a68:	f000 f88a 	bl	8005b80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fe0c 	bl	800668c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a74:	f000 f892 	bl	8005b9c <xTaskResumeAll>
 8005a78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d107      	bne.n	8005a90 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005a80:	4b06      	ldr	r3, [pc, #24]	; (8005a9c <vTaskDelay+0x64>)
 8005a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a90:	bf00      	nop
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	20000e70 	.word	0x20000e70
 8005a9c:	e000ed04 	.word	0xe000ed04

08005aa0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b08a      	sub	sp, #40	; 0x28
 8005aa4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005aae:	463a      	mov	r2, r7
 8005ab0:	1d39      	adds	r1, r7, #4
 8005ab2:	f107 0308 	add.w	r3, r7, #8
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7fe fe1e 	bl	80046f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005abc:	6839      	ldr	r1, [r7, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	9202      	str	r2, [sp, #8]
 8005ac4:	9301      	str	r3, [sp, #4]
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	2300      	movs	r3, #0
 8005acc:	460a      	mov	r2, r1
 8005ace:	4924      	ldr	r1, [pc, #144]	; (8005b60 <vTaskStartScheduler+0xc0>)
 8005ad0:	4824      	ldr	r0, [pc, #144]	; (8005b64 <vTaskStartScheduler+0xc4>)
 8005ad2:	f7ff fdf9 	bl	80056c8 <xTaskCreateStatic>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	4a23      	ldr	r2, [pc, #140]	; (8005b68 <vTaskStartScheduler+0xc8>)
 8005ada:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005adc:	4b22      	ldr	r3, [pc, #136]	; (8005b68 <vTaskStartScheduler+0xc8>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d002      	beq.n	8005aea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	617b      	str	r3, [r7, #20]
 8005ae8:	e001      	b.n	8005aee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005aea:	2300      	movs	r3, #0
 8005aec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d102      	bne.n	8005afa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005af4:	f000 fe1e 	bl	8006734 <xTimerCreateTimerTask>
 8005af8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d11b      	bne.n	8005b38 <vTaskStartScheduler+0x98>
	__asm volatile
 8005b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	613b      	str	r3, [r7, #16]
}
 8005b12:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b14:	4b15      	ldr	r3, [pc, #84]	; (8005b6c <vTaskStartScheduler+0xcc>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	3354      	adds	r3, #84	; 0x54
 8005b1a:	4a15      	ldr	r2, [pc, #84]	; (8005b70 <vTaskStartScheduler+0xd0>)
 8005b1c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b1e:	4b15      	ldr	r3, [pc, #84]	; (8005b74 <vTaskStartScheduler+0xd4>)
 8005b20:	f04f 32ff 	mov.w	r2, #4294967295
 8005b24:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b26:	4b14      	ldr	r3, [pc, #80]	; (8005b78 <vTaskStartScheduler+0xd8>)
 8005b28:	2201      	movs	r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b2c:	4b13      	ldr	r3, [pc, #76]	; (8005b7c <vTaskStartScheduler+0xdc>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b32:	f001 f9d5 	bl	8006ee0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b36:	e00e      	b.n	8005b56 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b3e:	d10a      	bne.n	8005b56 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b44:	f383 8811 	msr	BASEPRI, r3
 8005b48:	f3bf 8f6f 	isb	sy
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	60fb      	str	r3, [r7, #12]
}
 8005b52:	bf00      	nop
 8005b54:	e7fe      	b.n	8005b54 <vTaskStartScheduler+0xb4>
}
 8005b56:	bf00      	nop
 8005b58:	3718      	adds	r7, #24
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	0800889c 	.word	0x0800889c
 8005b64:	080061a5 	.word	0x080061a5
 8005b68:	20000e6c 	.word	0x20000e6c
 8005b6c:	20000974 	.word	0x20000974
 8005b70:	20000010 	.word	0x20000010
 8005b74:	20000e68 	.word	0x20000e68
 8005b78:	20000e54 	.word	0x20000e54
 8005b7c:	20000e4c 	.word	0x20000e4c

08005b80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b80:	b480      	push	{r7}
 8005b82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005b84:	4b04      	ldr	r3, [pc, #16]	; (8005b98 <vTaskSuspendAll+0x18>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	4a03      	ldr	r2, [pc, #12]	; (8005b98 <vTaskSuspendAll+0x18>)
 8005b8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005b8e:	bf00      	nop
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr
 8005b98:	20000e70 	.word	0x20000e70

08005b9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005baa:	4b42      	ldr	r3, [pc, #264]	; (8005cb4 <xTaskResumeAll+0x118>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10a      	bne.n	8005bc8 <xTaskResumeAll+0x2c>
	__asm volatile
 8005bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb6:	f383 8811 	msr	BASEPRI, r3
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	603b      	str	r3, [r7, #0]
}
 8005bc4:	bf00      	nop
 8005bc6:	e7fe      	b.n	8005bc6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005bc8:	f001 fa2c 	bl	8007024 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005bcc:	4b39      	ldr	r3, [pc, #228]	; (8005cb4 <xTaskResumeAll+0x118>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	4a38      	ldr	r2, [pc, #224]	; (8005cb4 <xTaskResumeAll+0x118>)
 8005bd4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bd6:	4b37      	ldr	r3, [pc, #220]	; (8005cb4 <xTaskResumeAll+0x118>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d162      	bne.n	8005ca4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005bde:	4b36      	ldr	r3, [pc, #216]	; (8005cb8 <xTaskResumeAll+0x11c>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d05e      	beq.n	8005ca4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005be6:	e02f      	b.n	8005c48 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005be8:	4b34      	ldr	r3, [pc, #208]	; (8005cbc <xTaskResumeAll+0x120>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	3318      	adds	r3, #24
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7fe fe3d 	bl	8004874 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	3304      	adds	r3, #4
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7fe fe38 	bl	8004874 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c08:	4b2d      	ldr	r3, [pc, #180]	; (8005cc0 <xTaskResumeAll+0x124>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d903      	bls.n	8005c18 <xTaskResumeAll+0x7c>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c14:	4a2a      	ldr	r2, [pc, #168]	; (8005cc0 <xTaskResumeAll+0x124>)
 8005c16:	6013      	str	r3, [r2, #0]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4413      	add	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4a27      	ldr	r2, [pc, #156]	; (8005cc4 <xTaskResumeAll+0x128>)
 8005c26:	441a      	add	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	3304      	adds	r3, #4
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	4610      	mov	r0, r2
 8005c30:	f7fe fdc3 	bl	80047ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c38:	4b23      	ldr	r3, [pc, #140]	; (8005cc8 <xTaskResumeAll+0x12c>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d302      	bcc.n	8005c48 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005c42:	4b22      	ldr	r3, [pc, #136]	; (8005ccc <xTaskResumeAll+0x130>)
 8005c44:	2201      	movs	r2, #1
 8005c46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c48:	4b1c      	ldr	r3, [pc, #112]	; (8005cbc <xTaskResumeAll+0x120>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1cb      	bne.n	8005be8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d001      	beq.n	8005c5a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c56:	f000 fb5f 	bl	8006318 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c5a:	4b1d      	ldr	r3, [pc, #116]	; (8005cd0 <xTaskResumeAll+0x134>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d010      	beq.n	8005c88 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c66:	f000 f847 	bl	8005cf8 <xTaskIncrementTick>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d002      	beq.n	8005c76 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005c70:	4b16      	ldr	r3, [pc, #88]	; (8005ccc <xTaskResumeAll+0x130>)
 8005c72:	2201      	movs	r2, #1
 8005c74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1f1      	bne.n	8005c66 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005c82:	4b13      	ldr	r3, [pc, #76]	; (8005cd0 <xTaskResumeAll+0x134>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c88:	4b10      	ldr	r3, [pc, #64]	; (8005ccc <xTaskResumeAll+0x130>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d009      	beq.n	8005ca4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c90:	2301      	movs	r3, #1
 8005c92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c94:	4b0f      	ldr	r3, [pc, #60]	; (8005cd4 <xTaskResumeAll+0x138>)
 8005c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c9a:	601a      	str	r2, [r3, #0]
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ca4:	f001 f9ee 	bl	8007084 <vPortExitCritical>

	return xAlreadyYielded;
 8005ca8:	68bb      	ldr	r3, [r7, #8]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	20000e70 	.word	0x20000e70
 8005cb8:	20000e48 	.word	0x20000e48
 8005cbc:	20000e08 	.word	0x20000e08
 8005cc0:	20000e50 	.word	0x20000e50
 8005cc4:	20000978 	.word	0x20000978
 8005cc8:	20000974 	.word	0x20000974
 8005ccc:	20000e5c 	.word	0x20000e5c
 8005cd0:	20000e58 	.word	0x20000e58
 8005cd4:	e000ed04 	.word	0xe000ed04

08005cd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005cde:	4b05      	ldr	r3, [pc, #20]	; (8005cf4 <xTaskGetTickCount+0x1c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005ce4:	687b      	ldr	r3, [r7, #4]
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	20000e4c 	.word	0x20000e4c

08005cf8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d02:	4b4f      	ldr	r3, [pc, #316]	; (8005e40 <xTaskIncrementTick+0x148>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f040 808f 	bne.w	8005e2a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d0c:	4b4d      	ldr	r3, [pc, #308]	; (8005e44 <xTaskIncrementTick+0x14c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	3301      	adds	r3, #1
 8005d12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d14:	4a4b      	ldr	r2, [pc, #300]	; (8005e44 <xTaskIncrementTick+0x14c>)
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d120      	bne.n	8005d62 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d20:	4b49      	ldr	r3, [pc, #292]	; (8005e48 <xTaskIncrementTick+0x150>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00a      	beq.n	8005d40 <xTaskIncrementTick+0x48>
	__asm volatile
 8005d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	603b      	str	r3, [r7, #0]
}
 8005d3c:	bf00      	nop
 8005d3e:	e7fe      	b.n	8005d3e <xTaskIncrementTick+0x46>
 8005d40:	4b41      	ldr	r3, [pc, #260]	; (8005e48 <xTaskIncrementTick+0x150>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	4b41      	ldr	r3, [pc, #260]	; (8005e4c <xTaskIncrementTick+0x154>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a3f      	ldr	r2, [pc, #252]	; (8005e48 <xTaskIncrementTick+0x150>)
 8005d4c:	6013      	str	r3, [r2, #0]
 8005d4e:	4a3f      	ldr	r2, [pc, #252]	; (8005e4c <xTaskIncrementTick+0x154>)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6013      	str	r3, [r2, #0]
 8005d54:	4b3e      	ldr	r3, [pc, #248]	; (8005e50 <xTaskIncrementTick+0x158>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	4a3d      	ldr	r2, [pc, #244]	; (8005e50 <xTaskIncrementTick+0x158>)
 8005d5c:	6013      	str	r3, [r2, #0]
 8005d5e:	f000 fadb 	bl	8006318 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d62:	4b3c      	ldr	r3, [pc, #240]	; (8005e54 <xTaskIncrementTick+0x15c>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d349      	bcc.n	8005e00 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d6c:	4b36      	ldr	r3, [pc, #216]	; (8005e48 <xTaskIncrementTick+0x150>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d104      	bne.n	8005d80 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d76:	4b37      	ldr	r3, [pc, #220]	; (8005e54 <xTaskIncrementTick+0x15c>)
 8005d78:	f04f 32ff 	mov.w	r2, #4294967295
 8005d7c:	601a      	str	r2, [r3, #0]
					break;
 8005d7e:	e03f      	b.n	8005e00 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d80:	4b31      	ldr	r3, [pc, #196]	; (8005e48 <xTaskIncrementTick+0x150>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d203      	bcs.n	8005da0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d98:	4a2e      	ldr	r2, [pc, #184]	; (8005e54 <xTaskIncrementTick+0x15c>)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d9e:	e02f      	b.n	8005e00 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	3304      	adds	r3, #4
 8005da4:	4618      	mov	r0, r3
 8005da6:	f7fe fd65 	bl	8004874 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d004      	beq.n	8005dbc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	3318      	adds	r3, #24
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fe fd5c 	bl	8004874 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc0:	4b25      	ldr	r3, [pc, #148]	; (8005e58 <xTaskIncrementTick+0x160>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d903      	bls.n	8005dd0 <xTaskIncrementTick+0xd8>
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dcc:	4a22      	ldr	r2, [pc, #136]	; (8005e58 <xTaskIncrementTick+0x160>)
 8005dce:	6013      	str	r3, [r2, #0]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4a1f      	ldr	r2, [pc, #124]	; (8005e5c <xTaskIncrementTick+0x164>)
 8005dde:	441a      	add	r2, r3
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	3304      	adds	r3, #4
 8005de4:	4619      	mov	r1, r3
 8005de6:	4610      	mov	r0, r2
 8005de8:	f7fe fce7 	bl	80047ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df0:	4b1b      	ldr	r3, [pc, #108]	; (8005e60 <xTaskIncrementTick+0x168>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d3b8      	bcc.n	8005d6c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dfe:	e7b5      	b.n	8005d6c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e00:	4b17      	ldr	r3, [pc, #92]	; (8005e60 <xTaskIncrementTick+0x168>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e06:	4915      	ldr	r1, [pc, #84]	; (8005e5c <xTaskIncrementTick+0x164>)
 8005e08:	4613      	mov	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	440b      	add	r3, r1
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d901      	bls.n	8005e1c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005e1c:	4b11      	ldr	r3, [pc, #68]	; (8005e64 <xTaskIncrementTick+0x16c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d007      	beq.n	8005e34 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005e24:	2301      	movs	r3, #1
 8005e26:	617b      	str	r3, [r7, #20]
 8005e28:	e004      	b.n	8005e34 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005e2a:	4b0f      	ldr	r3, [pc, #60]	; (8005e68 <xTaskIncrementTick+0x170>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	4a0d      	ldr	r2, [pc, #52]	; (8005e68 <xTaskIncrementTick+0x170>)
 8005e32:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005e34:	697b      	ldr	r3, [r7, #20]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3718      	adds	r7, #24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	20000e70 	.word	0x20000e70
 8005e44:	20000e4c 	.word	0x20000e4c
 8005e48:	20000e00 	.word	0x20000e00
 8005e4c:	20000e04 	.word	0x20000e04
 8005e50:	20000e60 	.word	0x20000e60
 8005e54:	20000e68 	.word	0x20000e68
 8005e58:	20000e50 	.word	0x20000e50
 8005e5c:	20000978 	.word	0x20000978
 8005e60:	20000974 	.word	0x20000974
 8005e64:	20000e5c 	.word	0x20000e5c
 8005e68:	20000e58 	.word	0x20000e58

08005e6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e72:	4b2a      	ldr	r3, [pc, #168]	; (8005f1c <vTaskSwitchContext+0xb0>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e7a:	4b29      	ldr	r3, [pc, #164]	; (8005f20 <vTaskSwitchContext+0xb4>)
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e80:	e046      	b.n	8005f10 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005e82:	4b27      	ldr	r3, [pc, #156]	; (8005f20 <vTaskSwitchContext+0xb4>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e88:	4b26      	ldr	r3, [pc, #152]	; (8005f24 <vTaskSwitchContext+0xb8>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	60fb      	str	r3, [r7, #12]
 8005e8e:	e010      	b.n	8005eb2 <vTaskSwitchContext+0x46>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10a      	bne.n	8005eac <vTaskSwitchContext+0x40>
	__asm volatile
 8005e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	607b      	str	r3, [r7, #4]
}
 8005ea8:	bf00      	nop
 8005eaa:	e7fe      	b.n	8005eaa <vTaskSwitchContext+0x3e>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	60fb      	str	r3, [r7, #12]
 8005eb2:	491d      	ldr	r1, [pc, #116]	; (8005f28 <vTaskSwitchContext+0xbc>)
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	440b      	add	r3, r1
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0e4      	beq.n	8005e90 <vTaskSwitchContext+0x24>
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	4413      	add	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4a15      	ldr	r2, [pc, #84]	; (8005f28 <vTaskSwitchContext+0xbc>)
 8005ed2:	4413      	add	r3, r2
 8005ed4:	60bb      	str	r3, [r7, #8]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	605a      	str	r2, [r3, #4]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	3308      	adds	r3, #8
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d104      	bne.n	8005ef6 <vTaskSwitchContext+0x8a>
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	605a      	str	r2, [r3, #4]
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	4a0b      	ldr	r2, [pc, #44]	; (8005f2c <vTaskSwitchContext+0xc0>)
 8005efe:	6013      	str	r3, [r2, #0]
 8005f00:	4a08      	ldr	r2, [pc, #32]	; (8005f24 <vTaskSwitchContext+0xb8>)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f06:	4b09      	ldr	r3, [pc, #36]	; (8005f2c <vTaskSwitchContext+0xc0>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	3354      	adds	r3, #84	; 0x54
 8005f0c:	4a08      	ldr	r2, [pc, #32]	; (8005f30 <vTaskSwitchContext+0xc4>)
 8005f0e:	6013      	str	r3, [r2, #0]
}
 8005f10:	bf00      	nop
 8005f12:	3714      	adds	r7, #20
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	20000e70 	.word	0x20000e70
 8005f20:	20000e5c 	.word	0x20000e5c
 8005f24:	20000e50 	.word	0x20000e50
 8005f28:	20000978 	.word	0x20000978
 8005f2c:	20000974 	.word	0x20000974
 8005f30:	20000010 	.word	0x20000010

08005f34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10a      	bne.n	8005f5a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f48:	f383 8811 	msr	BASEPRI, r3
 8005f4c:	f3bf 8f6f 	isb	sy
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	60fb      	str	r3, [r7, #12]
}
 8005f56:	bf00      	nop
 8005f58:	e7fe      	b.n	8005f58 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f5a:	4b07      	ldr	r3, [pc, #28]	; (8005f78 <vTaskPlaceOnEventList+0x44>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3318      	adds	r3, #24
 8005f60:	4619      	mov	r1, r3
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7fe fc4d 	bl	8004802 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f68:	2101      	movs	r1, #1
 8005f6a:	6838      	ldr	r0, [r7, #0]
 8005f6c:	f000 fb8e 	bl	800668c <prvAddCurrentTaskToDelayedList>
}
 8005f70:	bf00      	nop
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	20000974 	.word	0x20000974

08005f7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10a      	bne.n	8005fa4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	617b      	str	r3, [r7, #20]
}
 8005fa0:	bf00      	nop
 8005fa2:	e7fe      	b.n	8005fa2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005fa4:	4b0a      	ldr	r3, [pc, #40]	; (8005fd0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	3318      	adds	r3, #24
 8005faa:	4619      	mov	r1, r3
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f7fe fc04 	bl	80047ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d002      	beq.n	8005fbe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fbc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005fbe:	6879      	ldr	r1, [r7, #4]
 8005fc0:	68b8      	ldr	r0, [r7, #8]
 8005fc2:	f000 fb63 	bl	800668c <prvAddCurrentTaskToDelayedList>
	}
 8005fc6:	bf00      	nop
 8005fc8:	3718      	adds	r7, #24
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	20000974 	.word	0x20000974

08005fd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10a      	bne.n	8006000 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fee:	f383 8811 	msr	BASEPRI, r3
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	60fb      	str	r3, [r7, #12]
}
 8005ffc:	bf00      	nop
 8005ffe:	e7fe      	b.n	8005ffe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	3318      	adds	r3, #24
 8006004:	4618      	mov	r0, r3
 8006006:	f7fe fc35 	bl	8004874 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800600a:	4b1e      	ldr	r3, [pc, #120]	; (8006084 <xTaskRemoveFromEventList+0xb0>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d11d      	bne.n	800604e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	3304      	adds	r3, #4
 8006016:	4618      	mov	r0, r3
 8006018:	f7fe fc2c 	bl	8004874 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006020:	4b19      	ldr	r3, [pc, #100]	; (8006088 <xTaskRemoveFromEventList+0xb4>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	429a      	cmp	r2, r3
 8006026:	d903      	bls.n	8006030 <xTaskRemoveFromEventList+0x5c>
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602c:	4a16      	ldr	r2, [pc, #88]	; (8006088 <xTaskRemoveFromEventList+0xb4>)
 800602e:	6013      	str	r3, [r2, #0]
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006034:	4613      	mov	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4a13      	ldr	r2, [pc, #76]	; (800608c <xTaskRemoveFromEventList+0xb8>)
 800603e:	441a      	add	r2, r3
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	3304      	adds	r3, #4
 8006044:	4619      	mov	r1, r3
 8006046:	4610      	mov	r0, r2
 8006048:	f7fe fbb7 	bl	80047ba <vListInsertEnd>
 800604c:	e005      	b.n	800605a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	3318      	adds	r3, #24
 8006052:	4619      	mov	r1, r3
 8006054:	480e      	ldr	r0, [pc, #56]	; (8006090 <xTaskRemoveFromEventList+0xbc>)
 8006056:	f7fe fbb0 	bl	80047ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605e:	4b0d      	ldr	r3, [pc, #52]	; (8006094 <xTaskRemoveFromEventList+0xc0>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006064:	429a      	cmp	r2, r3
 8006066:	d905      	bls.n	8006074 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006068:	2301      	movs	r3, #1
 800606a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800606c:	4b0a      	ldr	r3, [pc, #40]	; (8006098 <xTaskRemoveFromEventList+0xc4>)
 800606e:	2201      	movs	r2, #1
 8006070:	601a      	str	r2, [r3, #0]
 8006072:	e001      	b.n	8006078 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006074:	2300      	movs	r3, #0
 8006076:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006078:	697b      	ldr	r3, [r7, #20]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	20000e70 	.word	0x20000e70
 8006088:	20000e50 	.word	0x20000e50
 800608c:	20000978 	.word	0x20000978
 8006090:	20000e08 	.word	0x20000e08
 8006094:	20000974 	.word	0x20000974
 8006098:	20000e5c 	.word	0x20000e5c

0800609c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80060a4:	4b06      	ldr	r3, [pc, #24]	; (80060c0 <vTaskInternalSetTimeOutState+0x24>)
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80060ac:	4b05      	ldr	r3, [pc, #20]	; (80060c4 <vTaskInternalSetTimeOutState+0x28>)
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	605a      	str	r2, [r3, #4]
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	20000e60 	.word	0x20000e60
 80060c4:	20000e4c 	.word	0x20000e4c

080060c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b088      	sub	sp, #32
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10a      	bne.n	80060ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80060d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060dc:	f383 8811 	msr	BASEPRI, r3
 80060e0:	f3bf 8f6f 	isb	sy
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	613b      	str	r3, [r7, #16]
}
 80060ea:	bf00      	nop
 80060ec:	e7fe      	b.n	80060ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10a      	bne.n	800610a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80060f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	60fb      	str	r3, [r7, #12]
}
 8006106:	bf00      	nop
 8006108:	e7fe      	b.n	8006108 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800610a:	f000 ff8b 	bl	8007024 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800610e:	4b1d      	ldr	r3, [pc, #116]	; (8006184 <xTaskCheckForTimeOut+0xbc>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006126:	d102      	bne.n	800612e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006128:	2300      	movs	r3, #0
 800612a:	61fb      	str	r3, [r7, #28]
 800612c:	e023      	b.n	8006176 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	4b15      	ldr	r3, [pc, #84]	; (8006188 <xTaskCheckForTimeOut+0xc0>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	429a      	cmp	r2, r3
 8006138:	d007      	beq.n	800614a <xTaskCheckForTimeOut+0x82>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	429a      	cmp	r2, r3
 8006142:	d302      	bcc.n	800614a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006144:	2301      	movs	r3, #1
 8006146:	61fb      	str	r3, [r7, #28]
 8006148:	e015      	b.n	8006176 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	429a      	cmp	r2, r3
 8006152:	d20b      	bcs.n	800616c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	1ad2      	subs	r2, r2, r3
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f7ff ff9b 	bl	800609c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006166:	2300      	movs	r3, #0
 8006168:	61fb      	str	r3, [r7, #28]
 800616a:	e004      	b.n	8006176 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	2200      	movs	r2, #0
 8006170:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006172:	2301      	movs	r3, #1
 8006174:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006176:	f000 ff85 	bl	8007084 <vPortExitCritical>

	return xReturn;
 800617a:	69fb      	ldr	r3, [r7, #28]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3720      	adds	r7, #32
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	20000e4c 	.word	0x20000e4c
 8006188:	20000e60 	.word	0x20000e60

0800618c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800618c:	b480      	push	{r7}
 800618e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006190:	4b03      	ldr	r3, [pc, #12]	; (80061a0 <vTaskMissedYield+0x14>)
 8006192:	2201      	movs	r2, #1
 8006194:	601a      	str	r2, [r3, #0]
}
 8006196:	bf00      	nop
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr
 80061a0:	20000e5c 	.word	0x20000e5c

080061a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80061ac:	f000 f852 	bl	8006254 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80061b0:	4b06      	ldr	r3, [pc, #24]	; (80061cc <prvIdleTask+0x28>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d9f9      	bls.n	80061ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80061b8:	4b05      	ldr	r3, [pc, #20]	; (80061d0 <prvIdleTask+0x2c>)
 80061ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80061c8:	e7f0      	b.n	80061ac <prvIdleTask+0x8>
 80061ca:	bf00      	nop
 80061cc:	20000978 	.word	0x20000978
 80061d0:	e000ed04 	.word	0xe000ed04

080061d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061da:	2300      	movs	r3, #0
 80061dc:	607b      	str	r3, [r7, #4]
 80061de:	e00c      	b.n	80061fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	4613      	mov	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4413      	add	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4a12      	ldr	r2, [pc, #72]	; (8006234 <prvInitialiseTaskLists+0x60>)
 80061ec:	4413      	add	r3, r2
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fe fab6 	bl	8004760 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	3301      	adds	r3, #1
 80061f8:	607b      	str	r3, [r7, #4]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b37      	cmp	r3, #55	; 0x37
 80061fe:	d9ef      	bls.n	80061e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006200:	480d      	ldr	r0, [pc, #52]	; (8006238 <prvInitialiseTaskLists+0x64>)
 8006202:	f7fe faad 	bl	8004760 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006206:	480d      	ldr	r0, [pc, #52]	; (800623c <prvInitialiseTaskLists+0x68>)
 8006208:	f7fe faaa 	bl	8004760 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800620c:	480c      	ldr	r0, [pc, #48]	; (8006240 <prvInitialiseTaskLists+0x6c>)
 800620e:	f7fe faa7 	bl	8004760 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006212:	480c      	ldr	r0, [pc, #48]	; (8006244 <prvInitialiseTaskLists+0x70>)
 8006214:	f7fe faa4 	bl	8004760 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006218:	480b      	ldr	r0, [pc, #44]	; (8006248 <prvInitialiseTaskLists+0x74>)
 800621a:	f7fe faa1 	bl	8004760 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800621e:	4b0b      	ldr	r3, [pc, #44]	; (800624c <prvInitialiseTaskLists+0x78>)
 8006220:	4a05      	ldr	r2, [pc, #20]	; (8006238 <prvInitialiseTaskLists+0x64>)
 8006222:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006224:	4b0a      	ldr	r3, [pc, #40]	; (8006250 <prvInitialiseTaskLists+0x7c>)
 8006226:	4a05      	ldr	r2, [pc, #20]	; (800623c <prvInitialiseTaskLists+0x68>)
 8006228:	601a      	str	r2, [r3, #0]
}
 800622a:	bf00      	nop
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	20000978 	.word	0x20000978
 8006238:	20000dd8 	.word	0x20000dd8
 800623c:	20000dec 	.word	0x20000dec
 8006240:	20000e08 	.word	0x20000e08
 8006244:	20000e1c 	.word	0x20000e1c
 8006248:	20000e34 	.word	0x20000e34
 800624c:	20000e00 	.word	0x20000e00
 8006250:	20000e04 	.word	0x20000e04

08006254 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800625a:	e019      	b.n	8006290 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800625c:	f000 fee2 	bl	8007024 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006260:	4b10      	ldr	r3, [pc, #64]	; (80062a4 <prvCheckTasksWaitingTermination+0x50>)
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	3304      	adds	r3, #4
 800626c:	4618      	mov	r0, r3
 800626e:	f7fe fb01 	bl	8004874 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006272:	4b0d      	ldr	r3, [pc, #52]	; (80062a8 <prvCheckTasksWaitingTermination+0x54>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	3b01      	subs	r3, #1
 8006278:	4a0b      	ldr	r2, [pc, #44]	; (80062a8 <prvCheckTasksWaitingTermination+0x54>)
 800627a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800627c:	4b0b      	ldr	r3, [pc, #44]	; (80062ac <prvCheckTasksWaitingTermination+0x58>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	3b01      	subs	r3, #1
 8006282:	4a0a      	ldr	r2, [pc, #40]	; (80062ac <prvCheckTasksWaitingTermination+0x58>)
 8006284:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006286:	f000 fefd 	bl	8007084 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f810 	bl	80062b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006290:	4b06      	ldr	r3, [pc, #24]	; (80062ac <prvCheckTasksWaitingTermination+0x58>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1e1      	bne.n	800625c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006298:	bf00      	nop
 800629a:	bf00      	nop
 800629c:	3708      	adds	r7, #8
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	20000e1c 	.word	0x20000e1c
 80062a8:	20000e48 	.word	0x20000e48
 80062ac:	20000e30 	.word	0x20000e30

080062b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	3354      	adds	r3, #84	; 0x54
 80062bc:	4618      	mov	r0, r3
 80062be:	f001 fc61 	bl	8007b84 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d108      	bne.n	80062de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d0:	4618      	mov	r0, r3
 80062d2:	f001 f895 	bl	8007400 <vPortFree>
				vPortFree( pxTCB );
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f001 f892 	bl	8007400 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80062dc:	e018      	b.n	8006310 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d103      	bne.n	80062f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f001 f889 	bl	8007400 <vPortFree>
	}
 80062ee:	e00f      	b.n	8006310 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d00a      	beq.n	8006310 <prvDeleteTCB+0x60>
	__asm volatile
 80062fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fe:	f383 8811 	msr	BASEPRI, r3
 8006302:	f3bf 8f6f 	isb	sy
 8006306:	f3bf 8f4f 	dsb	sy
 800630a:	60fb      	str	r3, [r7, #12]
}
 800630c:	bf00      	nop
 800630e:	e7fe      	b.n	800630e <prvDeleteTCB+0x5e>
	}
 8006310:	bf00      	nop
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800631e:	4b0c      	ldr	r3, [pc, #48]	; (8006350 <prvResetNextTaskUnblockTime+0x38>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d104      	bne.n	8006332 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006328:	4b0a      	ldr	r3, [pc, #40]	; (8006354 <prvResetNextTaskUnblockTime+0x3c>)
 800632a:	f04f 32ff 	mov.w	r2, #4294967295
 800632e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006330:	e008      	b.n	8006344 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006332:	4b07      	ldr	r3, [pc, #28]	; (8006350 <prvResetNextTaskUnblockTime+0x38>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	4a04      	ldr	r2, [pc, #16]	; (8006354 <prvResetNextTaskUnblockTime+0x3c>)
 8006342:	6013      	str	r3, [r2, #0]
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	20000e00 	.word	0x20000e00
 8006354:	20000e68 	.word	0x20000e68

08006358 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800635e:	4b05      	ldr	r3, [pc, #20]	; (8006374 <xTaskGetCurrentTaskHandle+0x1c>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006364:	687b      	ldr	r3, [r7, #4]
	}
 8006366:	4618      	mov	r0, r3
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	20000974 	.word	0x20000974

08006378 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800637e:	4b0b      	ldr	r3, [pc, #44]	; (80063ac <xTaskGetSchedulerState+0x34>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d102      	bne.n	800638c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006386:	2301      	movs	r3, #1
 8006388:	607b      	str	r3, [r7, #4]
 800638a:	e008      	b.n	800639e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800638c:	4b08      	ldr	r3, [pc, #32]	; (80063b0 <xTaskGetSchedulerState+0x38>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d102      	bne.n	800639a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006394:	2302      	movs	r3, #2
 8006396:	607b      	str	r3, [r7, #4]
 8006398:	e001      	b.n	800639e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800639a:	2300      	movs	r3, #0
 800639c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800639e:	687b      	ldr	r3, [r7, #4]
	}
 80063a0:	4618      	mov	r0, r3
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	20000e54 	.word	0x20000e54
 80063b0:	20000e70 	.word	0x20000e70

080063b4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80063c0:	2300      	movs	r3, #0
 80063c2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d051      	beq.n	800646e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ce:	4b2a      	ldr	r3, [pc, #168]	; (8006478 <xTaskPriorityInherit+0xc4>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d241      	bcs.n	800645c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	db06      	blt.n	80063ee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063e0:	4b25      	ldr	r3, [pc, #148]	; (8006478 <xTaskPriorityInherit+0xc4>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	6959      	ldr	r1, [r3, #20]
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f6:	4613      	mov	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	4a1f      	ldr	r2, [pc, #124]	; (800647c <xTaskPriorityInherit+0xc8>)
 8006400:	4413      	add	r3, r2
 8006402:	4299      	cmp	r1, r3
 8006404:	d122      	bne.n	800644c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	3304      	adds	r3, #4
 800640a:	4618      	mov	r0, r3
 800640c:	f7fe fa32 	bl	8004874 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006410:	4b19      	ldr	r3, [pc, #100]	; (8006478 <xTaskPriorityInherit+0xc4>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800641e:	4b18      	ldr	r3, [pc, #96]	; (8006480 <xTaskPriorityInherit+0xcc>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	429a      	cmp	r2, r3
 8006424:	d903      	bls.n	800642e <xTaskPriorityInherit+0x7a>
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642a:	4a15      	ldr	r2, [pc, #84]	; (8006480 <xTaskPriorityInherit+0xcc>)
 800642c:	6013      	str	r3, [r2, #0]
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006432:	4613      	mov	r3, r2
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	4413      	add	r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4a10      	ldr	r2, [pc, #64]	; (800647c <xTaskPriorityInherit+0xc8>)
 800643c:	441a      	add	r2, r3
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	3304      	adds	r3, #4
 8006442:	4619      	mov	r1, r3
 8006444:	4610      	mov	r0, r2
 8006446:	f7fe f9b8 	bl	80047ba <vListInsertEnd>
 800644a:	e004      	b.n	8006456 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800644c:	4b0a      	ldr	r3, [pc, #40]	; (8006478 <xTaskPriorityInherit+0xc4>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006456:	2301      	movs	r3, #1
 8006458:	60fb      	str	r3, [r7, #12]
 800645a:	e008      	b.n	800646e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006460:	4b05      	ldr	r3, [pc, #20]	; (8006478 <xTaskPriorityInherit+0xc4>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006466:	429a      	cmp	r2, r3
 8006468:	d201      	bcs.n	800646e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800646a:	2301      	movs	r3, #1
 800646c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800646e:	68fb      	ldr	r3, [r7, #12]
	}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	20000974 	.word	0x20000974
 800647c:	20000978 	.word	0x20000978
 8006480:	20000e50 	.word	0x20000e50

08006484 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006490:	2300      	movs	r3, #0
 8006492:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d056      	beq.n	8006548 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800649a:	4b2e      	ldr	r3, [pc, #184]	; (8006554 <xTaskPriorityDisinherit+0xd0>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	693a      	ldr	r2, [r7, #16]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d00a      	beq.n	80064ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80064a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a8:	f383 8811 	msr	BASEPRI, r3
 80064ac:	f3bf 8f6f 	isb	sy
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	60fb      	str	r3, [r7, #12]
}
 80064b6:	bf00      	nop
 80064b8:	e7fe      	b.n	80064b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d10a      	bne.n	80064d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80064c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c6:	f383 8811 	msr	BASEPRI, r3
 80064ca:	f3bf 8f6f 	isb	sy
 80064ce:	f3bf 8f4f 	dsb	sy
 80064d2:	60bb      	str	r3, [r7, #8]
}
 80064d4:	bf00      	nop
 80064d6:	e7fe      	b.n	80064d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064dc:	1e5a      	subs	r2, r3, #1
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d02c      	beq.n	8006548 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d128      	bne.n	8006548 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	3304      	adds	r3, #4
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7fe f9ba 	bl	8004874 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006518:	4b0f      	ldr	r3, [pc, #60]	; (8006558 <xTaskPriorityDisinherit+0xd4>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	429a      	cmp	r2, r3
 800651e:	d903      	bls.n	8006528 <xTaskPriorityDisinherit+0xa4>
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006524:	4a0c      	ldr	r2, [pc, #48]	; (8006558 <xTaskPriorityDisinherit+0xd4>)
 8006526:	6013      	str	r3, [r2, #0]
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800652c:	4613      	mov	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4a09      	ldr	r2, [pc, #36]	; (800655c <xTaskPriorityDisinherit+0xd8>)
 8006536:	441a      	add	r2, r3
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	3304      	adds	r3, #4
 800653c:	4619      	mov	r1, r3
 800653e:	4610      	mov	r0, r2
 8006540:	f7fe f93b 	bl	80047ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006544:	2301      	movs	r3, #1
 8006546:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006548:	697b      	ldr	r3, [r7, #20]
	}
 800654a:	4618      	mov	r0, r3
 800654c:	3718      	adds	r7, #24
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	20000974 	.word	0x20000974
 8006558:	20000e50 	.word	0x20000e50
 800655c:	20000978 	.word	0x20000978

08006560 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006560:	b580      	push	{r7, lr}
 8006562:	b088      	sub	sp, #32
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800656e:	2301      	movs	r3, #1
 8006570:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d06a      	beq.n	800664e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10a      	bne.n	8006596 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	60fb      	str	r3, [r7, #12]
}
 8006592:	bf00      	nop
 8006594:	e7fe      	b.n	8006594 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800659a:	683a      	ldr	r2, [r7, #0]
 800659c:	429a      	cmp	r2, r3
 800659e:	d902      	bls.n	80065a6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	61fb      	str	r3, [r7, #28]
 80065a4:	e002      	b.n	80065ac <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065aa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b0:	69fa      	ldr	r2, [r7, #28]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d04b      	beq.n	800664e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d146      	bne.n	800664e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80065c0:	4b25      	ldr	r3, [pc, #148]	; (8006658 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	69ba      	ldr	r2, [r7, #24]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d10a      	bne.n	80065e0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80065ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ce:	f383 8811 	msr	BASEPRI, r3
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	60bb      	str	r3, [r7, #8]
}
 80065dc:	bf00      	nop
 80065de:	e7fe      	b.n	80065de <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	69fa      	ldr	r2, [r7, #28]
 80065ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	db04      	blt.n	80065fe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	6959      	ldr	r1, [r3, #20]
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	4613      	mov	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4413      	add	r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4a13      	ldr	r2, [pc, #76]	; (800665c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800660e:	4413      	add	r3, r2
 8006610:	4299      	cmp	r1, r3
 8006612:	d11c      	bne.n	800664e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	3304      	adds	r3, #4
 8006618:	4618      	mov	r0, r3
 800661a:	f7fe f92b 	bl	8004874 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006622:	4b0f      	ldr	r3, [pc, #60]	; (8006660 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	429a      	cmp	r2, r3
 8006628:	d903      	bls.n	8006632 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662e:	4a0c      	ldr	r2, [pc, #48]	; (8006660 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006630:	6013      	str	r3, [r2, #0]
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006636:	4613      	mov	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	4413      	add	r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4a07      	ldr	r2, [pc, #28]	; (800665c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006640:	441a      	add	r2, r3
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	3304      	adds	r3, #4
 8006646:	4619      	mov	r1, r3
 8006648:	4610      	mov	r0, r2
 800664a:	f7fe f8b6 	bl	80047ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800664e:	bf00      	nop
 8006650:	3720      	adds	r7, #32
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	20000974 	.word	0x20000974
 800665c:	20000978 	.word	0x20000978
 8006660:	20000e50 	.word	0x20000e50

08006664 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006664:	b480      	push	{r7}
 8006666:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006668:	4b07      	ldr	r3, [pc, #28]	; (8006688 <pvTaskIncrementMutexHeldCount+0x24>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d004      	beq.n	800667a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006670:	4b05      	ldr	r3, [pc, #20]	; (8006688 <pvTaskIncrementMutexHeldCount+0x24>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006676:	3201      	adds	r2, #1
 8006678:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800667a:	4b03      	ldr	r3, [pc, #12]	; (8006688 <pvTaskIncrementMutexHeldCount+0x24>)
 800667c:	681b      	ldr	r3, [r3, #0]
	}
 800667e:	4618      	mov	r0, r3
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr
 8006688:	20000974 	.word	0x20000974

0800668c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006696:	4b21      	ldr	r3, [pc, #132]	; (800671c <prvAddCurrentTaskToDelayedList+0x90>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800669c:	4b20      	ldr	r3, [pc, #128]	; (8006720 <prvAddCurrentTaskToDelayedList+0x94>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	3304      	adds	r3, #4
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fe f8e6 	bl	8004874 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ae:	d10a      	bne.n	80066c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d007      	beq.n	80066c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066b6:	4b1a      	ldr	r3, [pc, #104]	; (8006720 <prvAddCurrentTaskToDelayedList+0x94>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	3304      	adds	r3, #4
 80066bc:	4619      	mov	r1, r3
 80066be:	4819      	ldr	r0, [pc, #100]	; (8006724 <prvAddCurrentTaskToDelayedList+0x98>)
 80066c0:	f7fe f87b 	bl	80047ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80066c4:	e026      	b.n	8006714 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4413      	add	r3, r2
 80066cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80066ce:	4b14      	ldr	r3, [pc, #80]	; (8006720 <prvAddCurrentTaskToDelayedList+0x94>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d209      	bcs.n	80066f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066de:	4b12      	ldr	r3, [pc, #72]	; (8006728 <prvAddCurrentTaskToDelayedList+0x9c>)
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	4b0f      	ldr	r3, [pc, #60]	; (8006720 <prvAddCurrentTaskToDelayedList+0x94>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	3304      	adds	r3, #4
 80066e8:	4619      	mov	r1, r3
 80066ea:	4610      	mov	r0, r2
 80066ec:	f7fe f889 	bl	8004802 <vListInsert>
}
 80066f0:	e010      	b.n	8006714 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066f2:	4b0e      	ldr	r3, [pc, #56]	; (800672c <prvAddCurrentTaskToDelayedList+0xa0>)
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	4b0a      	ldr	r3, [pc, #40]	; (8006720 <prvAddCurrentTaskToDelayedList+0x94>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	3304      	adds	r3, #4
 80066fc:	4619      	mov	r1, r3
 80066fe:	4610      	mov	r0, r2
 8006700:	f7fe f87f 	bl	8004802 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006704:	4b0a      	ldr	r3, [pc, #40]	; (8006730 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	429a      	cmp	r2, r3
 800670c:	d202      	bcs.n	8006714 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800670e:	4a08      	ldr	r2, [pc, #32]	; (8006730 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	6013      	str	r3, [r2, #0]
}
 8006714:	bf00      	nop
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	20000e4c 	.word	0x20000e4c
 8006720:	20000974 	.word	0x20000974
 8006724:	20000e34 	.word	0x20000e34
 8006728:	20000e04 	.word	0x20000e04
 800672c:	20000e00 	.word	0x20000e00
 8006730:	20000e68 	.word	0x20000e68

08006734 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b08a      	sub	sp, #40	; 0x28
 8006738:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800673a:	2300      	movs	r3, #0
 800673c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800673e:	f000 fb07 	bl	8006d50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006742:	4b1c      	ldr	r3, [pc, #112]	; (80067b4 <xTimerCreateTimerTask+0x80>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d021      	beq.n	800678e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800674a:	2300      	movs	r3, #0
 800674c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800674e:	2300      	movs	r3, #0
 8006750:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006752:	1d3a      	adds	r2, r7, #4
 8006754:	f107 0108 	add.w	r1, r7, #8
 8006758:	f107 030c 	add.w	r3, r7, #12
 800675c:	4618      	mov	r0, r3
 800675e:	f7fd ffe5 	bl	800472c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006762:	6879      	ldr	r1, [r7, #4]
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	9202      	str	r2, [sp, #8]
 800676a:	9301      	str	r3, [sp, #4]
 800676c:	2302      	movs	r3, #2
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	2300      	movs	r3, #0
 8006772:	460a      	mov	r2, r1
 8006774:	4910      	ldr	r1, [pc, #64]	; (80067b8 <xTimerCreateTimerTask+0x84>)
 8006776:	4811      	ldr	r0, [pc, #68]	; (80067bc <xTimerCreateTimerTask+0x88>)
 8006778:	f7fe ffa6 	bl	80056c8 <xTaskCreateStatic>
 800677c:	4603      	mov	r3, r0
 800677e:	4a10      	ldr	r2, [pc, #64]	; (80067c0 <xTimerCreateTimerTask+0x8c>)
 8006780:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006782:	4b0f      	ldr	r3, [pc, #60]	; (80067c0 <xTimerCreateTimerTask+0x8c>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d001      	beq.n	800678e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800678a:	2301      	movs	r3, #1
 800678c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10a      	bne.n	80067aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006798:	f383 8811 	msr	BASEPRI, r3
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	f3bf 8f4f 	dsb	sy
 80067a4:	613b      	str	r3, [r7, #16]
}
 80067a6:	bf00      	nop
 80067a8:	e7fe      	b.n	80067a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80067aa:	697b      	ldr	r3, [r7, #20]
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3718      	adds	r7, #24
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	20000ea4 	.word	0x20000ea4
 80067b8:	080088a4 	.word	0x080088a4
 80067bc:	080068f9 	.word	0x080068f9
 80067c0:	20000ea8 	.word	0x20000ea8

080067c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b08a      	sub	sp, #40	; 0x28
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
 80067d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80067d2:	2300      	movs	r3, #0
 80067d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10a      	bne.n	80067f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80067dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e0:	f383 8811 	msr	BASEPRI, r3
 80067e4:	f3bf 8f6f 	isb	sy
 80067e8:	f3bf 8f4f 	dsb	sy
 80067ec:	623b      	str	r3, [r7, #32]
}
 80067ee:	bf00      	nop
 80067f0:	e7fe      	b.n	80067f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80067f2:	4b1a      	ldr	r3, [pc, #104]	; (800685c <xTimerGenericCommand+0x98>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d02a      	beq.n	8006850 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	2b05      	cmp	r3, #5
 800680a:	dc18      	bgt.n	800683e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800680c:	f7ff fdb4 	bl	8006378 <xTaskGetSchedulerState>
 8006810:	4603      	mov	r3, r0
 8006812:	2b02      	cmp	r3, #2
 8006814:	d109      	bne.n	800682a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006816:	4b11      	ldr	r3, [pc, #68]	; (800685c <xTimerGenericCommand+0x98>)
 8006818:	6818      	ldr	r0, [r3, #0]
 800681a:	f107 0110 	add.w	r1, r7, #16
 800681e:	2300      	movs	r3, #0
 8006820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006822:	f7fe fa45 	bl	8004cb0 <xQueueGenericSend>
 8006826:	6278      	str	r0, [r7, #36]	; 0x24
 8006828:	e012      	b.n	8006850 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800682a:	4b0c      	ldr	r3, [pc, #48]	; (800685c <xTimerGenericCommand+0x98>)
 800682c:	6818      	ldr	r0, [r3, #0]
 800682e:	f107 0110 	add.w	r1, r7, #16
 8006832:	2300      	movs	r3, #0
 8006834:	2200      	movs	r2, #0
 8006836:	f7fe fa3b 	bl	8004cb0 <xQueueGenericSend>
 800683a:	6278      	str	r0, [r7, #36]	; 0x24
 800683c:	e008      	b.n	8006850 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800683e:	4b07      	ldr	r3, [pc, #28]	; (800685c <xTimerGenericCommand+0x98>)
 8006840:	6818      	ldr	r0, [r3, #0]
 8006842:	f107 0110 	add.w	r1, r7, #16
 8006846:	2300      	movs	r3, #0
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	f7fe fb2f 	bl	8004eac <xQueueGenericSendFromISR>
 800684e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006852:	4618      	mov	r0, r3
 8006854:	3728      	adds	r7, #40	; 0x28
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	20000ea4 	.word	0x20000ea4

08006860 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b088      	sub	sp, #32
 8006864:	af02      	add	r7, sp, #8
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800686a:	4b22      	ldr	r3, [pc, #136]	; (80068f4 <prvProcessExpiredTimer+0x94>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	3304      	adds	r3, #4
 8006878:	4618      	mov	r0, r3
 800687a:	f7fd fffb 	bl	8004874 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006884:	f003 0304 	and.w	r3, r3, #4
 8006888:	2b00      	cmp	r3, #0
 800688a:	d022      	beq.n	80068d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	699a      	ldr	r2, [r3, #24]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	18d1      	adds	r1, r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	6978      	ldr	r0, [r7, #20]
 800689a:	f000 f8d1 	bl	8006a40 <prvInsertTimerInActiveList>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d01f      	beq.n	80068e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80068a4:	2300      	movs	r3, #0
 80068a6:	9300      	str	r3, [sp, #0]
 80068a8:	2300      	movs	r3, #0
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	2100      	movs	r1, #0
 80068ae:	6978      	ldr	r0, [r7, #20]
 80068b0:	f7ff ff88 	bl	80067c4 <xTimerGenericCommand>
 80068b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d113      	bne.n	80068e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80068bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c0:	f383 8811 	msr	BASEPRI, r3
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	60fb      	str	r3, [r7, #12]
}
 80068ce:	bf00      	nop
 80068d0:	e7fe      	b.n	80068d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068d8:	f023 0301 	bic.w	r3, r3, #1
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	6a1b      	ldr	r3, [r3, #32]
 80068e8:	6978      	ldr	r0, [r7, #20]
 80068ea:	4798      	blx	r3
}
 80068ec:	bf00      	nop
 80068ee:	3718      	adds	r7, #24
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	20000e9c 	.word	0x20000e9c

080068f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006900:	f107 0308 	add.w	r3, r7, #8
 8006904:	4618      	mov	r0, r3
 8006906:	f000 f857 	bl	80069b8 <prvGetNextExpireTime>
 800690a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	4619      	mov	r1, r3
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f000 f803 	bl	800691c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006916:	f000 f8d5 	bl	8006ac4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800691a:	e7f1      	b.n	8006900 <prvTimerTask+0x8>

0800691c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006926:	f7ff f92b 	bl	8005b80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800692a:	f107 0308 	add.w	r3, r7, #8
 800692e:	4618      	mov	r0, r3
 8006930:	f000 f866 	bl	8006a00 <prvSampleTimeNow>
 8006934:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d130      	bne.n	800699e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10a      	bne.n	8006958 <prvProcessTimerOrBlockTask+0x3c>
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	429a      	cmp	r2, r3
 8006948:	d806      	bhi.n	8006958 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800694a:	f7ff f927 	bl	8005b9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800694e:	68f9      	ldr	r1, [r7, #12]
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f7ff ff85 	bl	8006860 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006956:	e024      	b.n	80069a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d008      	beq.n	8006970 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800695e:	4b13      	ldr	r3, [pc, #76]	; (80069ac <prvProcessTimerOrBlockTask+0x90>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d101      	bne.n	800696c <prvProcessTimerOrBlockTask+0x50>
 8006968:	2301      	movs	r3, #1
 800696a:	e000      	b.n	800696e <prvProcessTimerOrBlockTask+0x52>
 800696c:	2300      	movs	r3, #0
 800696e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006970:	4b0f      	ldr	r3, [pc, #60]	; (80069b0 <prvProcessTimerOrBlockTask+0x94>)
 8006972:	6818      	ldr	r0, [r3, #0]
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	683a      	ldr	r2, [r7, #0]
 800697c:	4619      	mov	r1, r3
 800697e:	f7fe fe6f 	bl	8005660 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006982:	f7ff f90b 	bl	8005b9c <xTaskResumeAll>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10a      	bne.n	80069a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800698c:	4b09      	ldr	r3, [pc, #36]	; (80069b4 <prvProcessTimerOrBlockTask+0x98>)
 800698e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006992:	601a      	str	r2, [r3, #0]
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	f3bf 8f6f 	isb	sy
}
 800699c:	e001      	b.n	80069a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800699e:	f7ff f8fd 	bl	8005b9c <xTaskResumeAll>
}
 80069a2:	bf00      	nop
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	20000ea0 	.word	0x20000ea0
 80069b0:	20000ea4 	.word	0x20000ea4
 80069b4:	e000ed04 	.word	0xe000ed04

080069b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80069c0:	4b0e      	ldr	r3, [pc, #56]	; (80069fc <prvGetNextExpireTime+0x44>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d101      	bne.n	80069ce <prvGetNextExpireTime+0x16>
 80069ca:	2201      	movs	r2, #1
 80069cc:	e000      	b.n	80069d0 <prvGetNextExpireTime+0x18>
 80069ce:	2200      	movs	r2, #0
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d105      	bne.n	80069e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069dc:	4b07      	ldr	r3, [pc, #28]	; (80069fc <prvGetNextExpireTime+0x44>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	60fb      	str	r3, [r7, #12]
 80069e6:	e001      	b.n	80069ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80069e8:	2300      	movs	r3, #0
 80069ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80069ec:	68fb      	ldr	r3, [r7, #12]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	20000e9c 	.word	0x20000e9c

08006a00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006a08:	f7ff f966 	bl	8005cd8 <xTaskGetTickCount>
 8006a0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006a0e:	4b0b      	ldr	r3, [pc, #44]	; (8006a3c <prvSampleTimeNow+0x3c>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d205      	bcs.n	8006a24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006a18:	f000 f936 	bl	8006c88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	601a      	str	r2, [r3, #0]
 8006a22:	e002      	b.n	8006a2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006a2a:	4a04      	ldr	r2, [pc, #16]	; (8006a3c <prvSampleTimeNow+0x3c>)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006a30:	68fb      	ldr	r3, [r7, #12]
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	20000eac 	.word	0x20000eac

08006a40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
 8006a4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	68ba      	ldr	r2, [r7, #8]
 8006a56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d812      	bhi.n	8006a8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	1ad2      	subs	r2, r2, r3
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d302      	bcc.n	8006a7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006a74:	2301      	movs	r3, #1
 8006a76:	617b      	str	r3, [r7, #20]
 8006a78:	e01b      	b.n	8006ab2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006a7a:	4b10      	ldr	r3, [pc, #64]	; (8006abc <prvInsertTimerInActiveList+0x7c>)
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	3304      	adds	r3, #4
 8006a82:	4619      	mov	r1, r3
 8006a84:	4610      	mov	r0, r2
 8006a86:	f7fd febc 	bl	8004802 <vListInsert>
 8006a8a:	e012      	b.n	8006ab2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d206      	bcs.n	8006aa2 <prvInsertTimerInActiveList+0x62>
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d302      	bcc.n	8006aa2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	617b      	str	r3, [r7, #20]
 8006aa0:	e007      	b.n	8006ab2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006aa2:	4b07      	ldr	r3, [pc, #28]	; (8006ac0 <prvInsertTimerInActiveList+0x80>)
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	3304      	adds	r3, #4
 8006aaa:	4619      	mov	r1, r3
 8006aac:	4610      	mov	r0, r2
 8006aae:	f7fd fea8 	bl	8004802 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006ab2:	697b      	ldr	r3, [r7, #20]
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3718      	adds	r7, #24
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	20000ea0 	.word	0x20000ea0
 8006ac0:	20000e9c 	.word	0x20000e9c

08006ac4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b08e      	sub	sp, #56	; 0x38
 8006ac8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006aca:	e0ca      	b.n	8006c62 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	da18      	bge.n	8006b04 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006ad2:	1d3b      	adds	r3, r7, #4
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10a      	bne.n	8006af4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	61fb      	str	r3, [r7, #28]
}
 8006af0:	bf00      	nop
 8006af2:	e7fe      	b.n	8006af2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006afa:	6850      	ldr	r0, [r2, #4]
 8006afc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006afe:	6892      	ldr	r2, [r2, #8]
 8006b00:	4611      	mov	r1, r2
 8006b02:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f2c0 80aa 	blt.w	8006c60 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b12:	695b      	ldr	r3, [r3, #20]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d004      	beq.n	8006b22 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7fd fea9 	bl	8004874 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b22:	463b      	mov	r3, r7
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7ff ff6b 	bl	8006a00 <prvSampleTimeNow>
 8006b2a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b09      	cmp	r3, #9
 8006b30:	f200 8097 	bhi.w	8006c62 <prvProcessReceivedCommands+0x19e>
 8006b34:	a201      	add	r2, pc, #4	; (adr r2, 8006b3c <prvProcessReceivedCommands+0x78>)
 8006b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3a:	bf00      	nop
 8006b3c:	08006b65 	.word	0x08006b65
 8006b40:	08006b65 	.word	0x08006b65
 8006b44:	08006b65 	.word	0x08006b65
 8006b48:	08006bd9 	.word	0x08006bd9
 8006b4c:	08006bed 	.word	0x08006bed
 8006b50:	08006c37 	.word	0x08006c37
 8006b54:	08006b65 	.word	0x08006b65
 8006b58:	08006b65 	.word	0x08006b65
 8006b5c:	08006bd9 	.word	0x08006bd9
 8006b60:	08006bed 	.word	0x08006bed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b6a:	f043 0301 	orr.w	r3, r3, #1
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	18d1      	adds	r1, r2, r3
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b84:	f7ff ff5c 	bl	8006a40 <prvInsertTimerInActiveList>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d069      	beq.n	8006c62 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b94:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b9c:	f003 0304 	and.w	r3, r3, #4
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d05e      	beq.n	8006c62 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	441a      	add	r2, r3
 8006bac:	2300      	movs	r3, #0
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	2100      	movs	r1, #0
 8006bb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bb6:	f7ff fe05 	bl	80067c4 <xTimerGenericCommand>
 8006bba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006bbc:	6a3b      	ldr	r3, [r7, #32]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d14f      	bne.n	8006c62 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	61bb      	str	r3, [r7, #24]
}
 8006bd4:	bf00      	nop
 8006bd6:	e7fe      	b.n	8006bd6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bde:	f023 0301 	bic.w	r3, r3, #1
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006bea:	e03a      	b.n	8006c62 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bf2:	f043 0301 	orr.w	r3, r3, #1
 8006bf6:	b2da      	uxtb	r2, r3
 8006bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c02:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d10a      	bne.n	8006c22 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c10:	f383 8811 	msr	BASEPRI, r3
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	617b      	str	r3, [r7, #20]
}
 8006c1e:	bf00      	nop
 8006c20:	e7fe      	b.n	8006c20 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c24:	699a      	ldr	r2, [r3, #24]
 8006c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c28:	18d1      	adds	r1, r2, r3
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c30:	f7ff ff06 	bl	8006a40 <prvInsertTimerInActiveList>
					break;
 8006c34:	e015      	b.n	8006c62 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c3c:	f003 0302 	and.w	r3, r3, #2
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d103      	bne.n	8006c4c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c46:	f000 fbdb 	bl	8007400 <vPortFree>
 8006c4a:	e00a      	b.n	8006c62 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c52:	f023 0301 	bic.w	r3, r3, #1
 8006c56:	b2da      	uxtb	r2, r3
 8006c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006c5e:	e000      	b.n	8006c62 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006c60:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c62:	4b08      	ldr	r3, [pc, #32]	; (8006c84 <prvProcessReceivedCommands+0x1c0>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	1d39      	adds	r1, r7, #4
 8006c68:	2200      	movs	r2, #0
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7fe f9ba 	bl	8004fe4 <xQueueReceive>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f47f af2a 	bne.w	8006acc <prvProcessReceivedCommands+0x8>
	}
}
 8006c78:	bf00      	nop
 8006c7a:	bf00      	nop
 8006c7c:	3730      	adds	r7, #48	; 0x30
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	20000ea4 	.word	0x20000ea4

08006c88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b088      	sub	sp, #32
 8006c8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c8e:	e048      	b.n	8006d22 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c90:	4b2d      	ldr	r3, [pc, #180]	; (8006d48 <prvSwitchTimerLists+0xc0>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c9a:	4b2b      	ldr	r3, [pc, #172]	; (8006d48 <prvSwitchTimerLists+0xc0>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	3304      	adds	r3, #4
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7fd fde3 	bl	8004874 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cbc:	f003 0304 	and.w	r3, r3, #4
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d02e      	beq.n	8006d22 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	4413      	add	r3, r2
 8006ccc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d90e      	bls.n	8006cf4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ce2:	4b19      	ldr	r3, [pc, #100]	; (8006d48 <prvSwitchTimerLists+0xc0>)
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	3304      	adds	r3, #4
 8006cea:	4619      	mov	r1, r3
 8006cec:	4610      	mov	r0, r2
 8006cee:	f7fd fd88 	bl	8004802 <vListInsert>
 8006cf2:	e016      	b.n	8006d22 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	9300      	str	r3, [sp, #0]
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f7ff fd60 	bl	80067c4 <xTimerGenericCommand>
 8006d04:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10a      	bne.n	8006d22 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d10:	f383 8811 	msr	BASEPRI, r3
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	603b      	str	r3, [r7, #0]
}
 8006d1e:	bf00      	nop
 8006d20:	e7fe      	b.n	8006d20 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d22:	4b09      	ldr	r3, [pc, #36]	; (8006d48 <prvSwitchTimerLists+0xc0>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1b1      	bne.n	8006c90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006d2c:	4b06      	ldr	r3, [pc, #24]	; (8006d48 <prvSwitchTimerLists+0xc0>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006d32:	4b06      	ldr	r3, [pc, #24]	; (8006d4c <prvSwitchTimerLists+0xc4>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a04      	ldr	r2, [pc, #16]	; (8006d48 <prvSwitchTimerLists+0xc0>)
 8006d38:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006d3a:	4a04      	ldr	r2, [pc, #16]	; (8006d4c <prvSwitchTimerLists+0xc4>)
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	6013      	str	r3, [r2, #0]
}
 8006d40:	bf00      	nop
 8006d42:	3718      	adds	r7, #24
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	20000e9c 	.word	0x20000e9c
 8006d4c:	20000ea0 	.word	0x20000ea0

08006d50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006d56:	f000 f965 	bl	8007024 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006d5a:	4b15      	ldr	r3, [pc, #84]	; (8006db0 <prvCheckForValidListAndQueue+0x60>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d120      	bne.n	8006da4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006d62:	4814      	ldr	r0, [pc, #80]	; (8006db4 <prvCheckForValidListAndQueue+0x64>)
 8006d64:	f7fd fcfc 	bl	8004760 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006d68:	4813      	ldr	r0, [pc, #76]	; (8006db8 <prvCheckForValidListAndQueue+0x68>)
 8006d6a:	f7fd fcf9 	bl	8004760 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006d6e:	4b13      	ldr	r3, [pc, #76]	; (8006dbc <prvCheckForValidListAndQueue+0x6c>)
 8006d70:	4a10      	ldr	r2, [pc, #64]	; (8006db4 <prvCheckForValidListAndQueue+0x64>)
 8006d72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006d74:	4b12      	ldr	r3, [pc, #72]	; (8006dc0 <prvCheckForValidListAndQueue+0x70>)
 8006d76:	4a10      	ldr	r2, [pc, #64]	; (8006db8 <prvCheckForValidListAndQueue+0x68>)
 8006d78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	4b11      	ldr	r3, [pc, #68]	; (8006dc4 <prvCheckForValidListAndQueue+0x74>)
 8006d80:	4a11      	ldr	r2, [pc, #68]	; (8006dc8 <prvCheckForValidListAndQueue+0x78>)
 8006d82:	2110      	movs	r1, #16
 8006d84:	200a      	movs	r0, #10
 8006d86:	f7fd fe07 	bl	8004998 <xQueueGenericCreateStatic>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	4a08      	ldr	r2, [pc, #32]	; (8006db0 <prvCheckForValidListAndQueue+0x60>)
 8006d8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006d90:	4b07      	ldr	r3, [pc, #28]	; (8006db0 <prvCheckForValidListAndQueue+0x60>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d005      	beq.n	8006da4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006d98:	4b05      	ldr	r3, [pc, #20]	; (8006db0 <prvCheckForValidListAndQueue+0x60>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	490b      	ldr	r1, [pc, #44]	; (8006dcc <prvCheckForValidListAndQueue+0x7c>)
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7fe fc34 	bl	800560c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006da4:	f000 f96e 	bl	8007084 <vPortExitCritical>
}
 8006da8:	bf00      	nop
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	20000ea4 	.word	0x20000ea4
 8006db4:	20000e74 	.word	0x20000e74
 8006db8:	20000e88 	.word	0x20000e88
 8006dbc:	20000e9c 	.word	0x20000e9c
 8006dc0:	20000ea0 	.word	0x20000ea0
 8006dc4:	20000f50 	.word	0x20000f50
 8006dc8:	20000eb0 	.word	0x20000eb0
 8006dcc:	080088ac 	.word	0x080088ac

08006dd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	3b04      	subs	r3, #4
 8006de0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006de8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	3b04      	subs	r3, #4
 8006dee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	f023 0201 	bic.w	r2, r3, #1
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	3b04      	subs	r3, #4
 8006dfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006e00:	4a0c      	ldr	r2, [pc, #48]	; (8006e34 <pxPortInitialiseStack+0x64>)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	3b14      	subs	r3, #20
 8006e0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	3b04      	subs	r3, #4
 8006e16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f06f 0202 	mvn.w	r2, #2
 8006e1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	3b20      	subs	r3, #32
 8006e24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006e26:	68fb      	ldr	r3, [r7, #12]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3714      	adds	r7, #20
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr
 8006e34:	08006e39 	.word	0x08006e39

08006e38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006e42:	4b12      	ldr	r3, [pc, #72]	; (8006e8c <prvTaskExitError+0x54>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4a:	d00a      	beq.n	8006e62 <prvTaskExitError+0x2a>
	__asm volatile
 8006e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e50:	f383 8811 	msr	BASEPRI, r3
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	60fb      	str	r3, [r7, #12]
}
 8006e5e:	bf00      	nop
 8006e60:	e7fe      	b.n	8006e60 <prvTaskExitError+0x28>
	__asm volatile
 8006e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e66:	f383 8811 	msr	BASEPRI, r3
 8006e6a:	f3bf 8f6f 	isb	sy
 8006e6e:	f3bf 8f4f 	dsb	sy
 8006e72:	60bb      	str	r3, [r7, #8]
}
 8006e74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006e76:	bf00      	nop
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d0fc      	beq.n	8006e78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006e7e:	bf00      	nop
 8006e80:	bf00      	nop
 8006e82:	3714      	adds	r7, #20
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr
 8006e8c:	2000000c 	.word	0x2000000c

08006e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006e90:	4b07      	ldr	r3, [pc, #28]	; (8006eb0 <pxCurrentTCBConst2>)
 8006e92:	6819      	ldr	r1, [r3, #0]
 8006e94:	6808      	ldr	r0, [r1, #0]
 8006e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e9a:	f380 8809 	msr	PSP, r0
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	f04f 0000 	mov.w	r0, #0
 8006ea6:	f380 8811 	msr	BASEPRI, r0
 8006eaa:	4770      	bx	lr
 8006eac:	f3af 8000 	nop.w

08006eb0 <pxCurrentTCBConst2>:
 8006eb0:	20000974 	.word	0x20000974
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006eb4:	bf00      	nop
 8006eb6:	bf00      	nop

08006eb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006eb8:	4808      	ldr	r0, [pc, #32]	; (8006edc <prvPortStartFirstTask+0x24>)
 8006eba:	6800      	ldr	r0, [r0, #0]
 8006ebc:	6800      	ldr	r0, [r0, #0]
 8006ebe:	f380 8808 	msr	MSP, r0
 8006ec2:	f04f 0000 	mov.w	r0, #0
 8006ec6:	f380 8814 	msr	CONTROL, r0
 8006eca:	b662      	cpsie	i
 8006ecc:	b661      	cpsie	f
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	f3bf 8f6f 	isb	sy
 8006ed6:	df00      	svc	0
 8006ed8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006eda:	bf00      	nop
 8006edc:	e000ed08 	.word	0xe000ed08

08006ee0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006ee6:	4b46      	ldr	r3, [pc, #280]	; (8007000 <xPortStartScheduler+0x120>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a46      	ldr	r2, [pc, #280]	; (8007004 <xPortStartScheduler+0x124>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d10a      	bne.n	8006f06 <xPortStartScheduler+0x26>
	__asm volatile
 8006ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	613b      	str	r3, [r7, #16]
}
 8006f02:	bf00      	nop
 8006f04:	e7fe      	b.n	8006f04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006f06:	4b3e      	ldr	r3, [pc, #248]	; (8007000 <xPortStartScheduler+0x120>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a3f      	ldr	r2, [pc, #252]	; (8007008 <xPortStartScheduler+0x128>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d10a      	bne.n	8006f26 <xPortStartScheduler+0x46>
	__asm volatile
 8006f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f14:	f383 8811 	msr	BASEPRI, r3
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	60fb      	str	r3, [r7, #12]
}
 8006f22:	bf00      	nop
 8006f24:	e7fe      	b.n	8006f24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f26:	4b39      	ldr	r3, [pc, #228]	; (800700c <xPortStartScheduler+0x12c>)
 8006f28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	22ff      	movs	r2, #255	; 0xff
 8006f36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f40:	78fb      	ldrb	r3, [r7, #3]
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	4b31      	ldr	r3, [pc, #196]	; (8007010 <xPortStartScheduler+0x130>)
 8006f4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f4e:	4b31      	ldr	r3, [pc, #196]	; (8007014 <xPortStartScheduler+0x134>)
 8006f50:	2207      	movs	r2, #7
 8006f52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f54:	e009      	b.n	8006f6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006f56:	4b2f      	ldr	r3, [pc, #188]	; (8007014 <xPortStartScheduler+0x134>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	4a2d      	ldr	r2, [pc, #180]	; (8007014 <xPortStartScheduler+0x134>)
 8006f5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f60:	78fb      	ldrb	r3, [r7, #3]
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	005b      	lsls	r3, r3, #1
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f6a:	78fb      	ldrb	r3, [r7, #3]
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f72:	2b80      	cmp	r3, #128	; 0x80
 8006f74:	d0ef      	beq.n	8006f56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006f76:	4b27      	ldr	r3, [pc, #156]	; (8007014 <xPortStartScheduler+0x134>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f1c3 0307 	rsb	r3, r3, #7
 8006f7e:	2b04      	cmp	r3, #4
 8006f80:	d00a      	beq.n	8006f98 <xPortStartScheduler+0xb8>
	__asm volatile
 8006f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f86:	f383 8811 	msr	BASEPRI, r3
 8006f8a:	f3bf 8f6f 	isb	sy
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	60bb      	str	r3, [r7, #8]
}
 8006f94:	bf00      	nop
 8006f96:	e7fe      	b.n	8006f96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006f98:	4b1e      	ldr	r3, [pc, #120]	; (8007014 <xPortStartScheduler+0x134>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	021b      	lsls	r3, r3, #8
 8006f9e:	4a1d      	ldr	r2, [pc, #116]	; (8007014 <xPortStartScheduler+0x134>)
 8006fa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006fa2:	4b1c      	ldr	r3, [pc, #112]	; (8007014 <xPortStartScheduler+0x134>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006faa:	4a1a      	ldr	r2, [pc, #104]	; (8007014 <xPortStartScheduler+0x134>)
 8006fac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	b2da      	uxtb	r2, r3
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006fb6:	4b18      	ldr	r3, [pc, #96]	; (8007018 <xPortStartScheduler+0x138>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a17      	ldr	r2, [pc, #92]	; (8007018 <xPortStartScheduler+0x138>)
 8006fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006fc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006fc2:	4b15      	ldr	r3, [pc, #84]	; (8007018 <xPortStartScheduler+0x138>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a14      	ldr	r2, [pc, #80]	; (8007018 <xPortStartScheduler+0x138>)
 8006fc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006fcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006fce:	f000 f8dd 	bl	800718c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006fd2:	4b12      	ldr	r3, [pc, #72]	; (800701c <xPortStartScheduler+0x13c>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006fd8:	f000 f8fc 	bl	80071d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006fdc:	4b10      	ldr	r3, [pc, #64]	; (8007020 <xPortStartScheduler+0x140>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a0f      	ldr	r2, [pc, #60]	; (8007020 <xPortStartScheduler+0x140>)
 8006fe2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006fe6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006fe8:	f7ff ff66 	bl	8006eb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006fec:	f7fe ff3e 	bl	8005e6c <vTaskSwitchContext>
	prvTaskExitError();
 8006ff0:	f7ff ff22 	bl	8006e38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3718      	adds	r7, #24
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	e000ed00 	.word	0xe000ed00
 8007004:	410fc271 	.word	0x410fc271
 8007008:	410fc270 	.word	0x410fc270
 800700c:	e000e400 	.word	0xe000e400
 8007010:	20000fa0 	.word	0x20000fa0
 8007014:	20000fa4 	.word	0x20000fa4
 8007018:	e000ed20 	.word	0xe000ed20
 800701c:	2000000c 	.word	0x2000000c
 8007020:	e000ef34 	.word	0xe000ef34

08007024 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
	__asm volatile
 800702a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	607b      	str	r3, [r7, #4]
}
 800703c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800703e:	4b0f      	ldr	r3, [pc, #60]	; (800707c <vPortEnterCritical+0x58>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	3301      	adds	r3, #1
 8007044:	4a0d      	ldr	r2, [pc, #52]	; (800707c <vPortEnterCritical+0x58>)
 8007046:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007048:	4b0c      	ldr	r3, [pc, #48]	; (800707c <vPortEnterCritical+0x58>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d10f      	bne.n	8007070 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007050:	4b0b      	ldr	r3, [pc, #44]	; (8007080 <vPortEnterCritical+0x5c>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	b2db      	uxtb	r3, r3
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00a      	beq.n	8007070 <vPortEnterCritical+0x4c>
	__asm volatile
 800705a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705e:	f383 8811 	msr	BASEPRI, r3
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	f3bf 8f4f 	dsb	sy
 800706a:	603b      	str	r3, [r7, #0]
}
 800706c:	bf00      	nop
 800706e:	e7fe      	b.n	800706e <vPortEnterCritical+0x4a>
	}
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr
 800707c:	2000000c 	.word	0x2000000c
 8007080:	e000ed04 	.word	0xe000ed04

08007084 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800708a:	4b12      	ldr	r3, [pc, #72]	; (80070d4 <vPortExitCritical+0x50>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10a      	bne.n	80070a8 <vPortExitCritical+0x24>
	__asm volatile
 8007092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007096:	f383 8811 	msr	BASEPRI, r3
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	607b      	str	r3, [r7, #4]
}
 80070a4:	bf00      	nop
 80070a6:	e7fe      	b.n	80070a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80070a8:	4b0a      	ldr	r3, [pc, #40]	; (80070d4 <vPortExitCritical+0x50>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3b01      	subs	r3, #1
 80070ae:	4a09      	ldr	r2, [pc, #36]	; (80070d4 <vPortExitCritical+0x50>)
 80070b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80070b2:	4b08      	ldr	r3, [pc, #32]	; (80070d4 <vPortExitCritical+0x50>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d105      	bne.n	80070c6 <vPortExitCritical+0x42>
 80070ba:	2300      	movs	r3, #0
 80070bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	f383 8811 	msr	BASEPRI, r3
}
 80070c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80070c6:	bf00      	nop
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	2000000c 	.word	0x2000000c
	...

080070e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80070e0:	f3ef 8009 	mrs	r0, PSP
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	4b15      	ldr	r3, [pc, #84]	; (8007140 <pxCurrentTCBConst>)
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	f01e 0f10 	tst.w	lr, #16
 80070f0:	bf08      	it	eq
 80070f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80070f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070fa:	6010      	str	r0, [r2, #0]
 80070fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007100:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007104:	f380 8811 	msr	BASEPRI, r0
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	f3bf 8f6f 	isb	sy
 8007110:	f7fe feac 	bl	8005e6c <vTaskSwitchContext>
 8007114:	f04f 0000 	mov.w	r0, #0
 8007118:	f380 8811 	msr	BASEPRI, r0
 800711c:	bc09      	pop	{r0, r3}
 800711e:	6819      	ldr	r1, [r3, #0]
 8007120:	6808      	ldr	r0, [r1, #0]
 8007122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007126:	f01e 0f10 	tst.w	lr, #16
 800712a:	bf08      	it	eq
 800712c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007130:	f380 8809 	msr	PSP, r0
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	f3af 8000 	nop.w

08007140 <pxCurrentTCBConst>:
 8007140:	20000974 	.word	0x20000974
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007144:	bf00      	nop
 8007146:	bf00      	nop

08007148 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
	__asm volatile
 800714e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007152:	f383 8811 	msr	BASEPRI, r3
 8007156:	f3bf 8f6f 	isb	sy
 800715a:	f3bf 8f4f 	dsb	sy
 800715e:	607b      	str	r3, [r7, #4]
}
 8007160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007162:	f7fe fdc9 	bl	8005cf8 <xTaskIncrementTick>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d003      	beq.n	8007174 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800716c:	4b06      	ldr	r3, [pc, #24]	; (8007188 <xPortSysTickHandler+0x40>)
 800716e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007172:	601a      	str	r2, [r3, #0]
 8007174:	2300      	movs	r3, #0
 8007176:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	f383 8811 	msr	BASEPRI, r3
}
 800717e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007180:	bf00      	nop
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	e000ed04 	.word	0xe000ed04

0800718c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800718c:	b480      	push	{r7}
 800718e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007190:	4b0b      	ldr	r3, [pc, #44]	; (80071c0 <vPortSetupTimerInterrupt+0x34>)
 8007192:	2200      	movs	r2, #0
 8007194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007196:	4b0b      	ldr	r3, [pc, #44]	; (80071c4 <vPortSetupTimerInterrupt+0x38>)
 8007198:	2200      	movs	r2, #0
 800719a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800719c:	4b0a      	ldr	r3, [pc, #40]	; (80071c8 <vPortSetupTimerInterrupt+0x3c>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a0a      	ldr	r2, [pc, #40]	; (80071cc <vPortSetupTimerInterrupt+0x40>)
 80071a2:	fba2 2303 	umull	r2, r3, r2, r3
 80071a6:	099b      	lsrs	r3, r3, #6
 80071a8:	4a09      	ldr	r2, [pc, #36]	; (80071d0 <vPortSetupTimerInterrupt+0x44>)
 80071aa:	3b01      	subs	r3, #1
 80071ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80071ae:	4b04      	ldr	r3, [pc, #16]	; (80071c0 <vPortSetupTimerInterrupt+0x34>)
 80071b0:	2207      	movs	r2, #7
 80071b2:	601a      	str	r2, [r3, #0]
}
 80071b4:	bf00      	nop
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	e000e010 	.word	0xe000e010
 80071c4:	e000e018 	.word	0xe000e018
 80071c8:	20000000 	.word	0x20000000
 80071cc:	10624dd3 	.word	0x10624dd3
 80071d0:	e000e014 	.word	0xe000e014

080071d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80071d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80071e4 <vPortEnableVFP+0x10>
 80071d8:	6801      	ldr	r1, [r0, #0]
 80071da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80071de:	6001      	str	r1, [r0, #0]
 80071e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80071e2:	bf00      	nop
 80071e4:	e000ed88 	.word	0xe000ed88

080071e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80071ee:	f3ef 8305 	mrs	r3, IPSR
 80071f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2b0f      	cmp	r3, #15
 80071f8:	d914      	bls.n	8007224 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80071fa:	4a17      	ldr	r2, [pc, #92]	; (8007258 <vPortValidateInterruptPriority+0x70>)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	4413      	add	r3, r2
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007204:	4b15      	ldr	r3, [pc, #84]	; (800725c <vPortValidateInterruptPriority+0x74>)
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	7afa      	ldrb	r2, [r7, #11]
 800720a:	429a      	cmp	r2, r3
 800720c:	d20a      	bcs.n	8007224 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	607b      	str	r3, [r7, #4]
}
 8007220:	bf00      	nop
 8007222:	e7fe      	b.n	8007222 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007224:	4b0e      	ldr	r3, [pc, #56]	; (8007260 <vPortValidateInterruptPriority+0x78>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800722c:	4b0d      	ldr	r3, [pc, #52]	; (8007264 <vPortValidateInterruptPriority+0x7c>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	429a      	cmp	r2, r3
 8007232:	d90a      	bls.n	800724a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	603b      	str	r3, [r7, #0]
}
 8007246:	bf00      	nop
 8007248:	e7fe      	b.n	8007248 <vPortValidateInterruptPriority+0x60>
	}
 800724a:	bf00      	nop
 800724c:	3714      	adds	r7, #20
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	e000e3f0 	.word	0xe000e3f0
 800725c:	20000fa0 	.word	0x20000fa0
 8007260:	e000ed0c 	.word	0xe000ed0c
 8007264:	20000fa4 	.word	0x20000fa4

08007268 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b08a      	sub	sp, #40	; 0x28
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007270:	2300      	movs	r3, #0
 8007272:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007274:	f7fe fc84 	bl	8005b80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007278:	4b5b      	ldr	r3, [pc, #364]	; (80073e8 <pvPortMalloc+0x180>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d101      	bne.n	8007284 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007280:	f000 f920 	bl	80074c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007284:	4b59      	ldr	r3, [pc, #356]	; (80073ec <pvPortMalloc+0x184>)
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4013      	ands	r3, r2
 800728c:	2b00      	cmp	r3, #0
 800728e:	f040 8093 	bne.w	80073b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d01d      	beq.n	80072d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007298:	2208      	movs	r2, #8
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4413      	add	r3, r2
 800729e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f003 0307 	and.w	r3, r3, #7
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d014      	beq.n	80072d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f023 0307 	bic.w	r3, r3, #7
 80072b0:	3308      	adds	r3, #8
 80072b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f003 0307 	and.w	r3, r3, #7
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00a      	beq.n	80072d4 <pvPortMalloc+0x6c>
	__asm volatile
 80072be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c2:	f383 8811 	msr	BASEPRI, r3
 80072c6:	f3bf 8f6f 	isb	sy
 80072ca:	f3bf 8f4f 	dsb	sy
 80072ce:	617b      	str	r3, [r7, #20]
}
 80072d0:	bf00      	nop
 80072d2:	e7fe      	b.n	80072d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d06e      	beq.n	80073b8 <pvPortMalloc+0x150>
 80072da:	4b45      	ldr	r3, [pc, #276]	; (80073f0 <pvPortMalloc+0x188>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d869      	bhi.n	80073b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80072e4:	4b43      	ldr	r3, [pc, #268]	; (80073f4 <pvPortMalloc+0x18c>)
 80072e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80072e8:	4b42      	ldr	r3, [pc, #264]	; (80073f4 <pvPortMalloc+0x18c>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072ee:	e004      	b.n	80072fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80072f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80072f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	429a      	cmp	r2, r3
 8007302:	d903      	bls.n	800730c <pvPortMalloc+0xa4>
 8007304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1f1      	bne.n	80072f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800730c:	4b36      	ldr	r3, [pc, #216]	; (80073e8 <pvPortMalloc+0x180>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007312:	429a      	cmp	r2, r3
 8007314:	d050      	beq.n	80073b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2208      	movs	r2, #8
 800731c:	4413      	add	r3, r2
 800731e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	6a3b      	ldr	r3, [r7, #32]
 8007326:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732a:	685a      	ldr	r2, [r3, #4]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	1ad2      	subs	r2, r2, r3
 8007330:	2308      	movs	r3, #8
 8007332:	005b      	lsls	r3, r3, #1
 8007334:	429a      	cmp	r2, r3
 8007336:	d91f      	bls.n	8007378 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4413      	add	r3, r2
 800733e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	f003 0307 	and.w	r3, r3, #7
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00a      	beq.n	8007360 <pvPortMalloc+0xf8>
	__asm volatile
 800734a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734e:	f383 8811 	msr	BASEPRI, r3
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	613b      	str	r3, [r7, #16]
}
 800735c:	bf00      	nop
 800735e:	e7fe      	b.n	800735e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007362:	685a      	ldr	r2, [r3, #4]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	1ad2      	subs	r2, r2, r3
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007372:	69b8      	ldr	r0, [r7, #24]
 8007374:	f000 f908 	bl	8007588 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007378:	4b1d      	ldr	r3, [pc, #116]	; (80073f0 <pvPortMalloc+0x188>)
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	4a1b      	ldr	r2, [pc, #108]	; (80073f0 <pvPortMalloc+0x188>)
 8007384:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007386:	4b1a      	ldr	r3, [pc, #104]	; (80073f0 <pvPortMalloc+0x188>)
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	4b1b      	ldr	r3, [pc, #108]	; (80073f8 <pvPortMalloc+0x190>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	429a      	cmp	r2, r3
 8007390:	d203      	bcs.n	800739a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007392:	4b17      	ldr	r3, [pc, #92]	; (80073f0 <pvPortMalloc+0x188>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a18      	ldr	r2, [pc, #96]	; (80073f8 <pvPortMalloc+0x190>)
 8007398:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	4b13      	ldr	r3, [pc, #76]	; (80073ec <pvPortMalloc+0x184>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	431a      	orrs	r2, r3
 80073a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80073a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073aa:	2200      	movs	r2, #0
 80073ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80073ae:	4b13      	ldr	r3, [pc, #76]	; (80073fc <pvPortMalloc+0x194>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3301      	adds	r3, #1
 80073b4:	4a11      	ldr	r2, [pc, #68]	; (80073fc <pvPortMalloc+0x194>)
 80073b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80073b8:	f7fe fbf0 	bl	8005b9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	f003 0307 	and.w	r3, r3, #7
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00a      	beq.n	80073dc <pvPortMalloc+0x174>
	__asm volatile
 80073c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ca:	f383 8811 	msr	BASEPRI, r3
 80073ce:	f3bf 8f6f 	isb	sy
 80073d2:	f3bf 8f4f 	dsb	sy
 80073d6:	60fb      	str	r3, [r7, #12]
}
 80073d8:	bf00      	nop
 80073da:	e7fe      	b.n	80073da <pvPortMalloc+0x172>
	return pvReturn;
 80073dc:	69fb      	ldr	r3, [r7, #28]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3728      	adds	r7, #40	; 0x28
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	20004bb0 	.word	0x20004bb0
 80073ec:	20004bc4 	.word	0x20004bc4
 80073f0:	20004bb4 	.word	0x20004bb4
 80073f4:	20004ba8 	.word	0x20004ba8
 80073f8:	20004bb8 	.word	0x20004bb8
 80073fc:	20004bbc 	.word	0x20004bbc

08007400 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d04d      	beq.n	80074ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007412:	2308      	movs	r3, #8
 8007414:	425b      	negs	r3, r3
 8007416:	697a      	ldr	r2, [r7, #20]
 8007418:	4413      	add	r3, r2
 800741a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	685a      	ldr	r2, [r3, #4]
 8007424:	4b24      	ldr	r3, [pc, #144]	; (80074b8 <vPortFree+0xb8>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4013      	ands	r3, r2
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10a      	bne.n	8007444 <vPortFree+0x44>
	__asm volatile
 800742e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007432:	f383 8811 	msr	BASEPRI, r3
 8007436:	f3bf 8f6f 	isb	sy
 800743a:	f3bf 8f4f 	dsb	sy
 800743e:	60fb      	str	r3, [r7, #12]
}
 8007440:	bf00      	nop
 8007442:	e7fe      	b.n	8007442 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00a      	beq.n	8007462 <vPortFree+0x62>
	__asm volatile
 800744c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	60bb      	str	r3, [r7, #8]
}
 800745e:	bf00      	nop
 8007460:	e7fe      	b.n	8007460 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	685a      	ldr	r2, [r3, #4]
 8007466:	4b14      	ldr	r3, [pc, #80]	; (80074b8 <vPortFree+0xb8>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4013      	ands	r3, r2
 800746c:	2b00      	cmp	r3, #0
 800746e:	d01e      	beq.n	80074ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d11a      	bne.n	80074ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	685a      	ldr	r2, [r3, #4]
 800747c:	4b0e      	ldr	r3, [pc, #56]	; (80074b8 <vPortFree+0xb8>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	43db      	mvns	r3, r3
 8007482:	401a      	ands	r2, r3
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007488:	f7fe fb7a 	bl	8005b80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	4b0a      	ldr	r3, [pc, #40]	; (80074bc <vPortFree+0xbc>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4413      	add	r3, r2
 8007496:	4a09      	ldr	r2, [pc, #36]	; (80074bc <vPortFree+0xbc>)
 8007498:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800749a:	6938      	ldr	r0, [r7, #16]
 800749c:	f000 f874 	bl	8007588 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80074a0:	4b07      	ldr	r3, [pc, #28]	; (80074c0 <vPortFree+0xc0>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	3301      	adds	r3, #1
 80074a6:	4a06      	ldr	r2, [pc, #24]	; (80074c0 <vPortFree+0xc0>)
 80074a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80074aa:	f7fe fb77 	bl	8005b9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80074ae:	bf00      	nop
 80074b0:	3718      	adds	r7, #24
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	20004bc4 	.word	0x20004bc4
 80074bc:	20004bb4 	.word	0x20004bb4
 80074c0:	20004bc0 	.word	0x20004bc0

080074c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80074ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80074ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80074d0:	4b27      	ldr	r3, [pc, #156]	; (8007570 <prvHeapInit+0xac>)
 80074d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f003 0307 	and.w	r3, r3, #7
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00c      	beq.n	80074f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	3307      	adds	r3, #7
 80074e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f023 0307 	bic.w	r3, r3, #7
 80074ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	4a1f      	ldr	r2, [pc, #124]	; (8007570 <prvHeapInit+0xac>)
 80074f4:	4413      	add	r3, r2
 80074f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80074fc:	4a1d      	ldr	r2, [pc, #116]	; (8007574 <prvHeapInit+0xb0>)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007502:	4b1c      	ldr	r3, [pc, #112]	; (8007574 <prvHeapInit+0xb0>)
 8007504:	2200      	movs	r2, #0
 8007506:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	68ba      	ldr	r2, [r7, #8]
 800750c:	4413      	add	r3, r2
 800750e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007510:	2208      	movs	r2, #8
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	1a9b      	subs	r3, r3, r2
 8007516:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f023 0307 	bic.w	r3, r3, #7
 800751e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	4a15      	ldr	r2, [pc, #84]	; (8007578 <prvHeapInit+0xb4>)
 8007524:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007526:	4b14      	ldr	r3, [pc, #80]	; (8007578 <prvHeapInit+0xb4>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2200      	movs	r2, #0
 800752c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800752e:	4b12      	ldr	r3, [pc, #72]	; (8007578 <prvHeapInit+0xb4>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2200      	movs	r2, #0
 8007534:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	1ad2      	subs	r2, r2, r3
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007544:	4b0c      	ldr	r3, [pc, #48]	; (8007578 <prvHeapInit+0xb4>)
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	4a0a      	ldr	r2, [pc, #40]	; (800757c <prvHeapInit+0xb8>)
 8007552:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	4a09      	ldr	r2, [pc, #36]	; (8007580 <prvHeapInit+0xbc>)
 800755a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800755c:	4b09      	ldr	r3, [pc, #36]	; (8007584 <prvHeapInit+0xc0>)
 800755e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007562:	601a      	str	r2, [r3, #0]
}
 8007564:	bf00      	nop
 8007566:	3714      	adds	r7, #20
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr
 8007570:	20000fa8 	.word	0x20000fa8
 8007574:	20004ba8 	.word	0x20004ba8
 8007578:	20004bb0 	.word	0x20004bb0
 800757c:	20004bb8 	.word	0x20004bb8
 8007580:	20004bb4 	.word	0x20004bb4
 8007584:	20004bc4 	.word	0x20004bc4

08007588 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007590:	4b28      	ldr	r3, [pc, #160]	; (8007634 <prvInsertBlockIntoFreeList+0xac>)
 8007592:	60fb      	str	r3, [r7, #12]
 8007594:	e002      	b.n	800759c <prvInsertBlockIntoFreeList+0x14>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	60fb      	str	r3, [r7, #12]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d8f7      	bhi.n	8007596 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	68ba      	ldr	r2, [r7, #8]
 80075b0:	4413      	add	r3, r2
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d108      	bne.n	80075ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	685a      	ldr	r2, [r3, #4]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	441a      	add	r2, r3
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	441a      	add	r2, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d118      	bne.n	8007610 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	4b15      	ldr	r3, [pc, #84]	; (8007638 <prvInsertBlockIntoFreeList+0xb0>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d00d      	beq.n	8007606 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	441a      	add	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	601a      	str	r2, [r3, #0]
 8007604:	e008      	b.n	8007618 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007606:	4b0c      	ldr	r3, [pc, #48]	; (8007638 <prvInsertBlockIntoFreeList+0xb0>)
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	601a      	str	r2, [r3, #0]
 800760e:	e003      	b.n	8007618 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	429a      	cmp	r2, r3
 800761e:	d002      	beq.n	8007626 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007626:	bf00      	nop
 8007628:	3714      	adds	r7, #20
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	20004ba8 	.word	0x20004ba8
 8007638:	20004bb0 	.word	0x20004bb0

0800763c <__errno>:
 800763c:	4b01      	ldr	r3, [pc, #4]	; (8007644 <__errno+0x8>)
 800763e:	6818      	ldr	r0, [r3, #0]
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	20000010 	.word	0x20000010

08007648 <std>:
 8007648:	2300      	movs	r3, #0
 800764a:	b510      	push	{r4, lr}
 800764c:	4604      	mov	r4, r0
 800764e:	e9c0 3300 	strd	r3, r3, [r0]
 8007652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007656:	6083      	str	r3, [r0, #8]
 8007658:	8181      	strh	r1, [r0, #12]
 800765a:	6643      	str	r3, [r0, #100]	; 0x64
 800765c:	81c2      	strh	r2, [r0, #14]
 800765e:	6183      	str	r3, [r0, #24]
 8007660:	4619      	mov	r1, r3
 8007662:	2208      	movs	r2, #8
 8007664:	305c      	adds	r0, #92	; 0x5c
 8007666:	f000 f92b 	bl	80078c0 <memset>
 800766a:	4b05      	ldr	r3, [pc, #20]	; (8007680 <std+0x38>)
 800766c:	6263      	str	r3, [r4, #36]	; 0x24
 800766e:	4b05      	ldr	r3, [pc, #20]	; (8007684 <std+0x3c>)
 8007670:	62a3      	str	r3, [r4, #40]	; 0x28
 8007672:	4b05      	ldr	r3, [pc, #20]	; (8007688 <std+0x40>)
 8007674:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007676:	4b05      	ldr	r3, [pc, #20]	; (800768c <std+0x44>)
 8007678:	6224      	str	r4, [r4, #32]
 800767a:	6323      	str	r3, [r4, #48]	; 0x30
 800767c:	bd10      	pop	{r4, pc}
 800767e:	bf00      	nop
 8007680:	08007c5d 	.word	0x08007c5d
 8007684:	08007c7f 	.word	0x08007c7f
 8007688:	08007cb7 	.word	0x08007cb7
 800768c:	08007cdb 	.word	0x08007cdb

08007690 <_cleanup_r>:
 8007690:	4901      	ldr	r1, [pc, #4]	; (8007698 <_cleanup_r+0x8>)
 8007692:	f000 b8af 	b.w	80077f4 <_fwalk_reent>
 8007696:	bf00      	nop
 8007698:	08007e71 	.word	0x08007e71

0800769c <__sfmoreglue>:
 800769c:	b570      	push	{r4, r5, r6, lr}
 800769e:	2268      	movs	r2, #104	; 0x68
 80076a0:	1e4d      	subs	r5, r1, #1
 80076a2:	4355      	muls	r5, r2
 80076a4:	460e      	mov	r6, r1
 80076a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80076aa:	f000 f97d 	bl	80079a8 <_malloc_r>
 80076ae:	4604      	mov	r4, r0
 80076b0:	b140      	cbz	r0, 80076c4 <__sfmoreglue+0x28>
 80076b2:	2100      	movs	r1, #0
 80076b4:	e9c0 1600 	strd	r1, r6, [r0]
 80076b8:	300c      	adds	r0, #12
 80076ba:	60a0      	str	r0, [r4, #8]
 80076bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80076c0:	f000 f8fe 	bl	80078c0 <memset>
 80076c4:	4620      	mov	r0, r4
 80076c6:	bd70      	pop	{r4, r5, r6, pc}

080076c8 <__sfp_lock_acquire>:
 80076c8:	4801      	ldr	r0, [pc, #4]	; (80076d0 <__sfp_lock_acquire+0x8>)
 80076ca:	f000 b8d8 	b.w	800787e <__retarget_lock_acquire_recursive>
 80076ce:	bf00      	nop
 80076d0:	20004bc9 	.word	0x20004bc9

080076d4 <__sfp_lock_release>:
 80076d4:	4801      	ldr	r0, [pc, #4]	; (80076dc <__sfp_lock_release+0x8>)
 80076d6:	f000 b8d3 	b.w	8007880 <__retarget_lock_release_recursive>
 80076da:	bf00      	nop
 80076dc:	20004bc9 	.word	0x20004bc9

080076e0 <__sinit_lock_acquire>:
 80076e0:	4801      	ldr	r0, [pc, #4]	; (80076e8 <__sinit_lock_acquire+0x8>)
 80076e2:	f000 b8cc 	b.w	800787e <__retarget_lock_acquire_recursive>
 80076e6:	bf00      	nop
 80076e8:	20004bca 	.word	0x20004bca

080076ec <__sinit_lock_release>:
 80076ec:	4801      	ldr	r0, [pc, #4]	; (80076f4 <__sinit_lock_release+0x8>)
 80076ee:	f000 b8c7 	b.w	8007880 <__retarget_lock_release_recursive>
 80076f2:	bf00      	nop
 80076f4:	20004bca 	.word	0x20004bca

080076f8 <__sinit>:
 80076f8:	b510      	push	{r4, lr}
 80076fa:	4604      	mov	r4, r0
 80076fc:	f7ff fff0 	bl	80076e0 <__sinit_lock_acquire>
 8007700:	69a3      	ldr	r3, [r4, #24]
 8007702:	b11b      	cbz	r3, 800770c <__sinit+0x14>
 8007704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007708:	f7ff bff0 	b.w	80076ec <__sinit_lock_release>
 800770c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007710:	6523      	str	r3, [r4, #80]	; 0x50
 8007712:	4b13      	ldr	r3, [pc, #76]	; (8007760 <__sinit+0x68>)
 8007714:	4a13      	ldr	r2, [pc, #76]	; (8007764 <__sinit+0x6c>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	62a2      	str	r2, [r4, #40]	; 0x28
 800771a:	42a3      	cmp	r3, r4
 800771c:	bf04      	itt	eq
 800771e:	2301      	moveq	r3, #1
 8007720:	61a3      	streq	r3, [r4, #24]
 8007722:	4620      	mov	r0, r4
 8007724:	f000 f820 	bl	8007768 <__sfp>
 8007728:	6060      	str	r0, [r4, #4]
 800772a:	4620      	mov	r0, r4
 800772c:	f000 f81c 	bl	8007768 <__sfp>
 8007730:	60a0      	str	r0, [r4, #8]
 8007732:	4620      	mov	r0, r4
 8007734:	f000 f818 	bl	8007768 <__sfp>
 8007738:	2200      	movs	r2, #0
 800773a:	60e0      	str	r0, [r4, #12]
 800773c:	2104      	movs	r1, #4
 800773e:	6860      	ldr	r0, [r4, #4]
 8007740:	f7ff ff82 	bl	8007648 <std>
 8007744:	68a0      	ldr	r0, [r4, #8]
 8007746:	2201      	movs	r2, #1
 8007748:	2109      	movs	r1, #9
 800774a:	f7ff ff7d 	bl	8007648 <std>
 800774e:	68e0      	ldr	r0, [r4, #12]
 8007750:	2202      	movs	r2, #2
 8007752:	2112      	movs	r1, #18
 8007754:	f7ff ff78 	bl	8007648 <std>
 8007758:	2301      	movs	r3, #1
 800775a:	61a3      	str	r3, [r4, #24]
 800775c:	e7d2      	b.n	8007704 <__sinit+0xc>
 800775e:	bf00      	nop
 8007760:	08008ef0 	.word	0x08008ef0
 8007764:	08007691 	.word	0x08007691

08007768 <__sfp>:
 8007768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800776a:	4607      	mov	r7, r0
 800776c:	f7ff ffac 	bl	80076c8 <__sfp_lock_acquire>
 8007770:	4b1e      	ldr	r3, [pc, #120]	; (80077ec <__sfp+0x84>)
 8007772:	681e      	ldr	r6, [r3, #0]
 8007774:	69b3      	ldr	r3, [r6, #24]
 8007776:	b913      	cbnz	r3, 800777e <__sfp+0x16>
 8007778:	4630      	mov	r0, r6
 800777a:	f7ff ffbd 	bl	80076f8 <__sinit>
 800777e:	3648      	adds	r6, #72	; 0x48
 8007780:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007784:	3b01      	subs	r3, #1
 8007786:	d503      	bpl.n	8007790 <__sfp+0x28>
 8007788:	6833      	ldr	r3, [r6, #0]
 800778a:	b30b      	cbz	r3, 80077d0 <__sfp+0x68>
 800778c:	6836      	ldr	r6, [r6, #0]
 800778e:	e7f7      	b.n	8007780 <__sfp+0x18>
 8007790:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007794:	b9d5      	cbnz	r5, 80077cc <__sfp+0x64>
 8007796:	4b16      	ldr	r3, [pc, #88]	; (80077f0 <__sfp+0x88>)
 8007798:	60e3      	str	r3, [r4, #12]
 800779a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800779e:	6665      	str	r5, [r4, #100]	; 0x64
 80077a0:	f000 f86c 	bl	800787c <__retarget_lock_init_recursive>
 80077a4:	f7ff ff96 	bl	80076d4 <__sfp_lock_release>
 80077a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80077ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80077b0:	6025      	str	r5, [r4, #0]
 80077b2:	61a5      	str	r5, [r4, #24]
 80077b4:	2208      	movs	r2, #8
 80077b6:	4629      	mov	r1, r5
 80077b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80077bc:	f000 f880 	bl	80078c0 <memset>
 80077c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80077c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80077c8:	4620      	mov	r0, r4
 80077ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077cc:	3468      	adds	r4, #104	; 0x68
 80077ce:	e7d9      	b.n	8007784 <__sfp+0x1c>
 80077d0:	2104      	movs	r1, #4
 80077d2:	4638      	mov	r0, r7
 80077d4:	f7ff ff62 	bl	800769c <__sfmoreglue>
 80077d8:	4604      	mov	r4, r0
 80077da:	6030      	str	r0, [r6, #0]
 80077dc:	2800      	cmp	r0, #0
 80077de:	d1d5      	bne.n	800778c <__sfp+0x24>
 80077e0:	f7ff ff78 	bl	80076d4 <__sfp_lock_release>
 80077e4:	230c      	movs	r3, #12
 80077e6:	603b      	str	r3, [r7, #0]
 80077e8:	e7ee      	b.n	80077c8 <__sfp+0x60>
 80077ea:	bf00      	nop
 80077ec:	08008ef0 	.word	0x08008ef0
 80077f0:	ffff0001 	.word	0xffff0001

080077f4 <_fwalk_reent>:
 80077f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077f8:	4606      	mov	r6, r0
 80077fa:	4688      	mov	r8, r1
 80077fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007800:	2700      	movs	r7, #0
 8007802:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007806:	f1b9 0901 	subs.w	r9, r9, #1
 800780a:	d505      	bpl.n	8007818 <_fwalk_reent+0x24>
 800780c:	6824      	ldr	r4, [r4, #0]
 800780e:	2c00      	cmp	r4, #0
 8007810:	d1f7      	bne.n	8007802 <_fwalk_reent+0xe>
 8007812:	4638      	mov	r0, r7
 8007814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007818:	89ab      	ldrh	r3, [r5, #12]
 800781a:	2b01      	cmp	r3, #1
 800781c:	d907      	bls.n	800782e <_fwalk_reent+0x3a>
 800781e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007822:	3301      	adds	r3, #1
 8007824:	d003      	beq.n	800782e <_fwalk_reent+0x3a>
 8007826:	4629      	mov	r1, r5
 8007828:	4630      	mov	r0, r6
 800782a:	47c0      	blx	r8
 800782c:	4307      	orrs	r7, r0
 800782e:	3568      	adds	r5, #104	; 0x68
 8007830:	e7e9      	b.n	8007806 <_fwalk_reent+0x12>
	...

08007834 <__libc_init_array>:
 8007834:	b570      	push	{r4, r5, r6, lr}
 8007836:	4d0d      	ldr	r5, [pc, #52]	; (800786c <__libc_init_array+0x38>)
 8007838:	4c0d      	ldr	r4, [pc, #52]	; (8007870 <__libc_init_array+0x3c>)
 800783a:	1b64      	subs	r4, r4, r5
 800783c:	10a4      	asrs	r4, r4, #2
 800783e:	2600      	movs	r6, #0
 8007840:	42a6      	cmp	r6, r4
 8007842:	d109      	bne.n	8007858 <__libc_init_array+0x24>
 8007844:	4d0b      	ldr	r5, [pc, #44]	; (8007874 <__libc_init_array+0x40>)
 8007846:	4c0c      	ldr	r4, [pc, #48]	; (8007878 <__libc_init_array+0x44>)
 8007848:	f001 f810 	bl	800886c <_init>
 800784c:	1b64      	subs	r4, r4, r5
 800784e:	10a4      	asrs	r4, r4, #2
 8007850:	2600      	movs	r6, #0
 8007852:	42a6      	cmp	r6, r4
 8007854:	d105      	bne.n	8007862 <__libc_init_array+0x2e>
 8007856:	bd70      	pop	{r4, r5, r6, pc}
 8007858:	f855 3b04 	ldr.w	r3, [r5], #4
 800785c:	4798      	blx	r3
 800785e:	3601      	adds	r6, #1
 8007860:	e7ee      	b.n	8007840 <__libc_init_array+0xc>
 8007862:	f855 3b04 	ldr.w	r3, [r5], #4
 8007866:	4798      	blx	r3
 8007868:	3601      	adds	r6, #1
 800786a:	e7f2      	b.n	8007852 <__libc_init_array+0x1e>
 800786c:	08008fe0 	.word	0x08008fe0
 8007870:	08008fe0 	.word	0x08008fe0
 8007874:	08008fe0 	.word	0x08008fe0
 8007878:	08008fe4 	.word	0x08008fe4

0800787c <__retarget_lock_init_recursive>:
 800787c:	4770      	bx	lr

0800787e <__retarget_lock_acquire_recursive>:
 800787e:	4770      	bx	lr

08007880 <__retarget_lock_release_recursive>:
 8007880:	4770      	bx	lr
	...

08007884 <malloc>:
 8007884:	4b02      	ldr	r3, [pc, #8]	; (8007890 <malloc+0xc>)
 8007886:	4601      	mov	r1, r0
 8007888:	6818      	ldr	r0, [r3, #0]
 800788a:	f000 b88d 	b.w	80079a8 <_malloc_r>
 800788e:	bf00      	nop
 8007890:	20000010 	.word	0x20000010

08007894 <free>:
 8007894:	4b02      	ldr	r3, [pc, #8]	; (80078a0 <free+0xc>)
 8007896:	4601      	mov	r1, r0
 8007898:	6818      	ldr	r0, [r3, #0]
 800789a:	f000 b819 	b.w	80078d0 <_free_r>
 800789e:	bf00      	nop
 80078a0:	20000010 	.word	0x20000010

080078a4 <memcpy>:
 80078a4:	440a      	add	r2, r1
 80078a6:	4291      	cmp	r1, r2
 80078a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80078ac:	d100      	bne.n	80078b0 <memcpy+0xc>
 80078ae:	4770      	bx	lr
 80078b0:	b510      	push	{r4, lr}
 80078b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078ba:	4291      	cmp	r1, r2
 80078bc:	d1f9      	bne.n	80078b2 <memcpy+0xe>
 80078be:	bd10      	pop	{r4, pc}

080078c0 <memset>:
 80078c0:	4402      	add	r2, r0
 80078c2:	4603      	mov	r3, r0
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d100      	bne.n	80078ca <memset+0xa>
 80078c8:	4770      	bx	lr
 80078ca:	f803 1b01 	strb.w	r1, [r3], #1
 80078ce:	e7f9      	b.n	80078c4 <memset+0x4>

080078d0 <_free_r>:
 80078d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078d2:	2900      	cmp	r1, #0
 80078d4:	d044      	beq.n	8007960 <_free_r+0x90>
 80078d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078da:	9001      	str	r0, [sp, #4]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f1a1 0404 	sub.w	r4, r1, #4
 80078e2:	bfb8      	it	lt
 80078e4:	18e4      	addlt	r4, r4, r3
 80078e6:	f000 fb23 	bl	8007f30 <__malloc_lock>
 80078ea:	4a1e      	ldr	r2, [pc, #120]	; (8007964 <_free_r+0x94>)
 80078ec:	9801      	ldr	r0, [sp, #4]
 80078ee:	6813      	ldr	r3, [r2, #0]
 80078f0:	b933      	cbnz	r3, 8007900 <_free_r+0x30>
 80078f2:	6063      	str	r3, [r4, #4]
 80078f4:	6014      	str	r4, [r2, #0]
 80078f6:	b003      	add	sp, #12
 80078f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078fc:	f000 bb1e 	b.w	8007f3c <__malloc_unlock>
 8007900:	42a3      	cmp	r3, r4
 8007902:	d908      	bls.n	8007916 <_free_r+0x46>
 8007904:	6825      	ldr	r5, [r4, #0]
 8007906:	1961      	adds	r1, r4, r5
 8007908:	428b      	cmp	r3, r1
 800790a:	bf01      	itttt	eq
 800790c:	6819      	ldreq	r1, [r3, #0]
 800790e:	685b      	ldreq	r3, [r3, #4]
 8007910:	1949      	addeq	r1, r1, r5
 8007912:	6021      	streq	r1, [r4, #0]
 8007914:	e7ed      	b.n	80078f2 <_free_r+0x22>
 8007916:	461a      	mov	r2, r3
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	b10b      	cbz	r3, 8007920 <_free_r+0x50>
 800791c:	42a3      	cmp	r3, r4
 800791e:	d9fa      	bls.n	8007916 <_free_r+0x46>
 8007920:	6811      	ldr	r1, [r2, #0]
 8007922:	1855      	adds	r5, r2, r1
 8007924:	42a5      	cmp	r5, r4
 8007926:	d10b      	bne.n	8007940 <_free_r+0x70>
 8007928:	6824      	ldr	r4, [r4, #0]
 800792a:	4421      	add	r1, r4
 800792c:	1854      	adds	r4, r2, r1
 800792e:	42a3      	cmp	r3, r4
 8007930:	6011      	str	r1, [r2, #0]
 8007932:	d1e0      	bne.n	80078f6 <_free_r+0x26>
 8007934:	681c      	ldr	r4, [r3, #0]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	6053      	str	r3, [r2, #4]
 800793a:	4421      	add	r1, r4
 800793c:	6011      	str	r1, [r2, #0]
 800793e:	e7da      	b.n	80078f6 <_free_r+0x26>
 8007940:	d902      	bls.n	8007948 <_free_r+0x78>
 8007942:	230c      	movs	r3, #12
 8007944:	6003      	str	r3, [r0, #0]
 8007946:	e7d6      	b.n	80078f6 <_free_r+0x26>
 8007948:	6825      	ldr	r5, [r4, #0]
 800794a:	1961      	adds	r1, r4, r5
 800794c:	428b      	cmp	r3, r1
 800794e:	bf04      	itt	eq
 8007950:	6819      	ldreq	r1, [r3, #0]
 8007952:	685b      	ldreq	r3, [r3, #4]
 8007954:	6063      	str	r3, [r4, #4]
 8007956:	bf04      	itt	eq
 8007958:	1949      	addeq	r1, r1, r5
 800795a:	6021      	streq	r1, [r4, #0]
 800795c:	6054      	str	r4, [r2, #4]
 800795e:	e7ca      	b.n	80078f6 <_free_r+0x26>
 8007960:	b003      	add	sp, #12
 8007962:	bd30      	pop	{r4, r5, pc}
 8007964:	20004bcc 	.word	0x20004bcc

08007968 <sbrk_aligned>:
 8007968:	b570      	push	{r4, r5, r6, lr}
 800796a:	4e0e      	ldr	r6, [pc, #56]	; (80079a4 <sbrk_aligned+0x3c>)
 800796c:	460c      	mov	r4, r1
 800796e:	6831      	ldr	r1, [r6, #0]
 8007970:	4605      	mov	r5, r0
 8007972:	b911      	cbnz	r1, 800797a <sbrk_aligned+0x12>
 8007974:	f000 f962 	bl	8007c3c <_sbrk_r>
 8007978:	6030      	str	r0, [r6, #0]
 800797a:	4621      	mov	r1, r4
 800797c:	4628      	mov	r0, r5
 800797e:	f000 f95d 	bl	8007c3c <_sbrk_r>
 8007982:	1c43      	adds	r3, r0, #1
 8007984:	d00a      	beq.n	800799c <sbrk_aligned+0x34>
 8007986:	1cc4      	adds	r4, r0, #3
 8007988:	f024 0403 	bic.w	r4, r4, #3
 800798c:	42a0      	cmp	r0, r4
 800798e:	d007      	beq.n	80079a0 <sbrk_aligned+0x38>
 8007990:	1a21      	subs	r1, r4, r0
 8007992:	4628      	mov	r0, r5
 8007994:	f000 f952 	bl	8007c3c <_sbrk_r>
 8007998:	3001      	adds	r0, #1
 800799a:	d101      	bne.n	80079a0 <sbrk_aligned+0x38>
 800799c:	f04f 34ff 	mov.w	r4, #4294967295
 80079a0:	4620      	mov	r0, r4
 80079a2:	bd70      	pop	{r4, r5, r6, pc}
 80079a4:	20004bd0 	.word	0x20004bd0

080079a8 <_malloc_r>:
 80079a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ac:	1ccd      	adds	r5, r1, #3
 80079ae:	f025 0503 	bic.w	r5, r5, #3
 80079b2:	3508      	adds	r5, #8
 80079b4:	2d0c      	cmp	r5, #12
 80079b6:	bf38      	it	cc
 80079b8:	250c      	movcc	r5, #12
 80079ba:	2d00      	cmp	r5, #0
 80079bc:	4607      	mov	r7, r0
 80079be:	db01      	blt.n	80079c4 <_malloc_r+0x1c>
 80079c0:	42a9      	cmp	r1, r5
 80079c2:	d905      	bls.n	80079d0 <_malloc_r+0x28>
 80079c4:	230c      	movs	r3, #12
 80079c6:	603b      	str	r3, [r7, #0]
 80079c8:	2600      	movs	r6, #0
 80079ca:	4630      	mov	r0, r6
 80079cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079d0:	4e2e      	ldr	r6, [pc, #184]	; (8007a8c <_malloc_r+0xe4>)
 80079d2:	f000 faad 	bl	8007f30 <__malloc_lock>
 80079d6:	6833      	ldr	r3, [r6, #0]
 80079d8:	461c      	mov	r4, r3
 80079da:	bb34      	cbnz	r4, 8007a2a <_malloc_r+0x82>
 80079dc:	4629      	mov	r1, r5
 80079de:	4638      	mov	r0, r7
 80079e0:	f7ff ffc2 	bl	8007968 <sbrk_aligned>
 80079e4:	1c43      	adds	r3, r0, #1
 80079e6:	4604      	mov	r4, r0
 80079e8:	d14d      	bne.n	8007a86 <_malloc_r+0xde>
 80079ea:	6834      	ldr	r4, [r6, #0]
 80079ec:	4626      	mov	r6, r4
 80079ee:	2e00      	cmp	r6, #0
 80079f0:	d140      	bne.n	8007a74 <_malloc_r+0xcc>
 80079f2:	6823      	ldr	r3, [r4, #0]
 80079f4:	4631      	mov	r1, r6
 80079f6:	4638      	mov	r0, r7
 80079f8:	eb04 0803 	add.w	r8, r4, r3
 80079fc:	f000 f91e 	bl	8007c3c <_sbrk_r>
 8007a00:	4580      	cmp	r8, r0
 8007a02:	d13a      	bne.n	8007a7a <_malloc_r+0xd2>
 8007a04:	6821      	ldr	r1, [r4, #0]
 8007a06:	3503      	adds	r5, #3
 8007a08:	1a6d      	subs	r5, r5, r1
 8007a0a:	f025 0503 	bic.w	r5, r5, #3
 8007a0e:	3508      	adds	r5, #8
 8007a10:	2d0c      	cmp	r5, #12
 8007a12:	bf38      	it	cc
 8007a14:	250c      	movcc	r5, #12
 8007a16:	4629      	mov	r1, r5
 8007a18:	4638      	mov	r0, r7
 8007a1a:	f7ff ffa5 	bl	8007968 <sbrk_aligned>
 8007a1e:	3001      	adds	r0, #1
 8007a20:	d02b      	beq.n	8007a7a <_malloc_r+0xd2>
 8007a22:	6823      	ldr	r3, [r4, #0]
 8007a24:	442b      	add	r3, r5
 8007a26:	6023      	str	r3, [r4, #0]
 8007a28:	e00e      	b.n	8007a48 <_malloc_r+0xa0>
 8007a2a:	6822      	ldr	r2, [r4, #0]
 8007a2c:	1b52      	subs	r2, r2, r5
 8007a2e:	d41e      	bmi.n	8007a6e <_malloc_r+0xc6>
 8007a30:	2a0b      	cmp	r2, #11
 8007a32:	d916      	bls.n	8007a62 <_malloc_r+0xba>
 8007a34:	1961      	adds	r1, r4, r5
 8007a36:	42a3      	cmp	r3, r4
 8007a38:	6025      	str	r5, [r4, #0]
 8007a3a:	bf18      	it	ne
 8007a3c:	6059      	strne	r1, [r3, #4]
 8007a3e:	6863      	ldr	r3, [r4, #4]
 8007a40:	bf08      	it	eq
 8007a42:	6031      	streq	r1, [r6, #0]
 8007a44:	5162      	str	r2, [r4, r5]
 8007a46:	604b      	str	r3, [r1, #4]
 8007a48:	4638      	mov	r0, r7
 8007a4a:	f104 060b 	add.w	r6, r4, #11
 8007a4e:	f000 fa75 	bl	8007f3c <__malloc_unlock>
 8007a52:	f026 0607 	bic.w	r6, r6, #7
 8007a56:	1d23      	adds	r3, r4, #4
 8007a58:	1af2      	subs	r2, r6, r3
 8007a5a:	d0b6      	beq.n	80079ca <_malloc_r+0x22>
 8007a5c:	1b9b      	subs	r3, r3, r6
 8007a5e:	50a3      	str	r3, [r4, r2]
 8007a60:	e7b3      	b.n	80079ca <_malloc_r+0x22>
 8007a62:	6862      	ldr	r2, [r4, #4]
 8007a64:	42a3      	cmp	r3, r4
 8007a66:	bf0c      	ite	eq
 8007a68:	6032      	streq	r2, [r6, #0]
 8007a6a:	605a      	strne	r2, [r3, #4]
 8007a6c:	e7ec      	b.n	8007a48 <_malloc_r+0xa0>
 8007a6e:	4623      	mov	r3, r4
 8007a70:	6864      	ldr	r4, [r4, #4]
 8007a72:	e7b2      	b.n	80079da <_malloc_r+0x32>
 8007a74:	4634      	mov	r4, r6
 8007a76:	6876      	ldr	r6, [r6, #4]
 8007a78:	e7b9      	b.n	80079ee <_malloc_r+0x46>
 8007a7a:	230c      	movs	r3, #12
 8007a7c:	603b      	str	r3, [r7, #0]
 8007a7e:	4638      	mov	r0, r7
 8007a80:	f000 fa5c 	bl	8007f3c <__malloc_unlock>
 8007a84:	e7a1      	b.n	80079ca <_malloc_r+0x22>
 8007a86:	6025      	str	r5, [r4, #0]
 8007a88:	e7de      	b.n	8007a48 <_malloc_r+0xa0>
 8007a8a:	bf00      	nop
 8007a8c:	20004bcc 	.word	0x20004bcc

08007a90 <srand>:
 8007a90:	b538      	push	{r3, r4, r5, lr}
 8007a92:	4b10      	ldr	r3, [pc, #64]	; (8007ad4 <srand+0x44>)
 8007a94:	681d      	ldr	r5, [r3, #0]
 8007a96:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007a98:	4604      	mov	r4, r0
 8007a9a:	b9b3      	cbnz	r3, 8007aca <srand+0x3a>
 8007a9c:	2018      	movs	r0, #24
 8007a9e:	f7ff fef1 	bl	8007884 <malloc>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	63a8      	str	r0, [r5, #56]	; 0x38
 8007aa6:	b920      	cbnz	r0, 8007ab2 <srand+0x22>
 8007aa8:	4b0b      	ldr	r3, [pc, #44]	; (8007ad8 <srand+0x48>)
 8007aaa:	480c      	ldr	r0, [pc, #48]	; (8007adc <srand+0x4c>)
 8007aac:	2142      	movs	r1, #66	; 0x42
 8007aae:	f000 f92b 	bl	8007d08 <__assert_func>
 8007ab2:	490b      	ldr	r1, [pc, #44]	; (8007ae0 <srand+0x50>)
 8007ab4:	4b0b      	ldr	r3, [pc, #44]	; (8007ae4 <srand+0x54>)
 8007ab6:	e9c0 1300 	strd	r1, r3, [r0]
 8007aba:	4b0b      	ldr	r3, [pc, #44]	; (8007ae8 <srand+0x58>)
 8007abc:	6083      	str	r3, [r0, #8]
 8007abe:	230b      	movs	r3, #11
 8007ac0:	8183      	strh	r3, [r0, #12]
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	2001      	movs	r0, #1
 8007ac6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007aca:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007acc:	2200      	movs	r2, #0
 8007ace:	611c      	str	r4, [r3, #16]
 8007ad0:	615a      	str	r2, [r3, #20]
 8007ad2:	bd38      	pop	{r3, r4, r5, pc}
 8007ad4:	20000010 	.word	0x20000010
 8007ad8:	08008ef4 	.word	0x08008ef4
 8007adc:	08008f0b 	.word	0x08008f0b
 8007ae0:	abcd330e 	.word	0xabcd330e
 8007ae4:	e66d1234 	.word	0xe66d1234
 8007ae8:	0005deec 	.word	0x0005deec

08007aec <rand>:
 8007aec:	4b16      	ldr	r3, [pc, #88]	; (8007b48 <rand+0x5c>)
 8007aee:	b510      	push	{r4, lr}
 8007af0:	681c      	ldr	r4, [r3, #0]
 8007af2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007af4:	b9b3      	cbnz	r3, 8007b24 <rand+0x38>
 8007af6:	2018      	movs	r0, #24
 8007af8:	f7ff fec4 	bl	8007884 <malloc>
 8007afc:	63a0      	str	r0, [r4, #56]	; 0x38
 8007afe:	b928      	cbnz	r0, 8007b0c <rand+0x20>
 8007b00:	4602      	mov	r2, r0
 8007b02:	4b12      	ldr	r3, [pc, #72]	; (8007b4c <rand+0x60>)
 8007b04:	4812      	ldr	r0, [pc, #72]	; (8007b50 <rand+0x64>)
 8007b06:	214e      	movs	r1, #78	; 0x4e
 8007b08:	f000 f8fe 	bl	8007d08 <__assert_func>
 8007b0c:	4a11      	ldr	r2, [pc, #68]	; (8007b54 <rand+0x68>)
 8007b0e:	4b12      	ldr	r3, [pc, #72]	; (8007b58 <rand+0x6c>)
 8007b10:	e9c0 2300 	strd	r2, r3, [r0]
 8007b14:	4b11      	ldr	r3, [pc, #68]	; (8007b5c <rand+0x70>)
 8007b16:	6083      	str	r3, [r0, #8]
 8007b18:	230b      	movs	r3, #11
 8007b1a:	8183      	strh	r3, [r0, #12]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	2300      	movs	r3, #0
 8007b20:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007b24:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8007b26:	4a0e      	ldr	r2, [pc, #56]	; (8007b60 <rand+0x74>)
 8007b28:	6920      	ldr	r0, [r4, #16]
 8007b2a:	6963      	ldr	r3, [r4, #20]
 8007b2c:	490d      	ldr	r1, [pc, #52]	; (8007b64 <rand+0x78>)
 8007b2e:	4342      	muls	r2, r0
 8007b30:	fb01 2203 	mla	r2, r1, r3, r2
 8007b34:	fba0 0101 	umull	r0, r1, r0, r1
 8007b38:	1c43      	adds	r3, r0, #1
 8007b3a:	eb42 0001 	adc.w	r0, r2, r1
 8007b3e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8007b42:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007b46:	bd10      	pop	{r4, pc}
 8007b48:	20000010 	.word	0x20000010
 8007b4c:	08008ef4 	.word	0x08008ef4
 8007b50:	08008f0b 	.word	0x08008f0b
 8007b54:	abcd330e 	.word	0xabcd330e
 8007b58:	e66d1234 	.word	0xe66d1234
 8007b5c:	0005deec 	.word	0x0005deec
 8007b60:	5851f42d 	.word	0x5851f42d
 8007b64:	4c957f2d 	.word	0x4c957f2d

08007b68 <cleanup_glue>:
 8007b68:	b538      	push	{r3, r4, r5, lr}
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	6809      	ldr	r1, [r1, #0]
 8007b6e:	4605      	mov	r5, r0
 8007b70:	b109      	cbz	r1, 8007b76 <cleanup_glue+0xe>
 8007b72:	f7ff fff9 	bl	8007b68 <cleanup_glue>
 8007b76:	4621      	mov	r1, r4
 8007b78:	4628      	mov	r0, r5
 8007b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b7e:	f7ff bea7 	b.w	80078d0 <_free_r>
	...

08007b84 <_reclaim_reent>:
 8007b84:	4b2c      	ldr	r3, [pc, #176]	; (8007c38 <_reclaim_reent+0xb4>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4283      	cmp	r3, r0
 8007b8a:	b570      	push	{r4, r5, r6, lr}
 8007b8c:	4604      	mov	r4, r0
 8007b8e:	d051      	beq.n	8007c34 <_reclaim_reent+0xb0>
 8007b90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007b92:	b143      	cbz	r3, 8007ba6 <_reclaim_reent+0x22>
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d14a      	bne.n	8007c30 <_reclaim_reent+0xac>
 8007b9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b9c:	6819      	ldr	r1, [r3, #0]
 8007b9e:	b111      	cbz	r1, 8007ba6 <_reclaim_reent+0x22>
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f7ff fe95 	bl	80078d0 <_free_r>
 8007ba6:	6961      	ldr	r1, [r4, #20]
 8007ba8:	b111      	cbz	r1, 8007bb0 <_reclaim_reent+0x2c>
 8007baa:	4620      	mov	r0, r4
 8007bac:	f7ff fe90 	bl	80078d0 <_free_r>
 8007bb0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007bb2:	b111      	cbz	r1, 8007bba <_reclaim_reent+0x36>
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	f7ff fe8b 	bl	80078d0 <_free_r>
 8007bba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007bbc:	b111      	cbz	r1, 8007bc4 <_reclaim_reent+0x40>
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	f7ff fe86 	bl	80078d0 <_free_r>
 8007bc4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007bc6:	b111      	cbz	r1, 8007bce <_reclaim_reent+0x4a>
 8007bc8:	4620      	mov	r0, r4
 8007bca:	f7ff fe81 	bl	80078d0 <_free_r>
 8007bce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007bd0:	b111      	cbz	r1, 8007bd8 <_reclaim_reent+0x54>
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f7ff fe7c 	bl	80078d0 <_free_r>
 8007bd8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007bda:	b111      	cbz	r1, 8007be2 <_reclaim_reent+0x5e>
 8007bdc:	4620      	mov	r0, r4
 8007bde:	f7ff fe77 	bl	80078d0 <_free_r>
 8007be2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007be4:	b111      	cbz	r1, 8007bec <_reclaim_reent+0x68>
 8007be6:	4620      	mov	r0, r4
 8007be8:	f7ff fe72 	bl	80078d0 <_free_r>
 8007bec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bee:	b111      	cbz	r1, 8007bf6 <_reclaim_reent+0x72>
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f7ff fe6d 	bl	80078d0 <_free_r>
 8007bf6:	69a3      	ldr	r3, [r4, #24]
 8007bf8:	b1e3      	cbz	r3, 8007c34 <_reclaim_reent+0xb0>
 8007bfa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	4798      	blx	r3
 8007c00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007c02:	b1b9      	cbz	r1, 8007c34 <_reclaim_reent+0xb0>
 8007c04:	4620      	mov	r0, r4
 8007c06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c0a:	f7ff bfad 	b.w	8007b68 <cleanup_glue>
 8007c0e:	5949      	ldr	r1, [r1, r5]
 8007c10:	b941      	cbnz	r1, 8007c24 <_reclaim_reent+0xa0>
 8007c12:	3504      	adds	r5, #4
 8007c14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c16:	2d80      	cmp	r5, #128	; 0x80
 8007c18:	68d9      	ldr	r1, [r3, #12]
 8007c1a:	d1f8      	bne.n	8007c0e <_reclaim_reent+0x8a>
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f7ff fe57 	bl	80078d0 <_free_r>
 8007c22:	e7ba      	b.n	8007b9a <_reclaim_reent+0x16>
 8007c24:	680e      	ldr	r6, [r1, #0]
 8007c26:	4620      	mov	r0, r4
 8007c28:	f7ff fe52 	bl	80078d0 <_free_r>
 8007c2c:	4631      	mov	r1, r6
 8007c2e:	e7ef      	b.n	8007c10 <_reclaim_reent+0x8c>
 8007c30:	2500      	movs	r5, #0
 8007c32:	e7ef      	b.n	8007c14 <_reclaim_reent+0x90>
 8007c34:	bd70      	pop	{r4, r5, r6, pc}
 8007c36:	bf00      	nop
 8007c38:	20000010 	.word	0x20000010

08007c3c <_sbrk_r>:
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	4d06      	ldr	r5, [pc, #24]	; (8007c58 <_sbrk_r+0x1c>)
 8007c40:	2300      	movs	r3, #0
 8007c42:	4604      	mov	r4, r0
 8007c44:	4608      	mov	r0, r1
 8007c46:	602b      	str	r3, [r5, #0]
 8007c48:	f7fa f908 	bl	8001e5c <_sbrk>
 8007c4c:	1c43      	adds	r3, r0, #1
 8007c4e:	d102      	bne.n	8007c56 <_sbrk_r+0x1a>
 8007c50:	682b      	ldr	r3, [r5, #0]
 8007c52:	b103      	cbz	r3, 8007c56 <_sbrk_r+0x1a>
 8007c54:	6023      	str	r3, [r4, #0]
 8007c56:	bd38      	pop	{r3, r4, r5, pc}
 8007c58:	20004bd4 	.word	0x20004bd4

08007c5c <__sread>:
 8007c5c:	b510      	push	{r4, lr}
 8007c5e:	460c      	mov	r4, r1
 8007c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c64:	f000 fc5e 	bl	8008524 <_read_r>
 8007c68:	2800      	cmp	r0, #0
 8007c6a:	bfab      	itete	ge
 8007c6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c6e:	89a3      	ldrhlt	r3, [r4, #12]
 8007c70:	181b      	addge	r3, r3, r0
 8007c72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c76:	bfac      	ite	ge
 8007c78:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c7a:	81a3      	strhlt	r3, [r4, #12]
 8007c7c:	bd10      	pop	{r4, pc}

08007c7e <__swrite>:
 8007c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c82:	461f      	mov	r7, r3
 8007c84:	898b      	ldrh	r3, [r1, #12]
 8007c86:	05db      	lsls	r3, r3, #23
 8007c88:	4605      	mov	r5, r0
 8007c8a:	460c      	mov	r4, r1
 8007c8c:	4616      	mov	r6, r2
 8007c8e:	d505      	bpl.n	8007c9c <__swrite+0x1e>
 8007c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c94:	2302      	movs	r3, #2
 8007c96:	2200      	movs	r2, #0
 8007c98:	f000 f938 	bl	8007f0c <_lseek_r>
 8007c9c:	89a3      	ldrh	r3, [r4, #12]
 8007c9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ca2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ca6:	81a3      	strh	r3, [r4, #12]
 8007ca8:	4632      	mov	r2, r6
 8007caa:	463b      	mov	r3, r7
 8007cac:	4628      	mov	r0, r5
 8007cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb2:	f000 b817 	b.w	8007ce4 <_write_r>

08007cb6 <__sseek>:
 8007cb6:	b510      	push	{r4, lr}
 8007cb8:	460c      	mov	r4, r1
 8007cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cbe:	f000 f925 	bl	8007f0c <_lseek_r>
 8007cc2:	1c43      	adds	r3, r0, #1
 8007cc4:	89a3      	ldrh	r3, [r4, #12]
 8007cc6:	bf15      	itete	ne
 8007cc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007cca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007cce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007cd2:	81a3      	strheq	r3, [r4, #12]
 8007cd4:	bf18      	it	ne
 8007cd6:	81a3      	strhne	r3, [r4, #12]
 8007cd8:	bd10      	pop	{r4, pc}

08007cda <__sclose>:
 8007cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cde:	f000 b831 	b.w	8007d44 <_close_r>
	...

08007ce4 <_write_r>:
 8007ce4:	b538      	push	{r3, r4, r5, lr}
 8007ce6:	4d07      	ldr	r5, [pc, #28]	; (8007d04 <_write_r+0x20>)
 8007ce8:	4604      	mov	r4, r0
 8007cea:	4608      	mov	r0, r1
 8007cec:	4611      	mov	r1, r2
 8007cee:	2200      	movs	r2, #0
 8007cf0:	602a      	str	r2, [r5, #0]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	f7fa f861 	bl	8001dba <_write>
 8007cf8:	1c43      	adds	r3, r0, #1
 8007cfa:	d102      	bne.n	8007d02 <_write_r+0x1e>
 8007cfc:	682b      	ldr	r3, [r5, #0]
 8007cfe:	b103      	cbz	r3, 8007d02 <_write_r+0x1e>
 8007d00:	6023      	str	r3, [r4, #0]
 8007d02:	bd38      	pop	{r3, r4, r5, pc}
 8007d04:	20004bd4 	.word	0x20004bd4

08007d08 <__assert_func>:
 8007d08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d0a:	4614      	mov	r4, r2
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	4b09      	ldr	r3, [pc, #36]	; (8007d34 <__assert_func+0x2c>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4605      	mov	r5, r0
 8007d14:	68d8      	ldr	r0, [r3, #12]
 8007d16:	b14c      	cbz	r4, 8007d2c <__assert_func+0x24>
 8007d18:	4b07      	ldr	r3, [pc, #28]	; (8007d38 <__assert_func+0x30>)
 8007d1a:	9100      	str	r1, [sp, #0]
 8007d1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d20:	4906      	ldr	r1, [pc, #24]	; (8007d3c <__assert_func+0x34>)
 8007d22:	462b      	mov	r3, r5
 8007d24:	f000 f8e0 	bl	8007ee8 <fiprintf>
 8007d28:	f000 fcce 	bl	80086c8 <abort>
 8007d2c:	4b04      	ldr	r3, [pc, #16]	; (8007d40 <__assert_func+0x38>)
 8007d2e:	461c      	mov	r4, r3
 8007d30:	e7f3      	b.n	8007d1a <__assert_func+0x12>
 8007d32:	bf00      	nop
 8007d34:	20000010 	.word	0x20000010
 8007d38:	08008f66 	.word	0x08008f66
 8007d3c:	08008f73 	.word	0x08008f73
 8007d40:	08008fa1 	.word	0x08008fa1

08007d44 <_close_r>:
 8007d44:	b538      	push	{r3, r4, r5, lr}
 8007d46:	4d06      	ldr	r5, [pc, #24]	; (8007d60 <_close_r+0x1c>)
 8007d48:	2300      	movs	r3, #0
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	4608      	mov	r0, r1
 8007d4e:	602b      	str	r3, [r5, #0]
 8007d50:	f7fa f84f 	bl	8001df2 <_close>
 8007d54:	1c43      	adds	r3, r0, #1
 8007d56:	d102      	bne.n	8007d5e <_close_r+0x1a>
 8007d58:	682b      	ldr	r3, [r5, #0]
 8007d5a:	b103      	cbz	r3, 8007d5e <_close_r+0x1a>
 8007d5c:	6023      	str	r3, [r4, #0]
 8007d5e:	bd38      	pop	{r3, r4, r5, pc}
 8007d60:	20004bd4 	.word	0x20004bd4

08007d64 <__sflush_r>:
 8007d64:	898a      	ldrh	r2, [r1, #12]
 8007d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d6a:	4605      	mov	r5, r0
 8007d6c:	0710      	lsls	r0, r2, #28
 8007d6e:	460c      	mov	r4, r1
 8007d70:	d458      	bmi.n	8007e24 <__sflush_r+0xc0>
 8007d72:	684b      	ldr	r3, [r1, #4]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	dc05      	bgt.n	8007d84 <__sflush_r+0x20>
 8007d78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	dc02      	bgt.n	8007d84 <__sflush_r+0x20>
 8007d7e:	2000      	movs	r0, #0
 8007d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d86:	2e00      	cmp	r6, #0
 8007d88:	d0f9      	beq.n	8007d7e <__sflush_r+0x1a>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d90:	682f      	ldr	r7, [r5, #0]
 8007d92:	602b      	str	r3, [r5, #0]
 8007d94:	d032      	beq.n	8007dfc <__sflush_r+0x98>
 8007d96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d98:	89a3      	ldrh	r3, [r4, #12]
 8007d9a:	075a      	lsls	r2, r3, #29
 8007d9c:	d505      	bpl.n	8007daa <__sflush_r+0x46>
 8007d9e:	6863      	ldr	r3, [r4, #4]
 8007da0:	1ac0      	subs	r0, r0, r3
 8007da2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007da4:	b10b      	cbz	r3, 8007daa <__sflush_r+0x46>
 8007da6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007da8:	1ac0      	subs	r0, r0, r3
 8007daa:	2300      	movs	r3, #0
 8007dac:	4602      	mov	r2, r0
 8007dae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007db0:	6a21      	ldr	r1, [r4, #32]
 8007db2:	4628      	mov	r0, r5
 8007db4:	47b0      	blx	r6
 8007db6:	1c43      	adds	r3, r0, #1
 8007db8:	89a3      	ldrh	r3, [r4, #12]
 8007dba:	d106      	bne.n	8007dca <__sflush_r+0x66>
 8007dbc:	6829      	ldr	r1, [r5, #0]
 8007dbe:	291d      	cmp	r1, #29
 8007dc0:	d82c      	bhi.n	8007e1c <__sflush_r+0xb8>
 8007dc2:	4a2a      	ldr	r2, [pc, #168]	; (8007e6c <__sflush_r+0x108>)
 8007dc4:	40ca      	lsrs	r2, r1
 8007dc6:	07d6      	lsls	r6, r2, #31
 8007dc8:	d528      	bpl.n	8007e1c <__sflush_r+0xb8>
 8007dca:	2200      	movs	r2, #0
 8007dcc:	6062      	str	r2, [r4, #4]
 8007dce:	04d9      	lsls	r1, r3, #19
 8007dd0:	6922      	ldr	r2, [r4, #16]
 8007dd2:	6022      	str	r2, [r4, #0]
 8007dd4:	d504      	bpl.n	8007de0 <__sflush_r+0x7c>
 8007dd6:	1c42      	adds	r2, r0, #1
 8007dd8:	d101      	bne.n	8007dde <__sflush_r+0x7a>
 8007dda:	682b      	ldr	r3, [r5, #0]
 8007ddc:	b903      	cbnz	r3, 8007de0 <__sflush_r+0x7c>
 8007dde:	6560      	str	r0, [r4, #84]	; 0x54
 8007de0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007de2:	602f      	str	r7, [r5, #0]
 8007de4:	2900      	cmp	r1, #0
 8007de6:	d0ca      	beq.n	8007d7e <__sflush_r+0x1a>
 8007de8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dec:	4299      	cmp	r1, r3
 8007dee:	d002      	beq.n	8007df6 <__sflush_r+0x92>
 8007df0:	4628      	mov	r0, r5
 8007df2:	f7ff fd6d 	bl	80078d0 <_free_r>
 8007df6:	2000      	movs	r0, #0
 8007df8:	6360      	str	r0, [r4, #52]	; 0x34
 8007dfa:	e7c1      	b.n	8007d80 <__sflush_r+0x1c>
 8007dfc:	6a21      	ldr	r1, [r4, #32]
 8007dfe:	2301      	movs	r3, #1
 8007e00:	4628      	mov	r0, r5
 8007e02:	47b0      	blx	r6
 8007e04:	1c41      	adds	r1, r0, #1
 8007e06:	d1c7      	bne.n	8007d98 <__sflush_r+0x34>
 8007e08:	682b      	ldr	r3, [r5, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d0c4      	beq.n	8007d98 <__sflush_r+0x34>
 8007e0e:	2b1d      	cmp	r3, #29
 8007e10:	d001      	beq.n	8007e16 <__sflush_r+0xb2>
 8007e12:	2b16      	cmp	r3, #22
 8007e14:	d101      	bne.n	8007e1a <__sflush_r+0xb6>
 8007e16:	602f      	str	r7, [r5, #0]
 8007e18:	e7b1      	b.n	8007d7e <__sflush_r+0x1a>
 8007e1a:	89a3      	ldrh	r3, [r4, #12]
 8007e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e20:	81a3      	strh	r3, [r4, #12]
 8007e22:	e7ad      	b.n	8007d80 <__sflush_r+0x1c>
 8007e24:	690f      	ldr	r7, [r1, #16]
 8007e26:	2f00      	cmp	r7, #0
 8007e28:	d0a9      	beq.n	8007d7e <__sflush_r+0x1a>
 8007e2a:	0793      	lsls	r3, r2, #30
 8007e2c:	680e      	ldr	r6, [r1, #0]
 8007e2e:	bf08      	it	eq
 8007e30:	694b      	ldreq	r3, [r1, #20]
 8007e32:	600f      	str	r7, [r1, #0]
 8007e34:	bf18      	it	ne
 8007e36:	2300      	movne	r3, #0
 8007e38:	eba6 0807 	sub.w	r8, r6, r7
 8007e3c:	608b      	str	r3, [r1, #8]
 8007e3e:	f1b8 0f00 	cmp.w	r8, #0
 8007e42:	dd9c      	ble.n	8007d7e <__sflush_r+0x1a>
 8007e44:	6a21      	ldr	r1, [r4, #32]
 8007e46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e48:	4643      	mov	r3, r8
 8007e4a:	463a      	mov	r2, r7
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	47b0      	blx	r6
 8007e50:	2800      	cmp	r0, #0
 8007e52:	dc06      	bgt.n	8007e62 <__sflush_r+0xfe>
 8007e54:	89a3      	ldrh	r3, [r4, #12]
 8007e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e5a:	81a3      	strh	r3, [r4, #12]
 8007e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e60:	e78e      	b.n	8007d80 <__sflush_r+0x1c>
 8007e62:	4407      	add	r7, r0
 8007e64:	eba8 0800 	sub.w	r8, r8, r0
 8007e68:	e7e9      	b.n	8007e3e <__sflush_r+0xda>
 8007e6a:	bf00      	nop
 8007e6c:	20400001 	.word	0x20400001

08007e70 <_fflush_r>:
 8007e70:	b538      	push	{r3, r4, r5, lr}
 8007e72:	690b      	ldr	r3, [r1, #16]
 8007e74:	4605      	mov	r5, r0
 8007e76:	460c      	mov	r4, r1
 8007e78:	b913      	cbnz	r3, 8007e80 <_fflush_r+0x10>
 8007e7a:	2500      	movs	r5, #0
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	bd38      	pop	{r3, r4, r5, pc}
 8007e80:	b118      	cbz	r0, 8007e8a <_fflush_r+0x1a>
 8007e82:	6983      	ldr	r3, [r0, #24]
 8007e84:	b90b      	cbnz	r3, 8007e8a <_fflush_r+0x1a>
 8007e86:	f7ff fc37 	bl	80076f8 <__sinit>
 8007e8a:	4b14      	ldr	r3, [pc, #80]	; (8007edc <_fflush_r+0x6c>)
 8007e8c:	429c      	cmp	r4, r3
 8007e8e:	d11b      	bne.n	8007ec8 <_fflush_r+0x58>
 8007e90:	686c      	ldr	r4, [r5, #4]
 8007e92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d0ef      	beq.n	8007e7a <_fflush_r+0xa>
 8007e9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e9c:	07d0      	lsls	r0, r2, #31
 8007e9e:	d404      	bmi.n	8007eaa <_fflush_r+0x3a>
 8007ea0:	0599      	lsls	r1, r3, #22
 8007ea2:	d402      	bmi.n	8007eaa <_fflush_r+0x3a>
 8007ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ea6:	f7ff fcea 	bl	800787e <__retarget_lock_acquire_recursive>
 8007eaa:	4628      	mov	r0, r5
 8007eac:	4621      	mov	r1, r4
 8007eae:	f7ff ff59 	bl	8007d64 <__sflush_r>
 8007eb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007eb4:	07da      	lsls	r2, r3, #31
 8007eb6:	4605      	mov	r5, r0
 8007eb8:	d4e0      	bmi.n	8007e7c <_fflush_r+0xc>
 8007eba:	89a3      	ldrh	r3, [r4, #12]
 8007ebc:	059b      	lsls	r3, r3, #22
 8007ebe:	d4dd      	bmi.n	8007e7c <_fflush_r+0xc>
 8007ec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ec2:	f7ff fcdd 	bl	8007880 <__retarget_lock_release_recursive>
 8007ec6:	e7d9      	b.n	8007e7c <_fflush_r+0xc>
 8007ec8:	4b05      	ldr	r3, [pc, #20]	; (8007ee0 <_fflush_r+0x70>)
 8007eca:	429c      	cmp	r4, r3
 8007ecc:	d101      	bne.n	8007ed2 <_fflush_r+0x62>
 8007ece:	68ac      	ldr	r4, [r5, #8]
 8007ed0:	e7df      	b.n	8007e92 <_fflush_r+0x22>
 8007ed2:	4b04      	ldr	r3, [pc, #16]	; (8007ee4 <_fflush_r+0x74>)
 8007ed4:	429c      	cmp	r4, r3
 8007ed6:	bf08      	it	eq
 8007ed8:	68ec      	ldreq	r4, [r5, #12]
 8007eda:	e7da      	b.n	8007e92 <_fflush_r+0x22>
 8007edc:	08008eb0 	.word	0x08008eb0
 8007ee0:	08008ed0 	.word	0x08008ed0
 8007ee4:	08008e90 	.word	0x08008e90

08007ee8 <fiprintf>:
 8007ee8:	b40e      	push	{r1, r2, r3}
 8007eea:	b503      	push	{r0, r1, lr}
 8007eec:	4601      	mov	r1, r0
 8007eee:	ab03      	add	r3, sp, #12
 8007ef0:	4805      	ldr	r0, [pc, #20]	; (8007f08 <fiprintf+0x20>)
 8007ef2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ef6:	6800      	ldr	r0, [r0, #0]
 8007ef8:	9301      	str	r3, [sp, #4]
 8007efa:	f000 f84f 	bl	8007f9c <_vfiprintf_r>
 8007efe:	b002      	add	sp, #8
 8007f00:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f04:	b003      	add	sp, #12
 8007f06:	4770      	bx	lr
 8007f08:	20000010 	.word	0x20000010

08007f0c <_lseek_r>:
 8007f0c:	b538      	push	{r3, r4, r5, lr}
 8007f0e:	4d07      	ldr	r5, [pc, #28]	; (8007f2c <_lseek_r+0x20>)
 8007f10:	4604      	mov	r4, r0
 8007f12:	4608      	mov	r0, r1
 8007f14:	4611      	mov	r1, r2
 8007f16:	2200      	movs	r2, #0
 8007f18:	602a      	str	r2, [r5, #0]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	f7f9 ff90 	bl	8001e40 <_lseek>
 8007f20:	1c43      	adds	r3, r0, #1
 8007f22:	d102      	bne.n	8007f2a <_lseek_r+0x1e>
 8007f24:	682b      	ldr	r3, [r5, #0]
 8007f26:	b103      	cbz	r3, 8007f2a <_lseek_r+0x1e>
 8007f28:	6023      	str	r3, [r4, #0]
 8007f2a:	bd38      	pop	{r3, r4, r5, pc}
 8007f2c:	20004bd4 	.word	0x20004bd4

08007f30 <__malloc_lock>:
 8007f30:	4801      	ldr	r0, [pc, #4]	; (8007f38 <__malloc_lock+0x8>)
 8007f32:	f7ff bca4 	b.w	800787e <__retarget_lock_acquire_recursive>
 8007f36:	bf00      	nop
 8007f38:	20004bc8 	.word	0x20004bc8

08007f3c <__malloc_unlock>:
 8007f3c:	4801      	ldr	r0, [pc, #4]	; (8007f44 <__malloc_unlock+0x8>)
 8007f3e:	f7ff bc9f 	b.w	8007880 <__retarget_lock_release_recursive>
 8007f42:	bf00      	nop
 8007f44:	20004bc8 	.word	0x20004bc8

08007f48 <__sfputc_r>:
 8007f48:	6893      	ldr	r3, [r2, #8]
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	b410      	push	{r4}
 8007f50:	6093      	str	r3, [r2, #8]
 8007f52:	da08      	bge.n	8007f66 <__sfputc_r+0x1e>
 8007f54:	6994      	ldr	r4, [r2, #24]
 8007f56:	42a3      	cmp	r3, r4
 8007f58:	db01      	blt.n	8007f5e <__sfputc_r+0x16>
 8007f5a:	290a      	cmp	r1, #10
 8007f5c:	d103      	bne.n	8007f66 <__sfputc_r+0x1e>
 8007f5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f62:	f000 baf1 	b.w	8008548 <__swbuf_r>
 8007f66:	6813      	ldr	r3, [r2, #0]
 8007f68:	1c58      	adds	r0, r3, #1
 8007f6a:	6010      	str	r0, [r2, #0]
 8007f6c:	7019      	strb	r1, [r3, #0]
 8007f6e:	4608      	mov	r0, r1
 8007f70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f74:	4770      	bx	lr

08007f76 <__sfputs_r>:
 8007f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f78:	4606      	mov	r6, r0
 8007f7a:	460f      	mov	r7, r1
 8007f7c:	4614      	mov	r4, r2
 8007f7e:	18d5      	adds	r5, r2, r3
 8007f80:	42ac      	cmp	r4, r5
 8007f82:	d101      	bne.n	8007f88 <__sfputs_r+0x12>
 8007f84:	2000      	movs	r0, #0
 8007f86:	e007      	b.n	8007f98 <__sfputs_r+0x22>
 8007f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f8c:	463a      	mov	r2, r7
 8007f8e:	4630      	mov	r0, r6
 8007f90:	f7ff ffda 	bl	8007f48 <__sfputc_r>
 8007f94:	1c43      	adds	r3, r0, #1
 8007f96:	d1f3      	bne.n	8007f80 <__sfputs_r+0xa>
 8007f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f9c <_vfiprintf_r>:
 8007f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa0:	460d      	mov	r5, r1
 8007fa2:	b09d      	sub	sp, #116	; 0x74
 8007fa4:	4614      	mov	r4, r2
 8007fa6:	4698      	mov	r8, r3
 8007fa8:	4606      	mov	r6, r0
 8007faa:	b118      	cbz	r0, 8007fb4 <_vfiprintf_r+0x18>
 8007fac:	6983      	ldr	r3, [r0, #24]
 8007fae:	b90b      	cbnz	r3, 8007fb4 <_vfiprintf_r+0x18>
 8007fb0:	f7ff fba2 	bl	80076f8 <__sinit>
 8007fb4:	4b89      	ldr	r3, [pc, #548]	; (80081dc <_vfiprintf_r+0x240>)
 8007fb6:	429d      	cmp	r5, r3
 8007fb8:	d11b      	bne.n	8007ff2 <_vfiprintf_r+0x56>
 8007fba:	6875      	ldr	r5, [r6, #4]
 8007fbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fbe:	07d9      	lsls	r1, r3, #31
 8007fc0:	d405      	bmi.n	8007fce <_vfiprintf_r+0x32>
 8007fc2:	89ab      	ldrh	r3, [r5, #12]
 8007fc4:	059a      	lsls	r2, r3, #22
 8007fc6:	d402      	bmi.n	8007fce <_vfiprintf_r+0x32>
 8007fc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fca:	f7ff fc58 	bl	800787e <__retarget_lock_acquire_recursive>
 8007fce:	89ab      	ldrh	r3, [r5, #12]
 8007fd0:	071b      	lsls	r3, r3, #28
 8007fd2:	d501      	bpl.n	8007fd8 <_vfiprintf_r+0x3c>
 8007fd4:	692b      	ldr	r3, [r5, #16]
 8007fd6:	b9eb      	cbnz	r3, 8008014 <_vfiprintf_r+0x78>
 8007fd8:	4629      	mov	r1, r5
 8007fda:	4630      	mov	r0, r6
 8007fdc:	f000 fb06 	bl	80085ec <__swsetup_r>
 8007fe0:	b1c0      	cbz	r0, 8008014 <_vfiprintf_r+0x78>
 8007fe2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fe4:	07dc      	lsls	r4, r3, #31
 8007fe6:	d50e      	bpl.n	8008006 <_vfiprintf_r+0x6a>
 8007fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fec:	b01d      	add	sp, #116	; 0x74
 8007fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ff2:	4b7b      	ldr	r3, [pc, #492]	; (80081e0 <_vfiprintf_r+0x244>)
 8007ff4:	429d      	cmp	r5, r3
 8007ff6:	d101      	bne.n	8007ffc <_vfiprintf_r+0x60>
 8007ff8:	68b5      	ldr	r5, [r6, #8]
 8007ffa:	e7df      	b.n	8007fbc <_vfiprintf_r+0x20>
 8007ffc:	4b79      	ldr	r3, [pc, #484]	; (80081e4 <_vfiprintf_r+0x248>)
 8007ffe:	429d      	cmp	r5, r3
 8008000:	bf08      	it	eq
 8008002:	68f5      	ldreq	r5, [r6, #12]
 8008004:	e7da      	b.n	8007fbc <_vfiprintf_r+0x20>
 8008006:	89ab      	ldrh	r3, [r5, #12]
 8008008:	0598      	lsls	r0, r3, #22
 800800a:	d4ed      	bmi.n	8007fe8 <_vfiprintf_r+0x4c>
 800800c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800800e:	f7ff fc37 	bl	8007880 <__retarget_lock_release_recursive>
 8008012:	e7e9      	b.n	8007fe8 <_vfiprintf_r+0x4c>
 8008014:	2300      	movs	r3, #0
 8008016:	9309      	str	r3, [sp, #36]	; 0x24
 8008018:	2320      	movs	r3, #32
 800801a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800801e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008022:	2330      	movs	r3, #48	; 0x30
 8008024:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80081e8 <_vfiprintf_r+0x24c>
 8008028:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800802c:	f04f 0901 	mov.w	r9, #1
 8008030:	4623      	mov	r3, r4
 8008032:	469a      	mov	sl, r3
 8008034:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008038:	b10a      	cbz	r2, 800803e <_vfiprintf_r+0xa2>
 800803a:	2a25      	cmp	r2, #37	; 0x25
 800803c:	d1f9      	bne.n	8008032 <_vfiprintf_r+0x96>
 800803e:	ebba 0b04 	subs.w	fp, sl, r4
 8008042:	d00b      	beq.n	800805c <_vfiprintf_r+0xc0>
 8008044:	465b      	mov	r3, fp
 8008046:	4622      	mov	r2, r4
 8008048:	4629      	mov	r1, r5
 800804a:	4630      	mov	r0, r6
 800804c:	f7ff ff93 	bl	8007f76 <__sfputs_r>
 8008050:	3001      	adds	r0, #1
 8008052:	f000 80aa 	beq.w	80081aa <_vfiprintf_r+0x20e>
 8008056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008058:	445a      	add	r2, fp
 800805a:	9209      	str	r2, [sp, #36]	; 0x24
 800805c:	f89a 3000 	ldrb.w	r3, [sl]
 8008060:	2b00      	cmp	r3, #0
 8008062:	f000 80a2 	beq.w	80081aa <_vfiprintf_r+0x20e>
 8008066:	2300      	movs	r3, #0
 8008068:	f04f 32ff 	mov.w	r2, #4294967295
 800806c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008070:	f10a 0a01 	add.w	sl, sl, #1
 8008074:	9304      	str	r3, [sp, #16]
 8008076:	9307      	str	r3, [sp, #28]
 8008078:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800807c:	931a      	str	r3, [sp, #104]	; 0x68
 800807e:	4654      	mov	r4, sl
 8008080:	2205      	movs	r2, #5
 8008082:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008086:	4858      	ldr	r0, [pc, #352]	; (80081e8 <_vfiprintf_r+0x24c>)
 8008088:	f7f8 f8aa 	bl	80001e0 <memchr>
 800808c:	9a04      	ldr	r2, [sp, #16]
 800808e:	b9d8      	cbnz	r0, 80080c8 <_vfiprintf_r+0x12c>
 8008090:	06d1      	lsls	r1, r2, #27
 8008092:	bf44      	itt	mi
 8008094:	2320      	movmi	r3, #32
 8008096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800809a:	0713      	lsls	r3, r2, #28
 800809c:	bf44      	itt	mi
 800809e:	232b      	movmi	r3, #43	; 0x2b
 80080a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080a4:	f89a 3000 	ldrb.w	r3, [sl]
 80080a8:	2b2a      	cmp	r3, #42	; 0x2a
 80080aa:	d015      	beq.n	80080d8 <_vfiprintf_r+0x13c>
 80080ac:	9a07      	ldr	r2, [sp, #28]
 80080ae:	4654      	mov	r4, sl
 80080b0:	2000      	movs	r0, #0
 80080b2:	f04f 0c0a 	mov.w	ip, #10
 80080b6:	4621      	mov	r1, r4
 80080b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080bc:	3b30      	subs	r3, #48	; 0x30
 80080be:	2b09      	cmp	r3, #9
 80080c0:	d94e      	bls.n	8008160 <_vfiprintf_r+0x1c4>
 80080c2:	b1b0      	cbz	r0, 80080f2 <_vfiprintf_r+0x156>
 80080c4:	9207      	str	r2, [sp, #28]
 80080c6:	e014      	b.n	80080f2 <_vfiprintf_r+0x156>
 80080c8:	eba0 0308 	sub.w	r3, r0, r8
 80080cc:	fa09 f303 	lsl.w	r3, r9, r3
 80080d0:	4313      	orrs	r3, r2
 80080d2:	9304      	str	r3, [sp, #16]
 80080d4:	46a2      	mov	sl, r4
 80080d6:	e7d2      	b.n	800807e <_vfiprintf_r+0xe2>
 80080d8:	9b03      	ldr	r3, [sp, #12]
 80080da:	1d19      	adds	r1, r3, #4
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	9103      	str	r1, [sp, #12]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	bfbb      	ittet	lt
 80080e4:	425b      	neglt	r3, r3
 80080e6:	f042 0202 	orrlt.w	r2, r2, #2
 80080ea:	9307      	strge	r3, [sp, #28]
 80080ec:	9307      	strlt	r3, [sp, #28]
 80080ee:	bfb8      	it	lt
 80080f0:	9204      	strlt	r2, [sp, #16]
 80080f2:	7823      	ldrb	r3, [r4, #0]
 80080f4:	2b2e      	cmp	r3, #46	; 0x2e
 80080f6:	d10c      	bne.n	8008112 <_vfiprintf_r+0x176>
 80080f8:	7863      	ldrb	r3, [r4, #1]
 80080fa:	2b2a      	cmp	r3, #42	; 0x2a
 80080fc:	d135      	bne.n	800816a <_vfiprintf_r+0x1ce>
 80080fe:	9b03      	ldr	r3, [sp, #12]
 8008100:	1d1a      	adds	r2, r3, #4
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	9203      	str	r2, [sp, #12]
 8008106:	2b00      	cmp	r3, #0
 8008108:	bfb8      	it	lt
 800810a:	f04f 33ff 	movlt.w	r3, #4294967295
 800810e:	3402      	adds	r4, #2
 8008110:	9305      	str	r3, [sp, #20]
 8008112:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80081f8 <_vfiprintf_r+0x25c>
 8008116:	7821      	ldrb	r1, [r4, #0]
 8008118:	2203      	movs	r2, #3
 800811a:	4650      	mov	r0, sl
 800811c:	f7f8 f860 	bl	80001e0 <memchr>
 8008120:	b140      	cbz	r0, 8008134 <_vfiprintf_r+0x198>
 8008122:	2340      	movs	r3, #64	; 0x40
 8008124:	eba0 000a 	sub.w	r0, r0, sl
 8008128:	fa03 f000 	lsl.w	r0, r3, r0
 800812c:	9b04      	ldr	r3, [sp, #16]
 800812e:	4303      	orrs	r3, r0
 8008130:	3401      	adds	r4, #1
 8008132:	9304      	str	r3, [sp, #16]
 8008134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008138:	482c      	ldr	r0, [pc, #176]	; (80081ec <_vfiprintf_r+0x250>)
 800813a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800813e:	2206      	movs	r2, #6
 8008140:	f7f8 f84e 	bl	80001e0 <memchr>
 8008144:	2800      	cmp	r0, #0
 8008146:	d03f      	beq.n	80081c8 <_vfiprintf_r+0x22c>
 8008148:	4b29      	ldr	r3, [pc, #164]	; (80081f0 <_vfiprintf_r+0x254>)
 800814a:	bb1b      	cbnz	r3, 8008194 <_vfiprintf_r+0x1f8>
 800814c:	9b03      	ldr	r3, [sp, #12]
 800814e:	3307      	adds	r3, #7
 8008150:	f023 0307 	bic.w	r3, r3, #7
 8008154:	3308      	adds	r3, #8
 8008156:	9303      	str	r3, [sp, #12]
 8008158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800815a:	443b      	add	r3, r7
 800815c:	9309      	str	r3, [sp, #36]	; 0x24
 800815e:	e767      	b.n	8008030 <_vfiprintf_r+0x94>
 8008160:	fb0c 3202 	mla	r2, ip, r2, r3
 8008164:	460c      	mov	r4, r1
 8008166:	2001      	movs	r0, #1
 8008168:	e7a5      	b.n	80080b6 <_vfiprintf_r+0x11a>
 800816a:	2300      	movs	r3, #0
 800816c:	3401      	adds	r4, #1
 800816e:	9305      	str	r3, [sp, #20]
 8008170:	4619      	mov	r1, r3
 8008172:	f04f 0c0a 	mov.w	ip, #10
 8008176:	4620      	mov	r0, r4
 8008178:	f810 2b01 	ldrb.w	r2, [r0], #1
 800817c:	3a30      	subs	r2, #48	; 0x30
 800817e:	2a09      	cmp	r2, #9
 8008180:	d903      	bls.n	800818a <_vfiprintf_r+0x1ee>
 8008182:	2b00      	cmp	r3, #0
 8008184:	d0c5      	beq.n	8008112 <_vfiprintf_r+0x176>
 8008186:	9105      	str	r1, [sp, #20]
 8008188:	e7c3      	b.n	8008112 <_vfiprintf_r+0x176>
 800818a:	fb0c 2101 	mla	r1, ip, r1, r2
 800818e:	4604      	mov	r4, r0
 8008190:	2301      	movs	r3, #1
 8008192:	e7f0      	b.n	8008176 <_vfiprintf_r+0x1da>
 8008194:	ab03      	add	r3, sp, #12
 8008196:	9300      	str	r3, [sp, #0]
 8008198:	462a      	mov	r2, r5
 800819a:	4b16      	ldr	r3, [pc, #88]	; (80081f4 <_vfiprintf_r+0x258>)
 800819c:	a904      	add	r1, sp, #16
 800819e:	4630      	mov	r0, r6
 80081a0:	f3af 8000 	nop.w
 80081a4:	4607      	mov	r7, r0
 80081a6:	1c78      	adds	r0, r7, #1
 80081a8:	d1d6      	bne.n	8008158 <_vfiprintf_r+0x1bc>
 80081aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081ac:	07d9      	lsls	r1, r3, #31
 80081ae:	d405      	bmi.n	80081bc <_vfiprintf_r+0x220>
 80081b0:	89ab      	ldrh	r3, [r5, #12]
 80081b2:	059a      	lsls	r2, r3, #22
 80081b4:	d402      	bmi.n	80081bc <_vfiprintf_r+0x220>
 80081b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081b8:	f7ff fb62 	bl	8007880 <__retarget_lock_release_recursive>
 80081bc:	89ab      	ldrh	r3, [r5, #12]
 80081be:	065b      	lsls	r3, r3, #25
 80081c0:	f53f af12 	bmi.w	8007fe8 <_vfiprintf_r+0x4c>
 80081c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081c6:	e711      	b.n	8007fec <_vfiprintf_r+0x50>
 80081c8:	ab03      	add	r3, sp, #12
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	462a      	mov	r2, r5
 80081ce:	4b09      	ldr	r3, [pc, #36]	; (80081f4 <_vfiprintf_r+0x258>)
 80081d0:	a904      	add	r1, sp, #16
 80081d2:	4630      	mov	r0, r6
 80081d4:	f000 f880 	bl	80082d8 <_printf_i>
 80081d8:	e7e4      	b.n	80081a4 <_vfiprintf_r+0x208>
 80081da:	bf00      	nop
 80081dc:	08008eb0 	.word	0x08008eb0
 80081e0:	08008ed0 	.word	0x08008ed0
 80081e4:	08008e90 	.word	0x08008e90
 80081e8:	08008fa2 	.word	0x08008fa2
 80081ec:	08008fac 	.word	0x08008fac
 80081f0:	00000000 	.word	0x00000000
 80081f4:	08007f77 	.word	0x08007f77
 80081f8:	08008fa8 	.word	0x08008fa8

080081fc <_printf_common>:
 80081fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008200:	4616      	mov	r6, r2
 8008202:	4699      	mov	r9, r3
 8008204:	688a      	ldr	r2, [r1, #8]
 8008206:	690b      	ldr	r3, [r1, #16]
 8008208:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800820c:	4293      	cmp	r3, r2
 800820e:	bfb8      	it	lt
 8008210:	4613      	movlt	r3, r2
 8008212:	6033      	str	r3, [r6, #0]
 8008214:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008218:	4607      	mov	r7, r0
 800821a:	460c      	mov	r4, r1
 800821c:	b10a      	cbz	r2, 8008222 <_printf_common+0x26>
 800821e:	3301      	adds	r3, #1
 8008220:	6033      	str	r3, [r6, #0]
 8008222:	6823      	ldr	r3, [r4, #0]
 8008224:	0699      	lsls	r1, r3, #26
 8008226:	bf42      	ittt	mi
 8008228:	6833      	ldrmi	r3, [r6, #0]
 800822a:	3302      	addmi	r3, #2
 800822c:	6033      	strmi	r3, [r6, #0]
 800822e:	6825      	ldr	r5, [r4, #0]
 8008230:	f015 0506 	ands.w	r5, r5, #6
 8008234:	d106      	bne.n	8008244 <_printf_common+0x48>
 8008236:	f104 0a19 	add.w	sl, r4, #25
 800823a:	68e3      	ldr	r3, [r4, #12]
 800823c:	6832      	ldr	r2, [r6, #0]
 800823e:	1a9b      	subs	r3, r3, r2
 8008240:	42ab      	cmp	r3, r5
 8008242:	dc26      	bgt.n	8008292 <_printf_common+0x96>
 8008244:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008248:	1e13      	subs	r3, r2, #0
 800824a:	6822      	ldr	r2, [r4, #0]
 800824c:	bf18      	it	ne
 800824e:	2301      	movne	r3, #1
 8008250:	0692      	lsls	r2, r2, #26
 8008252:	d42b      	bmi.n	80082ac <_printf_common+0xb0>
 8008254:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008258:	4649      	mov	r1, r9
 800825a:	4638      	mov	r0, r7
 800825c:	47c0      	blx	r8
 800825e:	3001      	adds	r0, #1
 8008260:	d01e      	beq.n	80082a0 <_printf_common+0xa4>
 8008262:	6823      	ldr	r3, [r4, #0]
 8008264:	68e5      	ldr	r5, [r4, #12]
 8008266:	6832      	ldr	r2, [r6, #0]
 8008268:	f003 0306 	and.w	r3, r3, #6
 800826c:	2b04      	cmp	r3, #4
 800826e:	bf08      	it	eq
 8008270:	1aad      	subeq	r5, r5, r2
 8008272:	68a3      	ldr	r3, [r4, #8]
 8008274:	6922      	ldr	r2, [r4, #16]
 8008276:	bf0c      	ite	eq
 8008278:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800827c:	2500      	movne	r5, #0
 800827e:	4293      	cmp	r3, r2
 8008280:	bfc4      	itt	gt
 8008282:	1a9b      	subgt	r3, r3, r2
 8008284:	18ed      	addgt	r5, r5, r3
 8008286:	2600      	movs	r6, #0
 8008288:	341a      	adds	r4, #26
 800828a:	42b5      	cmp	r5, r6
 800828c:	d11a      	bne.n	80082c4 <_printf_common+0xc8>
 800828e:	2000      	movs	r0, #0
 8008290:	e008      	b.n	80082a4 <_printf_common+0xa8>
 8008292:	2301      	movs	r3, #1
 8008294:	4652      	mov	r2, sl
 8008296:	4649      	mov	r1, r9
 8008298:	4638      	mov	r0, r7
 800829a:	47c0      	blx	r8
 800829c:	3001      	adds	r0, #1
 800829e:	d103      	bne.n	80082a8 <_printf_common+0xac>
 80082a0:	f04f 30ff 	mov.w	r0, #4294967295
 80082a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082a8:	3501      	adds	r5, #1
 80082aa:	e7c6      	b.n	800823a <_printf_common+0x3e>
 80082ac:	18e1      	adds	r1, r4, r3
 80082ae:	1c5a      	adds	r2, r3, #1
 80082b0:	2030      	movs	r0, #48	; 0x30
 80082b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082b6:	4422      	add	r2, r4
 80082b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082c0:	3302      	adds	r3, #2
 80082c2:	e7c7      	b.n	8008254 <_printf_common+0x58>
 80082c4:	2301      	movs	r3, #1
 80082c6:	4622      	mov	r2, r4
 80082c8:	4649      	mov	r1, r9
 80082ca:	4638      	mov	r0, r7
 80082cc:	47c0      	blx	r8
 80082ce:	3001      	adds	r0, #1
 80082d0:	d0e6      	beq.n	80082a0 <_printf_common+0xa4>
 80082d2:	3601      	adds	r6, #1
 80082d4:	e7d9      	b.n	800828a <_printf_common+0x8e>
	...

080082d8 <_printf_i>:
 80082d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082dc:	7e0f      	ldrb	r7, [r1, #24]
 80082de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80082e0:	2f78      	cmp	r7, #120	; 0x78
 80082e2:	4691      	mov	r9, r2
 80082e4:	4680      	mov	r8, r0
 80082e6:	460c      	mov	r4, r1
 80082e8:	469a      	mov	sl, r3
 80082ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80082ee:	d807      	bhi.n	8008300 <_printf_i+0x28>
 80082f0:	2f62      	cmp	r7, #98	; 0x62
 80082f2:	d80a      	bhi.n	800830a <_printf_i+0x32>
 80082f4:	2f00      	cmp	r7, #0
 80082f6:	f000 80d8 	beq.w	80084aa <_printf_i+0x1d2>
 80082fa:	2f58      	cmp	r7, #88	; 0x58
 80082fc:	f000 80a3 	beq.w	8008446 <_printf_i+0x16e>
 8008300:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008304:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008308:	e03a      	b.n	8008380 <_printf_i+0xa8>
 800830a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800830e:	2b15      	cmp	r3, #21
 8008310:	d8f6      	bhi.n	8008300 <_printf_i+0x28>
 8008312:	a101      	add	r1, pc, #4	; (adr r1, 8008318 <_printf_i+0x40>)
 8008314:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008318:	08008371 	.word	0x08008371
 800831c:	08008385 	.word	0x08008385
 8008320:	08008301 	.word	0x08008301
 8008324:	08008301 	.word	0x08008301
 8008328:	08008301 	.word	0x08008301
 800832c:	08008301 	.word	0x08008301
 8008330:	08008385 	.word	0x08008385
 8008334:	08008301 	.word	0x08008301
 8008338:	08008301 	.word	0x08008301
 800833c:	08008301 	.word	0x08008301
 8008340:	08008301 	.word	0x08008301
 8008344:	08008491 	.word	0x08008491
 8008348:	080083b5 	.word	0x080083b5
 800834c:	08008473 	.word	0x08008473
 8008350:	08008301 	.word	0x08008301
 8008354:	08008301 	.word	0x08008301
 8008358:	080084b3 	.word	0x080084b3
 800835c:	08008301 	.word	0x08008301
 8008360:	080083b5 	.word	0x080083b5
 8008364:	08008301 	.word	0x08008301
 8008368:	08008301 	.word	0x08008301
 800836c:	0800847b 	.word	0x0800847b
 8008370:	682b      	ldr	r3, [r5, #0]
 8008372:	1d1a      	adds	r2, r3, #4
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	602a      	str	r2, [r5, #0]
 8008378:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800837c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008380:	2301      	movs	r3, #1
 8008382:	e0a3      	b.n	80084cc <_printf_i+0x1f4>
 8008384:	6820      	ldr	r0, [r4, #0]
 8008386:	6829      	ldr	r1, [r5, #0]
 8008388:	0606      	lsls	r6, r0, #24
 800838a:	f101 0304 	add.w	r3, r1, #4
 800838e:	d50a      	bpl.n	80083a6 <_printf_i+0xce>
 8008390:	680e      	ldr	r6, [r1, #0]
 8008392:	602b      	str	r3, [r5, #0]
 8008394:	2e00      	cmp	r6, #0
 8008396:	da03      	bge.n	80083a0 <_printf_i+0xc8>
 8008398:	232d      	movs	r3, #45	; 0x2d
 800839a:	4276      	negs	r6, r6
 800839c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083a0:	485e      	ldr	r0, [pc, #376]	; (800851c <_printf_i+0x244>)
 80083a2:	230a      	movs	r3, #10
 80083a4:	e019      	b.n	80083da <_printf_i+0x102>
 80083a6:	680e      	ldr	r6, [r1, #0]
 80083a8:	602b      	str	r3, [r5, #0]
 80083aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80083ae:	bf18      	it	ne
 80083b0:	b236      	sxthne	r6, r6
 80083b2:	e7ef      	b.n	8008394 <_printf_i+0xbc>
 80083b4:	682b      	ldr	r3, [r5, #0]
 80083b6:	6820      	ldr	r0, [r4, #0]
 80083b8:	1d19      	adds	r1, r3, #4
 80083ba:	6029      	str	r1, [r5, #0]
 80083bc:	0601      	lsls	r1, r0, #24
 80083be:	d501      	bpl.n	80083c4 <_printf_i+0xec>
 80083c0:	681e      	ldr	r6, [r3, #0]
 80083c2:	e002      	b.n	80083ca <_printf_i+0xf2>
 80083c4:	0646      	lsls	r6, r0, #25
 80083c6:	d5fb      	bpl.n	80083c0 <_printf_i+0xe8>
 80083c8:	881e      	ldrh	r6, [r3, #0]
 80083ca:	4854      	ldr	r0, [pc, #336]	; (800851c <_printf_i+0x244>)
 80083cc:	2f6f      	cmp	r7, #111	; 0x6f
 80083ce:	bf0c      	ite	eq
 80083d0:	2308      	moveq	r3, #8
 80083d2:	230a      	movne	r3, #10
 80083d4:	2100      	movs	r1, #0
 80083d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083da:	6865      	ldr	r5, [r4, #4]
 80083dc:	60a5      	str	r5, [r4, #8]
 80083de:	2d00      	cmp	r5, #0
 80083e0:	bfa2      	ittt	ge
 80083e2:	6821      	ldrge	r1, [r4, #0]
 80083e4:	f021 0104 	bicge.w	r1, r1, #4
 80083e8:	6021      	strge	r1, [r4, #0]
 80083ea:	b90e      	cbnz	r6, 80083f0 <_printf_i+0x118>
 80083ec:	2d00      	cmp	r5, #0
 80083ee:	d04d      	beq.n	800848c <_printf_i+0x1b4>
 80083f0:	4615      	mov	r5, r2
 80083f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80083f6:	fb03 6711 	mls	r7, r3, r1, r6
 80083fa:	5dc7      	ldrb	r7, [r0, r7]
 80083fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008400:	4637      	mov	r7, r6
 8008402:	42bb      	cmp	r3, r7
 8008404:	460e      	mov	r6, r1
 8008406:	d9f4      	bls.n	80083f2 <_printf_i+0x11a>
 8008408:	2b08      	cmp	r3, #8
 800840a:	d10b      	bne.n	8008424 <_printf_i+0x14c>
 800840c:	6823      	ldr	r3, [r4, #0]
 800840e:	07de      	lsls	r6, r3, #31
 8008410:	d508      	bpl.n	8008424 <_printf_i+0x14c>
 8008412:	6923      	ldr	r3, [r4, #16]
 8008414:	6861      	ldr	r1, [r4, #4]
 8008416:	4299      	cmp	r1, r3
 8008418:	bfde      	ittt	le
 800841a:	2330      	movle	r3, #48	; 0x30
 800841c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008420:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008424:	1b52      	subs	r2, r2, r5
 8008426:	6122      	str	r2, [r4, #16]
 8008428:	f8cd a000 	str.w	sl, [sp]
 800842c:	464b      	mov	r3, r9
 800842e:	aa03      	add	r2, sp, #12
 8008430:	4621      	mov	r1, r4
 8008432:	4640      	mov	r0, r8
 8008434:	f7ff fee2 	bl	80081fc <_printf_common>
 8008438:	3001      	adds	r0, #1
 800843a:	d14c      	bne.n	80084d6 <_printf_i+0x1fe>
 800843c:	f04f 30ff 	mov.w	r0, #4294967295
 8008440:	b004      	add	sp, #16
 8008442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008446:	4835      	ldr	r0, [pc, #212]	; (800851c <_printf_i+0x244>)
 8008448:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800844c:	6829      	ldr	r1, [r5, #0]
 800844e:	6823      	ldr	r3, [r4, #0]
 8008450:	f851 6b04 	ldr.w	r6, [r1], #4
 8008454:	6029      	str	r1, [r5, #0]
 8008456:	061d      	lsls	r5, r3, #24
 8008458:	d514      	bpl.n	8008484 <_printf_i+0x1ac>
 800845a:	07df      	lsls	r7, r3, #31
 800845c:	bf44      	itt	mi
 800845e:	f043 0320 	orrmi.w	r3, r3, #32
 8008462:	6023      	strmi	r3, [r4, #0]
 8008464:	b91e      	cbnz	r6, 800846e <_printf_i+0x196>
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	f023 0320 	bic.w	r3, r3, #32
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	2310      	movs	r3, #16
 8008470:	e7b0      	b.n	80083d4 <_printf_i+0xfc>
 8008472:	6823      	ldr	r3, [r4, #0]
 8008474:	f043 0320 	orr.w	r3, r3, #32
 8008478:	6023      	str	r3, [r4, #0]
 800847a:	2378      	movs	r3, #120	; 0x78
 800847c:	4828      	ldr	r0, [pc, #160]	; (8008520 <_printf_i+0x248>)
 800847e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008482:	e7e3      	b.n	800844c <_printf_i+0x174>
 8008484:	0659      	lsls	r1, r3, #25
 8008486:	bf48      	it	mi
 8008488:	b2b6      	uxthmi	r6, r6
 800848a:	e7e6      	b.n	800845a <_printf_i+0x182>
 800848c:	4615      	mov	r5, r2
 800848e:	e7bb      	b.n	8008408 <_printf_i+0x130>
 8008490:	682b      	ldr	r3, [r5, #0]
 8008492:	6826      	ldr	r6, [r4, #0]
 8008494:	6961      	ldr	r1, [r4, #20]
 8008496:	1d18      	adds	r0, r3, #4
 8008498:	6028      	str	r0, [r5, #0]
 800849a:	0635      	lsls	r5, r6, #24
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	d501      	bpl.n	80084a4 <_printf_i+0x1cc>
 80084a0:	6019      	str	r1, [r3, #0]
 80084a2:	e002      	b.n	80084aa <_printf_i+0x1d2>
 80084a4:	0670      	lsls	r0, r6, #25
 80084a6:	d5fb      	bpl.n	80084a0 <_printf_i+0x1c8>
 80084a8:	8019      	strh	r1, [r3, #0]
 80084aa:	2300      	movs	r3, #0
 80084ac:	6123      	str	r3, [r4, #16]
 80084ae:	4615      	mov	r5, r2
 80084b0:	e7ba      	b.n	8008428 <_printf_i+0x150>
 80084b2:	682b      	ldr	r3, [r5, #0]
 80084b4:	1d1a      	adds	r2, r3, #4
 80084b6:	602a      	str	r2, [r5, #0]
 80084b8:	681d      	ldr	r5, [r3, #0]
 80084ba:	6862      	ldr	r2, [r4, #4]
 80084bc:	2100      	movs	r1, #0
 80084be:	4628      	mov	r0, r5
 80084c0:	f7f7 fe8e 	bl	80001e0 <memchr>
 80084c4:	b108      	cbz	r0, 80084ca <_printf_i+0x1f2>
 80084c6:	1b40      	subs	r0, r0, r5
 80084c8:	6060      	str	r0, [r4, #4]
 80084ca:	6863      	ldr	r3, [r4, #4]
 80084cc:	6123      	str	r3, [r4, #16]
 80084ce:	2300      	movs	r3, #0
 80084d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084d4:	e7a8      	b.n	8008428 <_printf_i+0x150>
 80084d6:	6923      	ldr	r3, [r4, #16]
 80084d8:	462a      	mov	r2, r5
 80084da:	4649      	mov	r1, r9
 80084dc:	4640      	mov	r0, r8
 80084de:	47d0      	blx	sl
 80084e0:	3001      	adds	r0, #1
 80084e2:	d0ab      	beq.n	800843c <_printf_i+0x164>
 80084e4:	6823      	ldr	r3, [r4, #0]
 80084e6:	079b      	lsls	r3, r3, #30
 80084e8:	d413      	bmi.n	8008512 <_printf_i+0x23a>
 80084ea:	68e0      	ldr	r0, [r4, #12]
 80084ec:	9b03      	ldr	r3, [sp, #12]
 80084ee:	4298      	cmp	r0, r3
 80084f0:	bfb8      	it	lt
 80084f2:	4618      	movlt	r0, r3
 80084f4:	e7a4      	b.n	8008440 <_printf_i+0x168>
 80084f6:	2301      	movs	r3, #1
 80084f8:	4632      	mov	r2, r6
 80084fa:	4649      	mov	r1, r9
 80084fc:	4640      	mov	r0, r8
 80084fe:	47d0      	blx	sl
 8008500:	3001      	adds	r0, #1
 8008502:	d09b      	beq.n	800843c <_printf_i+0x164>
 8008504:	3501      	adds	r5, #1
 8008506:	68e3      	ldr	r3, [r4, #12]
 8008508:	9903      	ldr	r1, [sp, #12]
 800850a:	1a5b      	subs	r3, r3, r1
 800850c:	42ab      	cmp	r3, r5
 800850e:	dcf2      	bgt.n	80084f6 <_printf_i+0x21e>
 8008510:	e7eb      	b.n	80084ea <_printf_i+0x212>
 8008512:	2500      	movs	r5, #0
 8008514:	f104 0619 	add.w	r6, r4, #25
 8008518:	e7f5      	b.n	8008506 <_printf_i+0x22e>
 800851a:	bf00      	nop
 800851c:	08008fb3 	.word	0x08008fb3
 8008520:	08008fc4 	.word	0x08008fc4

08008524 <_read_r>:
 8008524:	b538      	push	{r3, r4, r5, lr}
 8008526:	4d07      	ldr	r5, [pc, #28]	; (8008544 <_read_r+0x20>)
 8008528:	4604      	mov	r4, r0
 800852a:	4608      	mov	r0, r1
 800852c:	4611      	mov	r1, r2
 800852e:	2200      	movs	r2, #0
 8008530:	602a      	str	r2, [r5, #0]
 8008532:	461a      	mov	r2, r3
 8008534:	f7f9 fc24 	bl	8001d80 <_read>
 8008538:	1c43      	adds	r3, r0, #1
 800853a:	d102      	bne.n	8008542 <_read_r+0x1e>
 800853c:	682b      	ldr	r3, [r5, #0]
 800853e:	b103      	cbz	r3, 8008542 <_read_r+0x1e>
 8008540:	6023      	str	r3, [r4, #0]
 8008542:	bd38      	pop	{r3, r4, r5, pc}
 8008544:	20004bd4 	.word	0x20004bd4

08008548 <__swbuf_r>:
 8008548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854a:	460e      	mov	r6, r1
 800854c:	4614      	mov	r4, r2
 800854e:	4605      	mov	r5, r0
 8008550:	b118      	cbz	r0, 800855a <__swbuf_r+0x12>
 8008552:	6983      	ldr	r3, [r0, #24]
 8008554:	b90b      	cbnz	r3, 800855a <__swbuf_r+0x12>
 8008556:	f7ff f8cf 	bl	80076f8 <__sinit>
 800855a:	4b21      	ldr	r3, [pc, #132]	; (80085e0 <__swbuf_r+0x98>)
 800855c:	429c      	cmp	r4, r3
 800855e:	d12b      	bne.n	80085b8 <__swbuf_r+0x70>
 8008560:	686c      	ldr	r4, [r5, #4]
 8008562:	69a3      	ldr	r3, [r4, #24]
 8008564:	60a3      	str	r3, [r4, #8]
 8008566:	89a3      	ldrh	r3, [r4, #12]
 8008568:	071a      	lsls	r2, r3, #28
 800856a:	d52f      	bpl.n	80085cc <__swbuf_r+0x84>
 800856c:	6923      	ldr	r3, [r4, #16]
 800856e:	b36b      	cbz	r3, 80085cc <__swbuf_r+0x84>
 8008570:	6923      	ldr	r3, [r4, #16]
 8008572:	6820      	ldr	r0, [r4, #0]
 8008574:	1ac0      	subs	r0, r0, r3
 8008576:	6963      	ldr	r3, [r4, #20]
 8008578:	b2f6      	uxtb	r6, r6
 800857a:	4283      	cmp	r3, r0
 800857c:	4637      	mov	r7, r6
 800857e:	dc04      	bgt.n	800858a <__swbuf_r+0x42>
 8008580:	4621      	mov	r1, r4
 8008582:	4628      	mov	r0, r5
 8008584:	f7ff fc74 	bl	8007e70 <_fflush_r>
 8008588:	bb30      	cbnz	r0, 80085d8 <__swbuf_r+0x90>
 800858a:	68a3      	ldr	r3, [r4, #8]
 800858c:	3b01      	subs	r3, #1
 800858e:	60a3      	str	r3, [r4, #8]
 8008590:	6823      	ldr	r3, [r4, #0]
 8008592:	1c5a      	adds	r2, r3, #1
 8008594:	6022      	str	r2, [r4, #0]
 8008596:	701e      	strb	r6, [r3, #0]
 8008598:	6963      	ldr	r3, [r4, #20]
 800859a:	3001      	adds	r0, #1
 800859c:	4283      	cmp	r3, r0
 800859e:	d004      	beq.n	80085aa <__swbuf_r+0x62>
 80085a0:	89a3      	ldrh	r3, [r4, #12]
 80085a2:	07db      	lsls	r3, r3, #31
 80085a4:	d506      	bpl.n	80085b4 <__swbuf_r+0x6c>
 80085a6:	2e0a      	cmp	r6, #10
 80085a8:	d104      	bne.n	80085b4 <__swbuf_r+0x6c>
 80085aa:	4621      	mov	r1, r4
 80085ac:	4628      	mov	r0, r5
 80085ae:	f7ff fc5f 	bl	8007e70 <_fflush_r>
 80085b2:	b988      	cbnz	r0, 80085d8 <__swbuf_r+0x90>
 80085b4:	4638      	mov	r0, r7
 80085b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085b8:	4b0a      	ldr	r3, [pc, #40]	; (80085e4 <__swbuf_r+0x9c>)
 80085ba:	429c      	cmp	r4, r3
 80085bc:	d101      	bne.n	80085c2 <__swbuf_r+0x7a>
 80085be:	68ac      	ldr	r4, [r5, #8]
 80085c0:	e7cf      	b.n	8008562 <__swbuf_r+0x1a>
 80085c2:	4b09      	ldr	r3, [pc, #36]	; (80085e8 <__swbuf_r+0xa0>)
 80085c4:	429c      	cmp	r4, r3
 80085c6:	bf08      	it	eq
 80085c8:	68ec      	ldreq	r4, [r5, #12]
 80085ca:	e7ca      	b.n	8008562 <__swbuf_r+0x1a>
 80085cc:	4621      	mov	r1, r4
 80085ce:	4628      	mov	r0, r5
 80085d0:	f000 f80c 	bl	80085ec <__swsetup_r>
 80085d4:	2800      	cmp	r0, #0
 80085d6:	d0cb      	beq.n	8008570 <__swbuf_r+0x28>
 80085d8:	f04f 37ff 	mov.w	r7, #4294967295
 80085dc:	e7ea      	b.n	80085b4 <__swbuf_r+0x6c>
 80085de:	bf00      	nop
 80085e0:	08008eb0 	.word	0x08008eb0
 80085e4:	08008ed0 	.word	0x08008ed0
 80085e8:	08008e90 	.word	0x08008e90

080085ec <__swsetup_r>:
 80085ec:	4b32      	ldr	r3, [pc, #200]	; (80086b8 <__swsetup_r+0xcc>)
 80085ee:	b570      	push	{r4, r5, r6, lr}
 80085f0:	681d      	ldr	r5, [r3, #0]
 80085f2:	4606      	mov	r6, r0
 80085f4:	460c      	mov	r4, r1
 80085f6:	b125      	cbz	r5, 8008602 <__swsetup_r+0x16>
 80085f8:	69ab      	ldr	r3, [r5, #24]
 80085fa:	b913      	cbnz	r3, 8008602 <__swsetup_r+0x16>
 80085fc:	4628      	mov	r0, r5
 80085fe:	f7ff f87b 	bl	80076f8 <__sinit>
 8008602:	4b2e      	ldr	r3, [pc, #184]	; (80086bc <__swsetup_r+0xd0>)
 8008604:	429c      	cmp	r4, r3
 8008606:	d10f      	bne.n	8008628 <__swsetup_r+0x3c>
 8008608:	686c      	ldr	r4, [r5, #4]
 800860a:	89a3      	ldrh	r3, [r4, #12]
 800860c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008610:	0719      	lsls	r1, r3, #28
 8008612:	d42c      	bmi.n	800866e <__swsetup_r+0x82>
 8008614:	06dd      	lsls	r5, r3, #27
 8008616:	d411      	bmi.n	800863c <__swsetup_r+0x50>
 8008618:	2309      	movs	r3, #9
 800861a:	6033      	str	r3, [r6, #0]
 800861c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008620:	81a3      	strh	r3, [r4, #12]
 8008622:	f04f 30ff 	mov.w	r0, #4294967295
 8008626:	e03e      	b.n	80086a6 <__swsetup_r+0xba>
 8008628:	4b25      	ldr	r3, [pc, #148]	; (80086c0 <__swsetup_r+0xd4>)
 800862a:	429c      	cmp	r4, r3
 800862c:	d101      	bne.n	8008632 <__swsetup_r+0x46>
 800862e:	68ac      	ldr	r4, [r5, #8]
 8008630:	e7eb      	b.n	800860a <__swsetup_r+0x1e>
 8008632:	4b24      	ldr	r3, [pc, #144]	; (80086c4 <__swsetup_r+0xd8>)
 8008634:	429c      	cmp	r4, r3
 8008636:	bf08      	it	eq
 8008638:	68ec      	ldreq	r4, [r5, #12]
 800863a:	e7e6      	b.n	800860a <__swsetup_r+0x1e>
 800863c:	0758      	lsls	r0, r3, #29
 800863e:	d512      	bpl.n	8008666 <__swsetup_r+0x7a>
 8008640:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008642:	b141      	cbz	r1, 8008656 <__swsetup_r+0x6a>
 8008644:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008648:	4299      	cmp	r1, r3
 800864a:	d002      	beq.n	8008652 <__swsetup_r+0x66>
 800864c:	4630      	mov	r0, r6
 800864e:	f7ff f93f 	bl	80078d0 <_free_r>
 8008652:	2300      	movs	r3, #0
 8008654:	6363      	str	r3, [r4, #52]	; 0x34
 8008656:	89a3      	ldrh	r3, [r4, #12]
 8008658:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800865c:	81a3      	strh	r3, [r4, #12]
 800865e:	2300      	movs	r3, #0
 8008660:	6063      	str	r3, [r4, #4]
 8008662:	6923      	ldr	r3, [r4, #16]
 8008664:	6023      	str	r3, [r4, #0]
 8008666:	89a3      	ldrh	r3, [r4, #12]
 8008668:	f043 0308 	orr.w	r3, r3, #8
 800866c:	81a3      	strh	r3, [r4, #12]
 800866e:	6923      	ldr	r3, [r4, #16]
 8008670:	b94b      	cbnz	r3, 8008686 <__swsetup_r+0x9a>
 8008672:	89a3      	ldrh	r3, [r4, #12]
 8008674:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800867c:	d003      	beq.n	8008686 <__swsetup_r+0x9a>
 800867e:	4621      	mov	r1, r4
 8008680:	4630      	mov	r0, r6
 8008682:	f000 f84d 	bl	8008720 <__smakebuf_r>
 8008686:	89a0      	ldrh	r0, [r4, #12]
 8008688:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800868c:	f010 0301 	ands.w	r3, r0, #1
 8008690:	d00a      	beq.n	80086a8 <__swsetup_r+0xbc>
 8008692:	2300      	movs	r3, #0
 8008694:	60a3      	str	r3, [r4, #8]
 8008696:	6963      	ldr	r3, [r4, #20]
 8008698:	425b      	negs	r3, r3
 800869a:	61a3      	str	r3, [r4, #24]
 800869c:	6923      	ldr	r3, [r4, #16]
 800869e:	b943      	cbnz	r3, 80086b2 <__swsetup_r+0xc6>
 80086a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80086a4:	d1ba      	bne.n	800861c <__swsetup_r+0x30>
 80086a6:	bd70      	pop	{r4, r5, r6, pc}
 80086a8:	0781      	lsls	r1, r0, #30
 80086aa:	bf58      	it	pl
 80086ac:	6963      	ldrpl	r3, [r4, #20]
 80086ae:	60a3      	str	r3, [r4, #8]
 80086b0:	e7f4      	b.n	800869c <__swsetup_r+0xb0>
 80086b2:	2000      	movs	r0, #0
 80086b4:	e7f7      	b.n	80086a6 <__swsetup_r+0xba>
 80086b6:	bf00      	nop
 80086b8:	20000010 	.word	0x20000010
 80086bc:	08008eb0 	.word	0x08008eb0
 80086c0:	08008ed0 	.word	0x08008ed0
 80086c4:	08008e90 	.word	0x08008e90

080086c8 <abort>:
 80086c8:	b508      	push	{r3, lr}
 80086ca:	2006      	movs	r0, #6
 80086cc:	f000 f890 	bl	80087f0 <raise>
 80086d0:	2001      	movs	r0, #1
 80086d2:	f7f9 fb4b 	bl	8001d6c <_exit>

080086d6 <__swhatbuf_r>:
 80086d6:	b570      	push	{r4, r5, r6, lr}
 80086d8:	460e      	mov	r6, r1
 80086da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086de:	2900      	cmp	r1, #0
 80086e0:	b096      	sub	sp, #88	; 0x58
 80086e2:	4614      	mov	r4, r2
 80086e4:	461d      	mov	r5, r3
 80086e6:	da08      	bge.n	80086fa <__swhatbuf_r+0x24>
 80086e8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	602a      	str	r2, [r5, #0]
 80086f0:	061a      	lsls	r2, r3, #24
 80086f2:	d410      	bmi.n	8008716 <__swhatbuf_r+0x40>
 80086f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086f8:	e00e      	b.n	8008718 <__swhatbuf_r+0x42>
 80086fa:	466a      	mov	r2, sp
 80086fc:	f000 f894 	bl	8008828 <_fstat_r>
 8008700:	2800      	cmp	r0, #0
 8008702:	dbf1      	blt.n	80086e8 <__swhatbuf_r+0x12>
 8008704:	9a01      	ldr	r2, [sp, #4]
 8008706:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800870a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800870e:	425a      	negs	r2, r3
 8008710:	415a      	adcs	r2, r3
 8008712:	602a      	str	r2, [r5, #0]
 8008714:	e7ee      	b.n	80086f4 <__swhatbuf_r+0x1e>
 8008716:	2340      	movs	r3, #64	; 0x40
 8008718:	2000      	movs	r0, #0
 800871a:	6023      	str	r3, [r4, #0]
 800871c:	b016      	add	sp, #88	; 0x58
 800871e:	bd70      	pop	{r4, r5, r6, pc}

08008720 <__smakebuf_r>:
 8008720:	898b      	ldrh	r3, [r1, #12]
 8008722:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008724:	079d      	lsls	r5, r3, #30
 8008726:	4606      	mov	r6, r0
 8008728:	460c      	mov	r4, r1
 800872a:	d507      	bpl.n	800873c <__smakebuf_r+0x1c>
 800872c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008730:	6023      	str	r3, [r4, #0]
 8008732:	6123      	str	r3, [r4, #16]
 8008734:	2301      	movs	r3, #1
 8008736:	6163      	str	r3, [r4, #20]
 8008738:	b002      	add	sp, #8
 800873a:	bd70      	pop	{r4, r5, r6, pc}
 800873c:	ab01      	add	r3, sp, #4
 800873e:	466a      	mov	r2, sp
 8008740:	f7ff ffc9 	bl	80086d6 <__swhatbuf_r>
 8008744:	9900      	ldr	r1, [sp, #0]
 8008746:	4605      	mov	r5, r0
 8008748:	4630      	mov	r0, r6
 800874a:	f7ff f92d 	bl	80079a8 <_malloc_r>
 800874e:	b948      	cbnz	r0, 8008764 <__smakebuf_r+0x44>
 8008750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008754:	059a      	lsls	r2, r3, #22
 8008756:	d4ef      	bmi.n	8008738 <__smakebuf_r+0x18>
 8008758:	f023 0303 	bic.w	r3, r3, #3
 800875c:	f043 0302 	orr.w	r3, r3, #2
 8008760:	81a3      	strh	r3, [r4, #12]
 8008762:	e7e3      	b.n	800872c <__smakebuf_r+0xc>
 8008764:	4b0d      	ldr	r3, [pc, #52]	; (800879c <__smakebuf_r+0x7c>)
 8008766:	62b3      	str	r3, [r6, #40]	; 0x28
 8008768:	89a3      	ldrh	r3, [r4, #12]
 800876a:	6020      	str	r0, [r4, #0]
 800876c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008770:	81a3      	strh	r3, [r4, #12]
 8008772:	9b00      	ldr	r3, [sp, #0]
 8008774:	6163      	str	r3, [r4, #20]
 8008776:	9b01      	ldr	r3, [sp, #4]
 8008778:	6120      	str	r0, [r4, #16]
 800877a:	b15b      	cbz	r3, 8008794 <__smakebuf_r+0x74>
 800877c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008780:	4630      	mov	r0, r6
 8008782:	f000 f863 	bl	800884c <_isatty_r>
 8008786:	b128      	cbz	r0, 8008794 <__smakebuf_r+0x74>
 8008788:	89a3      	ldrh	r3, [r4, #12]
 800878a:	f023 0303 	bic.w	r3, r3, #3
 800878e:	f043 0301 	orr.w	r3, r3, #1
 8008792:	81a3      	strh	r3, [r4, #12]
 8008794:	89a0      	ldrh	r0, [r4, #12]
 8008796:	4305      	orrs	r5, r0
 8008798:	81a5      	strh	r5, [r4, #12]
 800879a:	e7cd      	b.n	8008738 <__smakebuf_r+0x18>
 800879c:	08007691 	.word	0x08007691

080087a0 <_raise_r>:
 80087a0:	291f      	cmp	r1, #31
 80087a2:	b538      	push	{r3, r4, r5, lr}
 80087a4:	4604      	mov	r4, r0
 80087a6:	460d      	mov	r5, r1
 80087a8:	d904      	bls.n	80087b4 <_raise_r+0x14>
 80087aa:	2316      	movs	r3, #22
 80087ac:	6003      	str	r3, [r0, #0]
 80087ae:	f04f 30ff 	mov.w	r0, #4294967295
 80087b2:	bd38      	pop	{r3, r4, r5, pc}
 80087b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80087b6:	b112      	cbz	r2, 80087be <_raise_r+0x1e>
 80087b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80087bc:	b94b      	cbnz	r3, 80087d2 <_raise_r+0x32>
 80087be:	4620      	mov	r0, r4
 80087c0:	f000 f830 	bl	8008824 <_getpid_r>
 80087c4:	462a      	mov	r2, r5
 80087c6:	4601      	mov	r1, r0
 80087c8:	4620      	mov	r0, r4
 80087ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087ce:	f000 b817 	b.w	8008800 <_kill_r>
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d00a      	beq.n	80087ec <_raise_r+0x4c>
 80087d6:	1c59      	adds	r1, r3, #1
 80087d8:	d103      	bne.n	80087e2 <_raise_r+0x42>
 80087da:	2316      	movs	r3, #22
 80087dc:	6003      	str	r3, [r0, #0]
 80087de:	2001      	movs	r0, #1
 80087e0:	e7e7      	b.n	80087b2 <_raise_r+0x12>
 80087e2:	2400      	movs	r4, #0
 80087e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80087e8:	4628      	mov	r0, r5
 80087ea:	4798      	blx	r3
 80087ec:	2000      	movs	r0, #0
 80087ee:	e7e0      	b.n	80087b2 <_raise_r+0x12>

080087f0 <raise>:
 80087f0:	4b02      	ldr	r3, [pc, #8]	; (80087fc <raise+0xc>)
 80087f2:	4601      	mov	r1, r0
 80087f4:	6818      	ldr	r0, [r3, #0]
 80087f6:	f7ff bfd3 	b.w	80087a0 <_raise_r>
 80087fa:	bf00      	nop
 80087fc:	20000010 	.word	0x20000010

08008800 <_kill_r>:
 8008800:	b538      	push	{r3, r4, r5, lr}
 8008802:	4d07      	ldr	r5, [pc, #28]	; (8008820 <_kill_r+0x20>)
 8008804:	2300      	movs	r3, #0
 8008806:	4604      	mov	r4, r0
 8008808:	4608      	mov	r0, r1
 800880a:	4611      	mov	r1, r2
 800880c:	602b      	str	r3, [r5, #0]
 800880e:	f7f9 fa9d 	bl	8001d4c <_kill>
 8008812:	1c43      	adds	r3, r0, #1
 8008814:	d102      	bne.n	800881c <_kill_r+0x1c>
 8008816:	682b      	ldr	r3, [r5, #0]
 8008818:	b103      	cbz	r3, 800881c <_kill_r+0x1c>
 800881a:	6023      	str	r3, [r4, #0]
 800881c:	bd38      	pop	{r3, r4, r5, pc}
 800881e:	bf00      	nop
 8008820:	20004bd4 	.word	0x20004bd4

08008824 <_getpid_r>:
 8008824:	f7f9 ba8a 	b.w	8001d3c <_getpid>

08008828 <_fstat_r>:
 8008828:	b538      	push	{r3, r4, r5, lr}
 800882a:	4d07      	ldr	r5, [pc, #28]	; (8008848 <_fstat_r+0x20>)
 800882c:	2300      	movs	r3, #0
 800882e:	4604      	mov	r4, r0
 8008830:	4608      	mov	r0, r1
 8008832:	4611      	mov	r1, r2
 8008834:	602b      	str	r3, [r5, #0]
 8008836:	f7f9 fae8 	bl	8001e0a <_fstat>
 800883a:	1c43      	adds	r3, r0, #1
 800883c:	d102      	bne.n	8008844 <_fstat_r+0x1c>
 800883e:	682b      	ldr	r3, [r5, #0]
 8008840:	b103      	cbz	r3, 8008844 <_fstat_r+0x1c>
 8008842:	6023      	str	r3, [r4, #0]
 8008844:	bd38      	pop	{r3, r4, r5, pc}
 8008846:	bf00      	nop
 8008848:	20004bd4 	.word	0x20004bd4

0800884c <_isatty_r>:
 800884c:	b538      	push	{r3, r4, r5, lr}
 800884e:	4d06      	ldr	r5, [pc, #24]	; (8008868 <_isatty_r+0x1c>)
 8008850:	2300      	movs	r3, #0
 8008852:	4604      	mov	r4, r0
 8008854:	4608      	mov	r0, r1
 8008856:	602b      	str	r3, [r5, #0]
 8008858:	f7f9 fae7 	bl	8001e2a <_isatty>
 800885c:	1c43      	adds	r3, r0, #1
 800885e:	d102      	bne.n	8008866 <_isatty_r+0x1a>
 8008860:	682b      	ldr	r3, [r5, #0]
 8008862:	b103      	cbz	r3, 8008866 <_isatty_r+0x1a>
 8008864:	6023      	str	r3, [r4, #0]
 8008866:	bd38      	pop	{r3, r4, r5, pc}
 8008868:	20004bd4 	.word	0x20004bd4

0800886c <_init>:
 800886c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800886e:	bf00      	nop
 8008870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008872:	bc08      	pop	{r3}
 8008874:	469e      	mov	lr, r3
 8008876:	4770      	bx	lr

08008878 <_fini>:
 8008878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800887a:	bf00      	nop
 800887c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800887e:	bc08      	pop	{r3}
 8008880:	469e      	mov	lr, r3
 8008882:	4770      	bx	lr
